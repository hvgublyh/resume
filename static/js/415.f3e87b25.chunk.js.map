{"version":3,"file":"static/js/415.f3e87b25.chunk.js","mappings":"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","sources":["pages/note/api/markdown-content.ts","webpack://@resume/resume/./src/pages/note/css/Note.module.scss?f775","pages/note/Note.tsx"],"sourcesContent":["import DOMPurify from 'dompurify';\r\nimport { marked } from 'marked';\r\n\r\nexport type MarkdownCategory = {\r\n  children: MarkdownFile[];\r\n  name: string;\r\n}\r\n\r\nexport type MarkdownFile = {\r\n  content?: string;\r\n  name: string;\r\n  path?: string;\r\n  renderContent?: { __html: string | TrustedHTML };\r\n}\r\n\r\nconst publicPath = process.env.NODE_ENV === 'production' ? 'https://raw.githubusercontent.com/hvgublyh/resume/gh-pages/' : '';\r\n\r\nexport const getMarkdownFiles = async () => {\r\n  let markdownFiles: MarkdownCategory[] = [];\r\n  const response = await fetch(publicPath + \"/file-list.json\")\r\n  if (response.ok) {\r\n    markdownFiles = await response.json() as MarkdownCategory[];\r\n  } else {\r\n    throw new Error('Failed to fetch file list');\r\n  }\r\n  return markdownFiles;\r\n};\r\n\r\nexport const getMarkdownContent = async (path: string) => {\r\n  // 获取markdown文件的内容, 使用fetch请求\r\n  const filePath = encodeURI(path);\r\n  const response = await fetch(publicPath + filePath);\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch markdown file: ${path}`);\r\n  }\r\n  const content = await response.text();\r\n  return content;\r\n}\r\n\r\n// Render markdown content safely\r\nexport const renderMarkdown = async (content: string) => {\r\n  const html = await marked(content);\r\n  const sanitizedHtml = DOMPurify.sanitize(html);\r\n  return { __html: sanitizedHtml };\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"markdownContainer\":\"Note_markdownContainer__K2Fli\",\"task-list-item\":\"Note_task-list-item__OSDLW\",\"hljs\":\"Note_hljs__jsV8r\",\"Note\":\"Note_Note__BlhYj\"};","import { useEffect, useState } from 'react';\r\n\r\nimport { getMarkdownContent, getMarkdownFiles, MarkdownCategory, MarkdownFile, renderMarkdown } from './api/markdown-content';\r\nimport styles from './css/Note.module.scss';\r\n\r\nconst categoryMaxNumber = 8\r\nconst colors = ['#006168', '#b82987', '#055098', '#982d2d', '#2a7931', '#44655b', '#077456', '#810fa9'];\r\nfunction Note() {\r\n  const [markdownFiles, setMarkdownFiles] = useState<MarkdownCategory[]>([]);\r\n  const [selectedFile, setSelectedFile] = useState<MarkdownFile | undefined>(undefined);\r\n  const [selectedCategory, setSelectedCategory] = useState<MarkdownCategory | undefined>(undefined);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [activeIndex, setActiveIndex] = useState<number>(0);\r\n\r\n  const selecteCategory = (category: MarkdownCategory) => {\r\n    setSelectedCategory(category);\r\n    selectFile(category.children[0]);\r\n    setActiveIndex(markdownFiles.findIndex((item) => item.name === category.name));\r\n  }\r\n  const selectFile = (file: MarkdownFile) => {\r\n    setSelectedFile(file);\r\n    if (file.content) {\r\n      // 如果文件已经加载过了，就不需要再加载了\r\n      return;\r\n    }\r\n    if (!file.path) return;\r\n    // Fetch the content of the selected file\r\n    void getMarkdownContent(file.path).then(async (content) => {\r\n      file.content = content;\r\n      file.renderContent = await renderMarkdown(content);\r\n      setSelectedFile({ ...file });\r\n    }).catch(() => {\r\n      setError('Failed to load markdown content. Please try again later.');\r\n    });\r\n  }\r\n  const fetchMarkdownFiles = async () => {\r\n    try {\r\n      // In a real app, you would make an API call to your backend\r\n      // to get the list of markdown files\r\n      const files = await getMarkdownFiles();\r\n      // filename be like 笔记本/方法汇总/常用技巧.md\r\n      // Sort the files by name\r\n      setMarkdownFiles(files.slice(0, categoryMaxNumber)); // 只取前5个分类\r\n      // 默认选中第一个分类和第一个文件\r\n      if (files.length > 0) {\r\n        selecteCategory(files[0]);\r\n        if (files[0].children.length > 0) {\r\n          setSelectedFile(files[0].children[0]);\r\n        }\r\n      }\r\n    } catch (error_) {\r\n      console.error('Error fetching markdown files:', error_);\r\n      setError('Failed to load markdown files. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to fetch all markdown files\r\n  useEffect(() => {\r\n    void fetchMarkdownFiles();\r\n  }, []);\r\n\r\n  if (loading && markdownFiles.length === 0) {\r\n    return <div>Loading markdown files...</div>;\r\n  }\r\n\r\n  if (error && markdownFiles.length === 0) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={\"note-container \" + styles.Note}>\r\n      <div className=\"sidebar\">\r\n        {/* 分类列表 */}\r\n        <div className=\"category-list-container\">\r\n          <ul className='category-list'>\r\n            {markdownFiles.map((category, index) => (\r\n              <li\r\n                className={\"category-item  \" + (selectedCategory?.name === category.name ? 'active' : '')}\r\n                key={category.name}\r\n                onClick={() => { selecteCategory(category); }}\r\n                style={{ 'backgroundColor': colors[index % colors.length] }}\r\n              >\r\n                {category.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className=\"category-list-bar\" style={{ 'backgroundColor': colors[activeIndex % colors.length] }} />\r\n        </div>\r\n        <div className=\"content-container\">\r\n          <div className=\"content\">\r\n            {loading ? <div>Loading content...</div> : undefined}\r\n\r\n            {error ? <div className=\"error\">{error}</div> : undefined}\r\n\r\n            {selectedFile?.renderContent && !loading ? <div\r\n              className={styles.markdownContainer}\r\n              dangerouslySetInnerHTML={selectedFile.renderContent}\r\n            /> : undefined}\r\n\r\n            {!selectedFile && !loading && (\r\n              <div className=\"no-selection\">Select a markdown file to view its content</div>\r\n            )}\r\n          </div>\r\n          {/* 文件列表 */}\r\n          <ul className='file-list'>\r\n            {selectedCategory?.children.map((file) => (\r\n              <li\r\n                className={'file-item ' + (selectedFile?.name === file.name ? 'active' : '')}\r\n                key={file.name}\r\n                onClick={() => { selectFile(file); }}\r\n              >\r\n                {file.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n"],"names":["publicPath","colors","markdownFiles","setMarkdownFiles","useState","selectedFile","setSelectedFile","undefined","selectedCategory","setSelectedCategory","loading","setLoading","error","setError","activeIndex","setActiveIndex","selecteCategory","category","selectFile","children","findIndex","item","name","file","content","path","async","filePath","encodeURI","response","fetch","ok","Error","text","getMarkdownContent","then","renderContent","html","marked","__html","DOMPurify","sanitize","renderMarkdown","catch","fetchMarkdownFiles","files","json","getMarkdownFiles","slice","length","error_","console","useEffect","_jsx","className","styles","_jsxs","map","index","onClick","style","dangerouslySetInnerHTML"],"sourceRoot":""}