"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = function(cb, mod) {
    return function __require() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
};
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from2, except, desc) {
    if (from2 && (typeof from2 === "undefined" ? "undefined" : _type_of(from2)) === "object" || typeof from2 === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from2[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// ../../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js
var require_classnames = __commonJS({
    "../../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js": function(exports2, module2) {
        "use strict";
        (function() {
            "use strict";
            var hasOwn = {}.hasOwnProperty;
            function classNames15() {
                var classes = "";
                for(var i = 0; i < arguments.length; i++){
                    var arg = arguments[i];
                    if (arg) {
                        classes = appendClass(classes, parseValue(arg));
                    }
                }
                return classes;
            }
            function parseValue(arg) {
                if (typeof arg === "string" || typeof arg === "number") {
                    return arg;
                }
                if ((typeof arg === "undefined" ? "undefined" : _type_of(arg)) !== "object") {
                    return "";
                }
                if (Array.isArray(arg)) {
                    return classNames15.apply(null, arg);
                }
                if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                    return arg.toString();
                }
                var classes = "";
                for(var key in arg){
                    if (hasOwn.call(arg, key) && arg[key]) {
                        classes = appendClass(classes, key);
                    }
                }
                return classes;
            }
            function appendClass(value, newClass) {
                if (!newClass) {
                    return value;
                }
                if (value) {
                    return value + " " + newClass;
                }
                return value + newClass;
            }
            if (typeof module2 !== "undefined" && module2.exports) {
                classNames15.default = classNames15;
                module2.exports = classNames15;
            } else if (typeof define === "function" && _type_of(define.amd) === "object" && define.amd) {
                define("classnames", [], function() {
                    return classNames15;
                });
            } else {
                window.classNames = classNames15;
            }
        })();
    }
});
// ../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
    "../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.production.min.js": function(exports2) {
        "use strict";
        function f(a, b) {
            var c = a.length;
            a.push(b);
            a: for(; 0 < c;){
                var d = c - 1 >>> 1, e = a[d];
                if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
                else break a;
            }
        }
        function h(a) {
            return 0 === a.length ? null : a[0];
        }
        function k(a) {
            if (0 === a.length) return null;
            var b = a[0], c = a.pop();
            if (c !== b) {
                a[0] = c;
                a: for(var d = 0, e = a.length, w = e >>> 1; d < w;){
                    var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
                    if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
                    else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;
                    else break a;
                }
            }
            return b;
        }
        function g(a, b) {
            var c = a.sortIndex - b.sortIndex;
            return 0 !== c ? c : a.id - b.id;
        }
        if ("object" === (typeof performance === "undefined" ? "undefined" : _type_of(performance)) && "function" === typeof performance.now) {
            l = performance;
            exports2.unstable_now = function() {
                return l.now();
            };
        } else {
            p = Date, q = p.now();
            exports2.unstable_now = function() {
                return p.now() - q;
            };
        }
        var l;
        var p;
        var q;
        var r = [];
        var t = [];
        var u = 1;
        var v = null;
        var y = 3;
        var z = false;
        var A = false;
        var B = false;
        var D = "function" === typeof setTimeout ? setTimeout : null;
        var E = "function" === typeof clearTimeout ? clearTimeout : null;
        var F = "undefined" !== typeof setImmediate ? setImmediate : null;
        "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
        function G(a) {
            for(var b = h(t); null !== b;){
                if (null === b.callback) k(t);
                else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);
                else break;
                b = h(t);
            }
        }
        function H(a) {
            B = false;
            G(a);
            if (!A) if (null !== h(r)) A = true, I(J);
            else {
                var b = h(t);
                null !== b && K(H, b.startTime - a);
            }
        }
        function J(a, b) {
            A = false;
            B && (B = false, E(L), L = -1);
            z = true;
            var c = y;
            try {
                G(b);
                for(v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());){
                    var d = v.callback;
                    if ("function" === typeof d) {
                        v.callback = null;
                        y = v.priorityLevel;
                        var e = d(v.expirationTime <= b);
                        b = exports2.unstable_now();
                        "function" === typeof e ? v.callback = e : v === h(r) && k(r);
                        G(b);
                    } else k(r);
                    v = h(r);
                }
                if (null !== v) var w = true;
                else {
                    var m = h(t);
                    null !== m && K(H, m.startTime - b);
                    w = false;
                }
                return w;
            } finally{
                v = null, y = c, z = false;
            }
        }
        var N = false;
        var O = null;
        var L = -1;
        var P = 5;
        var Q = -1;
        function M() {
            return exports2.unstable_now() - Q < P ? false : true;
        }
        function R() {
            if (null !== O) {
                var a = exports2.unstable_now();
                Q = a;
                var b = true;
                try {
                    b = O(true, a);
                } finally{
                    b ? S() : (N = false, O = null);
                }
            } else N = false;
        }
        var S;
        if ("function" === typeof F) S = function S() {
            F(R);
        };
        else if ("undefined" !== typeof MessageChannel) {
            T = new MessageChannel(), U = T.port2;
            T.port1.onmessage = R;
            S = function S() {
                U.postMessage(null);
            };
        } else S = function S() {
            D(R, 0);
        };
        var T;
        var U;
        function I(a) {
            O = a;
            N || (N = true, S());
        }
        function K(a, b) {
            L = D(function() {
                a(exports2.unstable_now());
            }, b);
        }
        exports2.unstable_IdlePriority = 5;
        exports2.unstable_ImmediatePriority = 1;
        exports2.unstable_LowPriority = 4;
        exports2.unstable_NormalPriority = 3;
        exports2.unstable_Profiling = null;
        exports2.unstable_UserBlockingPriority = 2;
        exports2.unstable_cancelCallback = function(a) {
            a.callback = null;
        };
        exports2.unstable_continueExecution = function() {
            A || z || (A = true, I(J));
        };
        exports2.unstable_forceFrameRate = function(a) {
            0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
        };
        exports2.unstable_getCurrentPriorityLevel = function() {
            return y;
        };
        exports2.unstable_getFirstCallbackNode = function() {
            return h(r);
        };
        exports2.unstable_next = function(a) {
            switch(y){
                case 1:
                case 2:
                case 3:
                    var b = 3;
                    break;
                default:
                    b = y;
            }
            var c = y;
            y = b;
            try {
                return a();
            } finally{
                y = c;
            }
        };
        exports2.unstable_pauseExecution = function() {};
        exports2.unstable_requestPaint = function() {};
        exports2.unstable_runWithPriority = function(a, b) {
            switch(a){
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                default:
                    a = 3;
            }
            var c = y;
            y = a;
            try {
                return b();
            } finally{
                y = c;
            }
        };
        exports2.unstable_scheduleCallback = function(a, b, c) {
            var d = exports2.unstable_now();
            "object" === (typeof c === "undefined" ? "undefined" : _type_of(c)) && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
            switch(a){
                case 1:
                    var e = -1;
                    break;
                case 2:
                    e = 250;
                    break;
                case 5:
                    e = 1073741823;
                    break;
                case 4:
                    e = 1e4;
                    break;
                default:
                    e = 5e3;
            }
            e = c + e;
            a = {
                id: u++,
                callback: b,
                priorityLevel: a,
                startTime: c,
                expirationTime: e,
                sortIndex: -1
            };
            c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J)));
            return a;
        };
        exports2.unstable_shouldYield = M;
        exports2.unstable_wrapCallback = function(a) {
            var b = y;
            return function() {
                var c = y;
                y = b;
                try {
                    return a.apply(this, arguments);
                } finally{
                    y = c;
                }
            };
        };
    }
});
// ../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
    "../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js": function(exports2) {
        "use strict";
        if (process.env.NODE_ENV !== "production") {
            (function() {
                "use strict";
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
                }
                var enableSchedulerDebugging = false;
                var enableProfiling = false;
                var frameYieldMs = 5;
                function push(heap, node2) {
                    var index = heap.length;
                    heap.push(node2);
                    siftUp(heap, node2, index);
                }
                function peek2(heap) {
                    return heap.length === 0 ? null : heap[0];
                }
                function pop(heap) {
                    if (heap.length === 0) {
                        return null;
                    }
                    var first = heap[0];
                    var last = heap.pop();
                    if (last !== first) {
                        heap[0] = last;
                        siftDown(heap, last, 0);
                    }
                    return first;
                }
                function siftUp(heap, node2, i) {
                    var index = i;
                    while(index > 0){
                        var parentIndex = index - 1 >>> 1;
                        var parent = heap[parentIndex];
                        if (compare(parent, node2) > 0) {
                            heap[parentIndex] = node2;
                            heap[index] = parent;
                            index = parentIndex;
                        } else {
                            return;
                        }
                    }
                }
                function siftDown(heap, node2, i) {
                    var index = i;
                    var length2 = heap.length;
                    var halfLength = length2 >>> 1;
                    while(index < halfLength){
                        var leftIndex = (index + 1) * 2 - 1;
                        var left = heap[leftIndex];
                        var rightIndex = leftIndex + 1;
                        var right = heap[rightIndex];
                        if (compare(left, node2) < 0) {
                            if (rightIndex < length2 && compare(right, left) < 0) {
                                heap[index] = right;
                                heap[rightIndex] = node2;
                                index = rightIndex;
                            } else {
                                heap[index] = left;
                                heap[leftIndex] = node2;
                                index = leftIndex;
                            }
                        } else if (rightIndex < length2 && compare(right, node2) < 0) {
                            heap[index] = right;
                            heap[rightIndex] = node2;
                            index = rightIndex;
                        } else {
                            return;
                        }
                    }
                }
                function compare(a, b) {
                    var diff = a.sortIndex - b.sortIndex;
                    return diff !== 0 ? diff : a.id - b.id;
                }
                var ImmediatePriority = 1;
                var UserBlockingPriority = 2;
                var NormalPriority = 3;
                var LowPriority = 4;
                var IdlePriority = 5;
                function markTaskErrored(task, ms) {}
                var hasPerformanceNow = (typeof performance === "undefined" ? "undefined" : _type_of(performance)) === "object" && typeof performance.now === "function";
                if (hasPerformanceNow) {
                    var localPerformance = performance;
                    exports2.unstable_now = function() {
                        return localPerformance.now();
                    };
                } else {
                    var localDate = Date;
                    var initialTime = localDate.now();
                    exports2.unstable_now = function() {
                        return localDate.now() - initialTime;
                    };
                }
                var maxSigned31BitInt = 1073741823;
                var IMMEDIATE_PRIORITY_TIMEOUT = -1;
                var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
                var NORMAL_PRIORITY_TIMEOUT = 5e3;
                var LOW_PRIORITY_TIMEOUT = 1e4;
                var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
                var taskQueue = [];
                var timerQueue = [];
                var taskIdCounter = 1;
                var currentTask = null;
                var currentPriorityLevel = NormalPriority;
                var isPerformingWork = false;
                var isHostCallbackScheduled = false;
                var isHostTimeoutScheduled = false;
                var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
                var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
                var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
                var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
                function advanceTimers(currentTime) {
                    var timer = peek2(timerQueue);
                    while(timer !== null){
                        if (timer.callback === null) {
                            pop(timerQueue);
                        } else if (timer.startTime <= currentTime) {
                            pop(timerQueue);
                            timer.sortIndex = timer.expirationTime;
                            push(taskQueue, timer);
                        } else {
                            return;
                        }
                        timer = peek2(timerQueue);
                    }
                }
                function handleTimeout(currentTime) {
                    isHostTimeoutScheduled = false;
                    advanceTimers(currentTime);
                    if (!isHostCallbackScheduled) {
                        if (peek2(taskQueue) !== null) {
                            isHostCallbackScheduled = true;
                            requestHostCallback(flushWork);
                        } else {
                            var firstTimer = peek2(timerQueue);
                            if (firstTimer !== null) {
                                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                            }
                        }
                    }
                }
                function flushWork(hasTimeRemaining, initialTime2) {
                    isHostCallbackScheduled = false;
                    if (isHostTimeoutScheduled) {
                        isHostTimeoutScheduled = false;
                        cancelHostTimeout();
                    }
                    isPerformingWork = true;
                    var previousPriorityLevel = currentPriorityLevel;
                    try {
                        if (enableProfiling) {
                            try {
                                return workLoop(hasTimeRemaining, initialTime2);
                            } catch (error) {
                                if (currentTask !== null) {
                                    var currentTime = exports2.unstable_now();
                                    markTaskErrored(currentTask, currentTime);
                                    currentTask.isQueued = false;
                                }
                                throw error;
                            }
                        } else {
                            return workLoop(hasTimeRemaining, initialTime2);
                        }
                    } finally{
                        currentTask = null;
                        currentPriorityLevel = previousPriorityLevel;
                        isPerformingWork = false;
                    }
                }
                function workLoop(hasTimeRemaining, initialTime2) {
                    var currentTime = initialTime2;
                    advanceTimers(currentTime);
                    currentTask = peek2(taskQueue);
                    while(currentTask !== null && !enableSchedulerDebugging){
                        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                            break;
                        }
                        var callback = currentTask.callback;
                        if (typeof callback === "function") {
                            currentTask.callback = null;
                            currentPriorityLevel = currentTask.priorityLevel;
                            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                            var continuationCallback = callback(didUserCallbackTimeout);
                            currentTime = exports2.unstable_now();
                            if (typeof continuationCallback === "function") {
                                currentTask.callback = continuationCallback;
                            } else {
                                if (currentTask === peek2(taskQueue)) {
                                    pop(taskQueue);
                                }
                            }
                            advanceTimers(currentTime);
                        } else {
                            pop(taskQueue);
                        }
                        currentTask = peek2(taskQueue);
                    }
                    if (currentTask !== null) {
                        return true;
                    } else {
                        var firstTimer = peek2(timerQueue);
                        if (firstTimer !== null) {
                            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                        }
                        return false;
                    }
                }
                function unstable_runWithPriority(priorityLevel, eventHandler) {
                    switch(priorityLevel){
                        case ImmediatePriority:
                        case UserBlockingPriority:
                        case NormalPriority:
                        case LowPriority:
                        case IdlePriority:
                            break;
                        default:
                            priorityLevel = NormalPriority;
                    }
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = priorityLevel;
                    try {
                        return eventHandler();
                    } finally{
                        currentPriorityLevel = previousPriorityLevel;
                    }
                }
                function unstable_next(eventHandler) {
                    var priorityLevel;
                    switch(currentPriorityLevel){
                        case ImmediatePriority:
                        case UserBlockingPriority:
                        case NormalPriority:
                            priorityLevel = NormalPriority;
                            break;
                        default:
                            priorityLevel = currentPriorityLevel;
                            break;
                    }
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = priorityLevel;
                    try {
                        return eventHandler();
                    } finally{
                        currentPriorityLevel = previousPriorityLevel;
                    }
                }
                function unstable_wrapCallback(callback) {
                    var parentPriorityLevel = currentPriorityLevel;
                    return function() {
                        var previousPriorityLevel = currentPriorityLevel;
                        currentPriorityLevel = parentPriorityLevel;
                        try {
                            return callback.apply(this, arguments);
                        } finally{
                            currentPriorityLevel = previousPriorityLevel;
                        }
                    };
                }
                function unstable_scheduleCallback(priorityLevel, callback, options) {
                    var currentTime = exports2.unstable_now();
                    var startTime2;
                    if ((typeof options === "undefined" ? "undefined" : _type_of(options)) === "object" && options !== null) {
                        var delay = options.delay;
                        if (typeof delay === "number" && delay > 0) {
                            startTime2 = currentTime + delay;
                        } else {
                            startTime2 = currentTime;
                        }
                    } else {
                        startTime2 = currentTime;
                    }
                    var timeout;
                    switch(priorityLevel){
                        case ImmediatePriority:
                            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                            break;
                        case UserBlockingPriority:
                            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                            break;
                        case IdlePriority:
                            timeout = IDLE_PRIORITY_TIMEOUT;
                            break;
                        case LowPriority:
                            timeout = LOW_PRIORITY_TIMEOUT;
                            break;
                        case NormalPriority:
                        default:
                            timeout = NORMAL_PRIORITY_TIMEOUT;
                            break;
                    }
                    var expirationTime = startTime2 + timeout;
                    var newTask = {
                        id: taskIdCounter++,
                        callback: callback,
                        priorityLevel: priorityLevel,
                        startTime: startTime2,
                        expirationTime: expirationTime,
                        sortIndex: -1
                    };
                    if (startTime2 > currentTime) {
                        newTask.sortIndex = startTime2;
                        push(timerQueue, newTask);
                        if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                            if (isHostTimeoutScheduled) {
                                cancelHostTimeout();
                            } else {
                                isHostTimeoutScheduled = true;
                            }
                            requestHostTimeout(handleTimeout, startTime2 - currentTime);
                        }
                    } else {
                        newTask.sortIndex = expirationTime;
                        push(taskQueue, newTask);
                        if (!isHostCallbackScheduled && !isPerformingWork) {
                            isHostCallbackScheduled = true;
                            requestHostCallback(flushWork);
                        }
                    }
                    return newTask;
                }
                function unstable_pauseExecution() {}
                function unstable_continueExecution() {
                    if (!isHostCallbackScheduled && !isPerformingWork) {
                        isHostCallbackScheduled = true;
                        requestHostCallback(flushWork);
                    }
                }
                function unstable_getFirstCallbackNode() {
                    return peek2(taskQueue);
                }
                function unstable_cancelCallback(task) {
                    task.callback = null;
                }
                function unstable_getCurrentPriorityLevel() {
                    return currentPriorityLevel;
                }
                var isMessageLoopRunning = false;
                var scheduledHostCallback = null;
                var taskTimeoutID = -1;
                var frameInterval = frameYieldMs;
                var startTime = -1;
                function shouldYieldToHost() {
                    var timeElapsed = exports2.unstable_now() - startTime;
                    if (timeElapsed < frameInterval) {
                        return false;
                    }
                    return true;
                }
                function requestPaint() {}
                function forceFrameRate(fps) {
                    if (fps < 0 || fps > 125) {
                        console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                        return;
                    }
                    if (fps > 0) {
                        frameInterval = Math.floor(1e3 / fps);
                    } else {
                        frameInterval = frameYieldMs;
                    }
                }
                var performWorkUntilDeadline = function performWorkUntilDeadline() {
                    if (scheduledHostCallback !== null) {
                        var currentTime = exports2.unstable_now();
                        startTime = currentTime;
                        var hasTimeRemaining = true;
                        var hasMoreWork = true;
                        try {
                            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                        } finally{
                            if (hasMoreWork) {
                                schedulePerformWorkUntilDeadline();
                            } else {
                                isMessageLoopRunning = false;
                                scheduledHostCallback = null;
                            }
                        }
                    } else {
                        isMessageLoopRunning = false;
                    }
                };
                var schedulePerformWorkUntilDeadline;
                if (typeof localSetImmediate === "function") {
                    schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
                        localSetImmediate(performWorkUntilDeadline);
                    };
                } else if (typeof MessageChannel !== "undefined") {
                    var channel = new MessageChannel();
                    var port = channel.port2;
                    channel.port1.onmessage = performWorkUntilDeadline;
                    schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
                        port.postMessage(null);
                    };
                } else {
                    schedulePerformWorkUntilDeadline = function schedulePerformWorkUntilDeadline() {
                        localSetTimeout(performWorkUntilDeadline, 0);
                    };
                }
                function requestHostCallback(callback) {
                    scheduledHostCallback = callback;
                    if (!isMessageLoopRunning) {
                        isMessageLoopRunning = true;
                        schedulePerformWorkUntilDeadline();
                    }
                }
                function requestHostTimeout(callback, ms) {
                    taskTimeoutID = localSetTimeout(function() {
                        callback(exports2.unstable_now());
                    }, ms);
                }
                function cancelHostTimeout() {
                    localClearTimeout(taskTimeoutID);
                    taskTimeoutID = -1;
                }
                var unstable_requestPaint = requestPaint;
                var unstable_Profiling = null;
                exports2.unstable_IdlePriority = IdlePriority;
                exports2.unstable_ImmediatePriority = ImmediatePriority;
                exports2.unstable_LowPriority = LowPriority;
                exports2.unstable_NormalPriority = NormalPriority;
                exports2.unstable_Profiling = unstable_Profiling;
                exports2.unstable_UserBlockingPriority = UserBlockingPriority;
                exports2.unstable_cancelCallback = unstable_cancelCallback;
                exports2.unstable_continueExecution = unstable_continueExecution;
                exports2.unstable_forceFrameRate = forceFrameRate;
                exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
                exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
                exports2.unstable_next = unstable_next;
                exports2.unstable_pauseExecution = unstable_pauseExecution;
                exports2.unstable_requestPaint = unstable_requestPaint;
                exports2.unstable_runWithPriority = unstable_runWithPriority;
                exports2.unstable_scheduleCallback = unstable_scheduleCallback;
                exports2.unstable_shouldYield = shouldYieldToHost;
                exports2.unstable_wrapCallback = unstable_wrapCallback;
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
                }
            })();
        }
    }
});
// ../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
    "../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js": function(exports2, module2) {
        "use strict";
        if (process.env.NODE_ENV === "production") {
            module2.exports = require_scheduler_production_min();
        } else {
            module2.exports = require_scheduler_development();
        }
    }
});
// ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.production.min.js": function(exports2) {
        "use strict";
        var aa = require("react");
        var ca = require_scheduler();
        function p(a) {
            for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
            return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
        }
        var da = /* @__PURE__ */ new Set();
        var ea = {};
        function fa(a, b) {
            ha(a, b);
            ha(a + "Capture", b);
        }
        function ha(a, b) {
            ea[a] = b;
            for(a = 0; a < b.length; a++)da.add(b[a]);
        }
        var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
        var ja = Object.prototype.hasOwnProperty;
        var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
        var la = {};
        var ma = {};
        function oa(a) {
            if (ja.call(ma, a)) return true;
            if (ja.call(la, a)) return false;
            if (ka.test(a)) return ma[a] = true;
            la[a] = true;
            return false;
        }
        function pa(a, b, c, d) {
            if (null !== c && 0 === c.type) return false;
            switch(typeof b === "undefined" ? "undefined" : _type_of(b)){
                case "function":
                case "symbol":
                    return true;
                case "boolean":
                    if (d) return false;
                    if (null !== c) return !c.acceptsBooleans;
                    a = a.toLowerCase().slice(0, 5);
                    return "data-" !== a && "aria-" !== a;
                default:
                    return false;
            }
        }
        function qa(a, b, c, d) {
            if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
            if (d) return false;
            if (null !== c) switch(c.type){
                case 3:
                    return !b;
                case 4:
                    return false === b;
                case 5:
                    return isNaN(b);
                case 6:
                    return isNaN(b) || 1 > b;
            }
            return false;
        }
        function v(a, b, c, d, e, f, g) {
            this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
            this.attributeName = d;
            this.attributeNamespace = e;
            this.mustUseProperty = c;
            this.propertyName = a;
            this.type = b;
            this.sanitizeURL = f;
            this.removeEmptyString = g;
        }
        var z = {};
        "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
            z[a] = new v(a, 0, false, a, null, false, false);
        });
        [
            [
                "acceptCharset",
                "accept-charset"
            ],
            [
                "className",
                "class"
            ],
            [
                "htmlFor",
                "for"
            ],
            [
                "httpEquiv",
                "http-equiv"
            ]
        ].forEach(function(a) {
            var b = a[0];
            z[b] = new v(b, 1, false, a[1], null, false, false);
        });
        [
            "contentEditable",
            "draggable",
            "spellCheck",
            "value"
        ].forEach(function(a) {
            z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
        });
        [
            "autoReverse",
            "externalResourcesRequired",
            "focusable",
            "preserveAlpha"
        ].forEach(function(a) {
            z[a] = new v(a, 2, false, a, null, false, false);
        });
        "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
            z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
        });
        [
            "checked",
            "multiple",
            "muted",
            "selected"
        ].forEach(function(a) {
            z[a] = new v(a, 3, true, a, null, false, false);
        });
        [
            "capture",
            "download"
        ].forEach(function(a) {
            z[a] = new v(a, 4, false, a, null, false, false);
        });
        [
            "cols",
            "rows",
            "size",
            "span"
        ].forEach(function(a) {
            z[a] = new v(a, 6, false, a, null, false, false);
        });
        [
            "rowSpan",
            "start"
        ].forEach(function(a) {
            z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
        });
        var ra = /[\-:]([a-z])/g;
        function sa(a) {
            return a[1].toUpperCase();
        }
        "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
            var b = a.replace(ra, sa);
            z[b] = new v(b, 1, false, a, null, false, false);
        });
        "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
            var b = a.replace(ra, sa);
            z[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
        });
        [
            "xml:base",
            "xml:lang",
            "xml:space"
        ].forEach(function(a) {
            var b = a.replace(ra, sa);
            z[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        [
            "tabIndex",
            "crossOrigin"
        ].forEach(function(a) {
            z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
        });
        z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        [
            "src",
            "href",
            "action",
            "formAction"
        ].forEach(function(a) {
            z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
        });
        function ta(a, b, c, d) {
            var e = z.hasOwnProperty(b) ? z[b] : null;
            if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
        }
        var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var va = Symbol.for("react.element");
        var wa = Symbol.for("react.portal");
        var ya = Symbol.for("react.fragment");
        var za = Symbol.for("react.strict_mode");
        var Aa = Symbol.for("react.profiler");
        var Ba = Symbol.for("react.provider");
        var Ca = Symbol.for("react.context");
        var Da = Symbol.for("react.forward_ref");
        var Ea = Symbol.for("react.suspense");
        var Fa = Symbol.for("react.suspense_list");
        var Ga = Symbol.for("react.memo");
        var Ha = Symbol.for("react.lazy");
        Symbol.for("react.scope");
        Symbol.for("react.debug_trace_mode");
        var Ia = Symbol.for("react.offscreen");
        Symbol.for("react.legacy_hidden");
        Symbol.for("react.cache");
        Symbol.for("react.tracing_marker");
        var Ja = Symbol.iterator;
        function Ka(a) {
            if (null === a || "object" !== (typeof a === "undefined" ? "undefined" : _type_of(a))) return null;
            a = Ja && a[Ja] || a["@@iterator"];
            return "function" === typeof a ? a : null;
        }
        var A = Object.assign;
        var La;
        function Ma(a) {
            if (void 0 === La) try {
                throw Error();
            } catch (c) {
                var b = c.stack.trim().match(/\n( *(at )?)/);
                La = b && b[1] || "";
            }
            return "\n" + La + a;
        }
        var Na = false;
        function Oa(a, b) {
            if (!a || Na) return "";
            Na = true;
            var c = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            try {
                if (b) if (b = function b() {
                    throw Error();
                }, Object.defineProperty(b.prototype, "props", {
                    set: function set() {
                        throw Error();
                    }
                }), "object" === (typeof Reflect === "undefined" ? "undefined" : _type_of(Reflect)) && Reflect.construct) {
                    try {
                        Reflect.construct(b, []);
                    } catch (l) {
                        var d = l;
                    }
                    Reflect.construct(a, [], b);
                } else {
                    try {
                        b.call();
                    } catch (l) {
                        d = l;
                    }
                    a.call(b.prototype);
                }
                else {
                    try {
                        throw Error();
                    } catch (l) {
                        d = l;
                    }
                    a();
                }
            } catch (l) {
                if (l && d && "string" === typeof l.stack) {
                    for(var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];)h--;
                    for(; 1 <= g && 0 <= h; g--, h--)if (e[g] !== f[h]) {
                        if (1 !== g || 1 !== h) {
                            do if (g--, h--, 0 > h || e[g] !== f[h]) {
                                var k = "\n" + e[g].replace(" at new ", " at ");
                                a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                                return k;
                            }
                            while (1 <= g && 0 <= h);
                        }
                        break;
                    }
                }
            } finally{
                Na = false, Error.prepareStackTrace = c;
            }
            return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
        }
        function Pa(a) {
            switch(a.tag){
                case 5:
                    return Ma(a.type);
                case 16:
                    return Ma("Lazy");
                case 13:
                    return Ma("Suspense");
                case 19:
                    return Ma("SuspenseList");
                case 0:
                case 2:
                case 15:
                    return a = Oa(a.type, false), a;
                case 11:
                    return a = Oa(a.type.render, false), a;
                case 1:
                    return a = Oa(a.type, true), a;
                default:
                    return "";
            }
        }
        function Qa(a) {
            if (null == a) return null;
            if ("function" === typeof a) return a.displayName || a.name || null;
            if ("string" === typeof a) return a;
            switch(a){
                case ya:
                    return "Fragment";
                case wa:
                    return "Portal";
                case Aa:
                    return "Profiler";
                case za:
                    return "StrictMode";
                case Ea:
                    return "Suspense";
                case Fa:
                    return "SuspenseList";
            }
            if ("object" === (typeof a === "undefined" ? "undefined" : _type_of(a))) switch(a.$$typeof){
                case Ca:
                    return (a.displayName || "Context") + ".Consumer";
                case Ba:
                    return (a._context.displayName || "Context") + ".Provider";
                case Da:
                    var b = a.render;
                    a = a.displayName;
                    a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
                    return a;
                case Ga:
                    return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
                case Ha:
                    b = a._payload;
                    a = a._init;
                    try {
                        return Qa(a(b));
                    } catch (c) {}
            }
            return null;
        }
        function Ra(a) {
            var b = a.type;
            switch(a.tag){
                case 24:
                    return "Cache";
                case 9:
                    return (b.displayName || "Context") + ".Consumer";
                case 10:
                    return (b._context.displayName || "Context") + ".Provider";
                case 18:
                    return "DehydratedFragment";
                case 11:
                    return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
                case 7:
                    return "Fragment";
                case 5:
                    return b;
                case 4:
                    return "Portal";
                case 3:
                    return "Root";
                case 6:
                    return "Text";
                case 16:
                    return Qa(b);
                case 8:
                    return b === za ? "StrictMode" : "Mode";
                case 22:
                    return "Offscreen";
                case 12:
                    return "Profiler";
                case 21:
                    return "Scope";
                case 13:
                    return "Suspense";
                case 19:
                    return "SuspenseList";
                case 25:
                    return "TracingMarker";
                case 1:
                case 0:
                case 17:
                case 2:
                case 14:
                case 15:
                    if ("function" === typeof b) return b.displayName || b.name || null;
                    if ("string" === typeof b) return b;
            }
            return null;
        }
        function Sa(a) {
            switch(typeof a === "undefined" ? "undefined" : _type_of(a)){
                case "boolean":
                case "number":
                case "string":
                case "undefined":
                    return a;
                case "object":
                    return a;
                default:
                    return "";
            }
        }
        function Ta(a) {
            var b = a.type;
            return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
        }
        function Ua(a) {
            var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
            if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
                var e = c.get, f = c.set;
                Object.defineProperty(a, b, {
                    configurable: true,
                    get: function get() {
                        return e.call(this);
                    },
                    set: function set(a2) {
                        d = "" + a2;
                        f.call(this, a2);
                    }
                });
                Object.defineProperty(a, b, {
                    enumerable: c.enumerable
                });
                return {
                    getValue: function getValue() {
                        return d;
                    },
                    setValue: function setValue(a2) {
                        d = "" + a2;
                    },
                    stopTracking: function stopTracking() {
                        a._valueTracker = null;
                        delete a[b];
                    }
                };
            }
        }
        function Va(a) {
            a._valueTracker || (a._valueTracker = Ua(a));
        }
        function Wa(a) {
            if (!a) return false;
            var b = a._valueTracker;
            if (!b) return true;
            var c = b.getValue();
            var d = "";
            a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
            a = d;
            return a !== c ? (b.setValue(a), true) : false;
        }
        function Xa(a) {
            a = a || ("undefined" !== typeof document ? document : void 0);
            if ("undefined" === typeof a) return null;
            try {
                return a.activeElement || a.body;
            } catch (b) {
                return a.body;
            }
        }
        function Ya(a, b) {
            var c = b.checked;
            return A({}, b, {
                defaultChecked: void 0,
                defaultValue: void 0,
                value: void 0,
                checked: null != c ? c : a._wrapperState.initialChecked
            });
        }
        function Za(a, b) {
            var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
            c = Sa(null != b.value ? b.value : c);
            a._wrapperState = {
                initialChecked: d,
                initialValue: c,
                controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
            };
        }
        function ab(a, b) {
            b = b.checked;
            null != b && ta(a, "checked", b, false);
        }
        function bb(a, b) {
            ab(a, b);
            var c = Sa(b.value), d = b.type;
            if (null != c) if ("number" === d) {
                if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
            } else a.value !== "" + c && (a.value = "" + c);
            else if ("submit" === d || "reset" === d) {
                a.removeAttribute("value");
                return;
            }
            b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
            null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
        }
        function db(a, b, c) {
            if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
                var d = b.type;
                if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
                b = "" + a._wrapperState.initialValue;
                c || b === a.value || (a.value = b);
                a.defaultValue = b;
            }
            c = a.name;
            "" !== c && (a.name = "");
            a.defaultChecked = !!a._wrapperState.initialChecked;
            "" !== c && (a.name = c);
        }
        function cb(a, b, c) {
            if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
        }
        var eb = Array.isArray;
        function fb(a, b, c, d) {
            a = a.options;
            if (b) {
                b = {};
                for(var e = 0; e < c.length; e++)b["$" + c[e]] = true;
                for(c = 0; c < a.length; c++)e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
            } else {
                c = "" + Sa(c);
                b = null;
                for(e = 0; e < a.length; e++){
                    if (a[e].value === c) {
                        a[e].selected = true;
                        d && (a[e].defaultSelected = true);
                        return;
                    }
                    null !== b || a[e].disabled || (b = a[e]);
                }
                null !== b && (b.selected = true);
            }
        }
        function gb(a, b) {
            if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
            return A({}, b, {
                value: void 0,
                defaultValue: void 0,
                children: "" + a._wrapperState.initialValue
            });
        }
        function hb(a, b) {
            var c = b.value;
            if (null == c) {
                c = b.children;
                b = b.defaultValue;
                if (null != c) {
                    if (null != b) throw Error(p(92));
                    if (eb(c)) {
                        if (1 < c.length) throw Error(p(93));
                        c = c[0];
                    }
                    b = c;
                }
                null == b && (b = "");
                c = b;
            }
            a._wrapperState = {
                initialValue: Sa(c)
            };
        }
        function ib(a, b) {
            var c = Sa(b.value), d = Sa(b.defaultValue);
            null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
            null != d && (a.defaultValue = "" + d);
        }
        function jb(a) {
            var b = a.textContent;
            b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
        }
        function kb(a) {
            switch(a){
                case "svg":
                    return "http://www.w3.org/2000/svg";
                case "math":
                    return "http://www.w3.org/1998/Math/MathML";
                default:
                    return "http://www.w3.org/1999/xhtml";
            }
        }
        function lb(a, b) {
            return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
        }
        var mb;
        var nb = function(a) {
            return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
                MSApp.execUnsafeLocalFunction(function() {
                    return a(b, c, d, e);
                });
            } : a;
        }(function(a, b) {
            if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
            else {
                mb = mb || document.createElement("div");
                mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
                for(b = mb.firstChild; a.firstChild;)a.removeChild(a.firstChild);
                for(; b.firstChild;)a.appendChild(b.firstChild);
            }
        });
        function ob(a, b) {
            if (b) {
                var c = a.firstChild;
                if (c && c === a.lastChild && 3 === c.nodeType) {
                    c.nodeValue = b;
                    return;
                }
            }
            a.textContent = b;
        }
        var pb = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
        };
        var qb = [
            "Webkit",
            "ms",
            "Moz",
            "O"
        ];
        Object.keys(pb).forEach(function(a) {
            qb.forEach(function(b) {
                b = b + a.charAt(0).toUpperCase() + a.substring(1);
                pb[b] = pb[a];
            });
        });
        function rb(a, b, c) {
            return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
        }
        function sb(a, b) {
            a = a.style;
            for(var c in b)if (b.hasOwnProperty(c)) {
                var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
                "float" === c && (c = "cssFloat");
                d ? a.setProperty(c, e) : a[c] = e;
            }
        }
        var tb = A({
            menuitem: true
        }, {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
        });
        function ub(a, b) {
            if (b) {
                if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
                if (null != b.dangerouslySetInnerHTML) {
                    if (null != b.children) throw Error(p(60));
                    if ("object" !== _type_of(b.dangerouslySetInnerHTML) || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
                }
                if (null != b.style && "object" !== _type_of(b.style)) throw Error(p(62));
            }
        }
        function vb(a, b) {
            if (-1 === a.indexOf("-")) return "string" === typeof b.is;
            switch(a){
                case "annotation-xml":
                case "color-profile":
                case "font-face":
                case "font-face-src":
                case "font-face-uri":
                case "font-face-format":
                case "font-face-name":
                case "missing-glyph":
                    return false;
                default:
                    return true;
            }
        }
        var wb = null;
        function xb(a) {
            a = a.target || a.srcElement || window;
            a.correspondingUseElement && (a = a.correspondingUseElement);
            return 3 === a.nodeType ? a.parentNode : a;
        }
        var yb = null;
        var zb = null;
        var Ab = null;
        function Bb(a) {
            if (a = Cb(a)) {
                if ("function" !== typeof yb) throw Error(p(280));
                var b = a.stateNode;
                b && (b = Db(b), yb(a.stateNode, a.type, b));
            }
        }
        function Eb(a) {
            zb ? Ab ? Ab.push(a) : Ab = [
                a
            ] : zb = a;
        }
        function Fb() {
            if (zb) {
                var a = zb, b = Ab;
                Ab = zb = null;
                Bb(a);
                if (b) for(a = 0; a < b.length; a++)Bb(b[a]);
            }
        }
        function Gb(a, b) {
            return a(b);
        }
        function Hb() {}
        var Ib = false;
        function Jb(a, b, c) {
            if (Ib) return a(b, c);
            Ib = true;
            try {
                return Gb(a, b, c);
            } finally{
                if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
            }
        }
        function Kb(a, b) {
            var c = a.stateNode;
            if (null === c) return null;
            var d = Db(c);
            if (null === d) return null;
            c = d[b];
            a: switch(b){
                case "onClick":
                case "onClickCapture":
                case "onDoubleClick":
                case "onDoubleClickCapture":
                case "onMouseDown":
                case "onMouseDownCapture":
                case "onMouseMove":
                case "onMouseMoveCapture":
                case "onMouseUp":
                case "onMouseUpCapture":
                case "onMouseEnter":
                    (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
                    a = !d;
                    break a;
                default:
                    a = false;
            }
            if (a) return null;
            if (c && "function" !== typeof c) throw Error(p(231, b, typeof c === "undefined" ? "undefined" : _type_of(c)));
            return c;
        }
        var Lb = false;
        if (ia) try {
            Mb = {};
            Object.defineProperty(Mb, "passive", {
                get: function get() {
                    Lb = true;
                }
            });
            window.addEventListener("test", Mb, Mb);
            window.removeEventListener("test", Mb, Mb);
        } catch (a) {
            Lb = false;
        }
        var Mb;
        function Nb(a, b, c, d, e, f, g, h, k) {
            var l = Array.prototype.slice.call(arguments, 3);
            try {
                b.apply(c, l);
            } catch (m) {
                this.onError(m);
            }
        }
        var Ob = false;
        var Pb = null;
        var Qb = false;
        var Rb = null;
        var Sb = {
            onError: function onError(a) {
                Ob = true;
                Pb = a;
            }
        };
        function Tb(a, b, c, d, e, f, g, h, k) {
            Ob = false;
            Pb = null;
            Nb.apply(Sb, arguments);
        }
        function Ub(a, b, c, d, e, f, g, h, k) {
            Tb.apply(this, arguments);
            if (Ob) {
                if (Ob) {
                    var l = Pb;
                    Ob = false;
                    Pb = null;
                } else throw Error(p(198));
                Qb || (Qb = true, Rb = l);
            }
        }
        function Vb(a) {
            var b = a, c = a;
            if (a.alternate) for(; b.return;)b = b.return;
            else {
                a = b;
                do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
                while (a);
            }
            return 3 === b.tag ? c : null;
        }
        function Wb(a) {
            if (13 === a.tag) {
                var b = a.memoizedState;
                null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
                if (null !== b) return b.dehydrated;
            }
            return null;
        }
        function Xb(a) {
            if (Vb(a) !== a) throw Error(p(188));
        }
        function Yb(a) {
            var b = a.alternate;
            if (!b) {
                b = Vb(a);
                if (null === b) throw Error(p(188));
                return b !== a ? null : a;
            }
            for(var c = a, d = b;;){
                var e = c.return;
                if (null === e) break;
                var f = e.alternate;
                if (null === f) {
                    d = e.return;
                    if (null !== d) {
                        c = d;
                        continue;
                    }
                    break;
                }
                if (e.child === f.child) {
                    for(f = e.child; f;){
                        if (f === c) return Xb(e), a;
                        if (f === d) return Xb(e), b;
                        f = f.sibling;
                    }
                    throw Error(p(188));
                }
                if (c.return !== d.return) c = e, d = f;
                else {
                    for(var g = false, h = e.child; h;){
                        if (h === c) {
                            g = true;
                            c = e;
                            d = f;
                            break;
                        }
                        if (h === d) {
                            g = true;
                            d = e;
                            c = f;
                            break;
                        }
                        h = h.sibling;
                    }
                    if (!g) {
                        for(h = f.child; h;){
                            if (h === c) {
                                g = true;
                                c = f;
                                d = e;
                                break;
                            }
                            if (h === d) {
                                g = true;
                                d = f;
                                c = e;
                                break;
                            }
                            h = h.sibling;
                        }
                        if (!g) throw Error(p(189));
                    }
                }
                if (c.alternate !== d) throw Error(p(190));
            }
            if (3 !== c.tag) throw Error(p(188));
            return c.stateNode.current === c ? a : b;
        }
        function Zb(a) {
            a = Yb(a);
            return null !== a ? $b(a) : null;
        }
        function $b(a) {
            if (5 === a.tag || 6 === a.tag) return a;
            for(a = a.child; null !== a;){
                var b = $b(a);
                if (null !== b) return b;
                a = a.sibling;
            }
            return null;
        }
        var ac = ca.unstable_scheduleCallback;
        var bc = ca.unstable_cancelCallback;
        var cc = ca.unstable_shouldYield;
        var dc = ca.unstable_requestPaint;
        var B = ca.unstable_now;
        var ec = ca.unstable_getCurrentPriorityLevel;
        var fc = ca.unstable_ImmediatePriority;
        var gc = ca.unstable_UserBlockingPriority;
        var hc = ca.unstable_NormalPriority;
        var ic = ca.unstable_LowPriority;
        var jc = ca.unstable_IdlePriority;
        var kc = null;
        var lc = null;
        function mc(a) {
            if (lc && "function" === typeof lc.onCommitFiberRoot) try {
                lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
            } catch (b) {}
        }
        var oc = Math.clz32 ? Math.clz32 : nc;
        var pc = Math.log;
        var qc = Math.LN2;
        function nc(a) {
            a >>>= 0;
            return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
        }
        var rc = 64;
        var sc = 4194304;
        function tc(a) {
            switch(a & -a){
                case 1:
                    return 1;
                case 2:
                    return 2;
                case 4:
                    return 4;
                case 8:
                    return 8;
                case 16:
                    return 16;
                case 32:
                    return 32;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                    return a & 4194240;
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                    return a & 130023424;
                case 134217728:
                    return 134217728;
                case 268435456:
                    return 268435456;
                case 536870912:
                    return 536870912;
                case 1073741824:
                    return 1073741824;
                default:
                    return a;
            }
        }
        function uc(a, b) {
            var c = a.pendingLanes;
            if (0 === c) return 0;
            var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
            if (0 !== g) {
                var h = g & ~e;
                0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
            } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
            if (0 === d) return 0;
            if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
            0 !== (d & 4) && (d |= c & 16);
            b = a.entangledLanes;
            if (0 !== b) for(a = a.entanglements, b &= d; 0 < b;)c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
            return d;
        }
        function vc(a, b) {
            switch(a){
                case 1:
                case 2:
                case 4:
                    return b + 250;
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                    return b + 5e3;
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                    return -1;
                case 134217728:
                case 268435456:
                case 536870912:
                case 1073741824:
                    return -1;
                default:
                    return -1;
            }
        }
        function wc(a, b) {
            for(var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;){
                var g = 31 - oc(f), h = 1 << g, k = e[g];
                if (-1 === k) {
                    if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
                } else k <= b && (a.expiredLanes |= h);
                f &= ~h;
            }
        }
        function xc(a) {
            a = a.pendingLanes & -1073741825;
            return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
        }
        function yc() {
            var a = rc;
            rc <<= 1;
            0 === (rc & 4194240) && (rc = 64);
            return a;
        }
        function zc(a) {
            for(var b = [], c = 0; 31 > c; c++)b.push(a);
            return b;
        }
        function Ac(a, b, c) {
            a.pendingLanes |= b;
            536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
            a = a.eventTimes;
            b = 31 - oc(b);
            a[b] = c;
        }
        function Bc(a, b) {
            var c = a.pendingLanes & ~b;
            a.pendingLanes = b;
            a.suspendedLanes = 0;
            a.pingedLanes = 0;
            a.expiredLanes &= b;
            a.mutableReadLanes &= b;
            a.entangledLanes &= b;
            b = a.entanglements;
            var d = a.eventTimes;
            for(a = a.expirationTimes; 0 < c;){
                var e = 31 - oc(c), f = 1 << e;
                b[e] = 0;
                d[e] = -1;
                a[e] = -1;
                c &= ~f;
            }
        }
        function Cc(a, b) {
            var c = a.entangledLanes |= b;
            for(a = a.entanglements; c;){
                var d = 31 - oc(c), e = 1 << d;
                e & b | a[d] & b && (a[d] |= b);
                c &= ~e;
            }
        }
        var C = 0;
        function Dc(a) {
            a &= -a;
            return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
        }
        var Ec;
        var Fc;
        var Gc;
        var Hc;
        var Ic;
        var Jc = false;
        var Kc = [];
        var Lc = null;
        var Mc = null;
        var Nc = null;
        var Oc = /* @__PURE__ */ new Map();
        var Pc = /* @__PURE__ */ new Map();
        var Qc = [];
        var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
        function Sc(a, b) {
            switch(a){
                case "focusin":
                case "focusout":
                    Lc = null;
                    break;
                case "dragenter":
                case "dragleave":
                    Mc = null;
                    break;
                case "mouseover":
                case "mouseout":
                    Nc = null;
                    break;
                case "pointerover":
                case "pointerout":
                    Oc.delete(b.pointerId);
                    break;
                case "gotpointercapture":
                case "lostpointercapture":
                    Pc.delete(b.pointerId);
            }
        }
        function Tc(a, b, c, d, e, f) {
            if (null === a || a.nativeEvent !== f) return a = {
                blockedOn: b,
                domEventName: c,
                eventSystemFlags: d,
                nativeEvent: f,
                targetContainers: [
                    e
                ]
            }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
            a.eventSystemFlags |= d;
            b = a.targetContainers;
            null !== e && -1 === b.indexOf(e) && b.push(e);
            return a;
        }
        function Uc(a, b, c, d, e) {
            switch(b){
                case "focusin":
                    return Lc = Tc(Lc, a, b, c, d, e), true;
                case "dragenter":
                    return Mc = Tc(Mc, a, b, c, d, e), true;
                case "mouseover":
                    return Nc = Tc(Nc, a, b, c, d, e), true;
                case "pointerover":
                    var f = e.pointerId;
                    Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
                    return true;
                case "gotpointercapture":
                    return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), true;
            }
            return false;
        }
        function Vc(a) {
            var b = Wc(a.target);
            if (null !== b) {
                var c = Vb(b);
                if (null !== c) {
                    if (b = c.tag, 13 === b) {
                        if (b = Wb(c), null !== b) {
                            a.blockedOn = b;
                            Ic(a.priority, function() {
                                Gc(c);
                            });
                            return;
                        }
                    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
                        a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                        return;
                    }
                }
            }
            a.blockedOn = null;
        }
        function Xc(a) {
            if (null !== a.blockedOn) return false;
            for(var b = a.targetContainers; 0 < b.length;){
                var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
                if (null === c) {
                    c = a.nativeEvent;
                    var d = new c.constructor(c.type, c);
                    wb = d;
                    c.target.dispatchEvent(d);
                    wb = null;
                } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
                b.shift();
            }
            return true;
        }
        function Zc(a, b, c) {
            Xc(a) && c.delete(b);
        }
        function $c() {
            Jc = false;
            null !== Lc && Xc(Lc) && (Lc = null);
            null !== Mc && Xc(Mc) && (Mc = null);
            null !== Nc && Xc(Nc) && (Nc = null);
            Oc.forEach(Zc);
            Pc.forEach(Zc);
        }
        function ad(a, b) {
            a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
        }
        function bd(a) {
            function b(b2) {
                return ad(b2, a);
            }
            if (0 < Kc.length) {
                ad(Kc[0], a);
                for(var c = 1; c < Kc.length; c++){
                    var d = Kc[c];
                    d.blockedOn === a && (d.blockedOn = null);
                }
            }
            null !== Lc && ad(Lc, a);
            null !== Mc && ad(Mc, a);
            null !== Nc && ad(Nc, a);
            Oc.forEach(b);
            Pc.forEach(b);
            for(c = 0; c < Qc.length; c++)d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
            for(; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);)Vc(c), null === c.blockedOn && Qc.shift();
        }
        var cd = ua.ReactCurrentBatchConfig;
        var dd = true;
        function ed(a, b, c, d) {
            var e = C, f = cd.transition;
            cd.transition = null;
            try {
                C = 1, fd(a, b, c, d);
            } finally{
                C = e, cd.transition = f;
            }
        }
        function gd(a, b, c, d) {
            var e = C, f = cd.transition;
            cd.transition = null;
            try {
                C = 4, fd(a, b, c, d);
            } finally{
                C = e, cd.transition = f;
            }
        }
        function fd(a, b, c, d) {
            if (dd) {
                var e = Yc(a, b, c, d);
                if (null === e) hd(a, b, d, id, c), Sc(a, d);
                else if (Uc(e, a, b, c, d)) d.stopPropagation();
                else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
                    for(; null !== e;){
                        var f = Cb(e);
                        null !== f && Ec(f);
                        f = Yc(a, b, c, d);
                        null === f && hd(a, b, d, id, c);
                        if (f === e) break;
                        e = f;
                    }
                    null !== e && d.stopPropagation();
                } else hd(a, b, d, null, c);
            }
        }
        var id = null;
        function Yc(a, b, c, d) {
            id = null;
            a = xb(d);
            a = Wc(a);
            if (null !== a) if (b = Vb(a), null === b) a = null;
            else if (c = b.tag, 13 === c) {
                a = Wb(b);
                if (null !== a) return a;
                a = null;
            } else if (3 === c) {
                if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
                a = null;
            } else b !== a && (a = null);
            id = a;
            return null;
        }
        function jd(a) {
            switch(a){
                case "cancel":
                case "click":
                case "close":
                case "contextmenu":
                case "copy":
                case "cut":
                case "auxclick":
                case "dblclick":
                case "dragend":
                case "dragstart":
                case "drop":
                case "focusin":
                case "focusout":
                case "input":
                case "invalid":
                case "keydown":
                case "keypress":
                case "keyup":
                case "mousedown":
                case "mouseup":
                case "paste":
                case "pause":
                case "play":
                case "pointercancel":
                case "pointerdown":
                case "pointerup":
                case "ratechange":
                case "reset":
                case "resize":
                case "seeked":
                case "submit":
                case "touchcancel":
                case "touchend":
                case "touchstart":
                case "volumechange":
                case "change":
                case "selectionchange":
                case "textInput":
                case "compositionstart":
                case "compositionend":
                case "compositionupdate":
                case "beforeblur":
                case "afterblur":
                case "beforeinput":
                case "blur":
                case "fullscreenchange":
                case "focus":
                case "hashchange":
                case "popstate":
                case "select":
                case "selectstart":
                    return 1;
                case "drag":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "mousemove":
                case "mouseout":
                case "mouseover":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "scroll":
                case "toggle":
                case "touchmove":
                case "wheel":
                case "mouseenter":
                case "mouseleave":
                case "pointerenter":
                case "pointerleave":
                    return 4;
                case "message":
                    switch(ec()){
                        case fc:
                            return 1;
                        case gc:
                            return 4;
                        case hc:
                        case ic:
                            return 16;
                        case jc:
                            return 536870912;
                        default:
                            return 16;
                    }
                default:
                    return 16;
            }
        }
        var kd = null;
        var ld = null;
        var md = null;
        function nd() {
            if (md) return md;
            var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
            for(a = 0; a < c && b[a] === e[a]; a++);
            var g = c - a;
            for(d = 1; d <= g && b[c - d] === e[f - d]; d++);
            return md = e.slice(a, 1 < d ? 1 - d : void 0);
        }
        function od(a) {
            var b = a.keyCode;
            "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
            10 === a && (a = 13);
            return 32 <= a || 13 === a ? a : 0;
        }
        function pd() {
            return true;
        }
        function qd() {
            return false;
        }
        function rd(a) {
            function b(b2, d, e, f, g) {
                this._reactName = b2;
                this._targetInst = e;
                this.type = d;
                this.nativeEvent = f;
                this.target = g;
                this.currentTarget = null;
                for(var c in a)a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
                this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
                this.isPropagationStopped = qd;
                return this;
            }
            A(b.prototype, {
                preventDefault: function preventDefault() {
                    this.defaultPrevented = true;
                    var a2 = this.nativeEvent;
                    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== _type_of(a2.returnValue) && (a2.returnValue = false), this.isDefaultPrevented = pd);
                },
                stopPropagation: function stopPropagation() {
                    var a2 = this.nativeEvent;
                    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== _type_of(a2.cancelBubble) && (a2.cancelBubble = true), this.isPropagationStopped = pd);
                },
                persist: function persist() {},
                isPersistent: pd
            });
            return b;
        }
        var sd = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function timeStamp(a) {
                return a.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
        };
        var td = rd(sd);
        var ud = A({}, sd, {
            view: 0,
            detail: 0
        });
        var vd = rd(ud);
        var wd;
        var xd;
        var yd;
        var Ad = A({}, ud, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: zd,
            button: 0,
            buttons: 0,
            relatedTarget: function relatedTarget(a) {
                return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
            },
            movementX: function movementX(a) {
                if ("movementX" in a) return a.movementX;
                a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
                return wd;
            },
            movementY: function movementY(a) {
                return "movementY" in a ? a.movementY : xd;
            }
        });
        var Bd = rd(Ad);
        var Cd = A({}, Ad, {
            dataTransfer: 0
        });
        var Dd = rd(Cd);
        var Ed = A({}, ud, {
            relatedTarget: 0
        });
        var Fd = rd(Ed);
        var Gd = A({}, sd, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
        });
        var Hd = rd(Gd);
        var Id = A({}, sd, {
            clipboardData: function clipboardData(a) {
                return "clipboardData" in a ? a.clipboardData : window.clipboardData;
            }
        });
        var Jd = rd(Id);
        var Kd = A({}, sd, {
            data: 0
        });
        var Ld = rd(Kd);
        var Md = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
        };
        var Nd = {
            8: "Backspace",
            9: "Tab",
            12: "Clear",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            45: "Insert",
            46: "Delete",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NumLock",
            145: "ScrollLock",
            224: "Meta"
        };
        var Od = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
        };
        function Pd(a) {
            var b = this.nativeEvent;
            return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
        }
        function zd() {
            return Pd;
        }
        var Qd = A({}, ud, {
            key: function key(a) {
                if (a.key) {
                    var b = Md[a.key] || a.key;
                    if ("Unidentified" !== b) return b;
                }
                return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
            },
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: zd,
            charCode: function charCode(a) {
                return "keypress" === a.type ? od(a) : 0;
            },
            keyCode: function keyCode(a) {
                return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            },
            which: function which(a) {
                return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            }
        });
        var Rd = rd(Qd);
        var Sd = A({}, Ad, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
        });
        var Td = rd(Sd);
        var Ud = A({}, ud, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: zd
        });
        var Vd = rd(Ud);
        var Wd = A({}, sd, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
        });
        var Xd = rd(Wd);
        var Yd = A({}, Ad, {
            deltaX: function deltaX(a) {
                return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
            },
            deltaY: function deltaY(a) {
                return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
        });
        var Zd = rd(Yd);
        var $d = [
            9,
            13,
            27,
            32
        ];
        var ae = ia && "CompositionEvent" in window;
        var be = null;
        ia && "documentMode" in document && (be = document.documentMode);
        var ce = ia && "TextEvent" in window && !be;
        var de = ia && (!ae || be && 8 < be && 11 >= be);
        var ee = String.fromCharCode(32);
        var fe = false;
        function ge(a, b) {
            switch(a){
                case "keyup":
                    return -1 !== $d.indexOf(b.keyCode);
                case "keydown":
                    return 229 !== b.keyCode;
                case "keypress":
                case "mousedown":
                case "focusout":
                    return true;
                default:
                    return false;
            }
        }
        function he(a) {
            a = a.detail;
            return "object" === (typeof a === "undefined" ? "undefined" : _type_of(a)) && "data" in a ? a.data : null;
        }
        var ie = false;
        function je(a, b) {
            switch(a){
                case "compositionend":
                    return he(b);
                case "keypress":
                    if (32 !== b.which) return null;
                    fe = true;
                    return ee;
                case "textInput":
                    return a = b.data, a === ee && fe ? null : a;
                default:
                    return null;
            }
        }
        function ke(a, b) {
            if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
            switch(a){
                case "paste":
                    return null;
                case "keypress":
                    if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                        if (b.char && 1 < b.char.length) return b.char;
                        if (b.which) return String.fromCharCode(b.which);
                    }
                    return null;
                case "compositionend":
                    return de && "ko" !== b.locale ? null : b.data;
                default:
                    return null;
            }
        }
        var le = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
        };
        function me(a) {
            var b = a && a.nodeName && a.nodeName.toLowerCase();
            return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
        }
        function ne(a, b, c, d) {
            Eb(d);
            b = oe(b, "onChange");
            0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
                event: c,
                listeners: b
            }));
        }
        var pe = null;
        var qe = null;
        function re(a) {
            se(a, 0);
        }
        function te(a) {
            var b = ue(a);
            if (Wa(b)) return a;
        }
        function ve(a, b) {
            if ("change" === a) return b;
        }
        var we = false;
        if (ia) {
            if (ia) {
                ye = "oninput" in document;
                if (!ye) {
                    ze = document.createElement("div");
                    ze.setAttribute("oninput", "return;");
                    ye = "function" === typeof ze.oninput;
                }
                xe = ye;
            } else xe = false;
            we = xe && (!document.documentMode || 9 < document.documentMode);
        }
        var xe;
        var ye;
        var ze;
        function Ae() {
            pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
        }
        function Be(a) {
            if ("value" === a.propertyName && te(qe)) {
                var b = [];
                ne(b, qe, a, xb(a));
                Jb(re, b);
            }
        }
        function Ce(a, b, c) {
            "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
        }
        function De(a) {
            if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
        }
        function Ee(a, b) {
            if ("click" === a) return te(b);
        }
        function Fe(a, b) {
            if ("input" === a || "change" === a) return te(b);
        }
        function Ge(a, b) {
            return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
        }
        var He = "function" === typeof Object.is ? Object.is : Ge;
        function Ie(a, b) {
            if (He(a, b)) return true;
            if ("object" !== (typeof a === "undefined" ? "undefined" : _type_of(a)) || null === a || "object" !== (typeof b === "undefined" ? "undefined" : _type_of(b)) || null === b) return false;
            var c = Object.keys(a), d = Object.keys(b);
            if (c.length !== d.length) return false;
            for(d = 0; d < c.length; d++){
                var e = c[d];
                if (!ja.call(b, e) || !He(a[e], b[e])) return false;
            }
            return true;
        }
        function Je(a) {
            for(; a && a.firstChild;)a = a.firstChild;
            return a;
        }
        function Ke(a, b) {
            var c = Je(a);
            a = 0;
            for(var d; c;){
                if (3 === c.nodeType) {
                    d = a + c.textContent.length;
                    if (a <= b && d >= b) return {
                        node: c,
                        offset: b - a
                    };
                    a = d;
                }
                a: {
                    for(; c;){
                        if (c.nextSibling) {
                            c = c.nextSibling;
                            break a;
                        }
                        c = c.parentNode;
                    }
                    c = void 0;
                }
                c = Je(c);
            }
        }
        function Le(a, b) {
            return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
        }
        function Me() {
            for(var a = window, b = Xa(); _instanceof(b, a.HTMLIFrameElement);){
                try {
                    var c = "string" === typeof b.contentWindow.location.href;
                } catch (d) {
                    c = false;
                }
                if (c) a = b.contentWindow;
                else break;
                b = Xa(a.document);
            }
            return b;
        }
        function Ne(a) {
            var b = a && a.nodeName && a.nodeName.toLowerCase();
            return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
        }
        function Oe(a) {
            var b = Me(), c = a.focusedElem, d = a.selectionRange;
            if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
                if (null !== d && Ne(c)) {
                    if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
                    else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
                        a = a.getSelection();
                        var e = c.textContent.length, f = Math.min(d.start, e);
                        d = void 0 === d.end ? f : Math.min(d.end, e);
                        !a.extend && f > d && (e = d, d = f, f = e);
                        e = Ke(c, f);
                        var g = Ke(c, d);
                        e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
                    }
                }
                b = [];
                for(a = c; a = a.parentNode;)1 === a.nodeType && b.push({
                    element: a,
                    left: a.scrollLeft,
                    top: a.scrollTop
                });
                "function" === typeof c.focus && c.focus();
                for(c = 0; c < b.length; c++)a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
            }
        }
        var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
        var Qe = null;
        var Re = null;
        var Se = null;
        var Te = false;
        function Ue(a, b, c) {
            var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
            Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
                start: d.selectionStart,
                end: d.selectionEnd
            } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
                anchorNode: d.anchorNode,
                anchorOffset: d.anchorOffset,
                focusNode: d.focusNode,
                focusOffset: d.focusOffset
            }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
                event: b,
                listeners: d
            }), b.target = Qe)));
        }
        function Ve(a, b) {
            var c = {};
            c[a.toLowerCase()] = b.toLowerCase();
            c["Webkit" + a] = "webkit" + b;
            c["Moz" + a] = "moz" + b;
            return c;
        }
        var We = {
            animationend: Ve("Animation", "AnimationEnd"),
            animationiteration: Ve("Animation", "AnimationIteration"),
            animationstart: Ve("Animation", "AnimationStart"),
            transitionend: Ve("Transition", "TransitionEnd")
        };
        var Xe = {};
        var Ye = {};
        ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
        function Ze(a) {
            if (Xe[a]) return Xe[a];
            if (!We[a]) return a;
            var b = We[a], c;
            for(c in b)if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
            return a;
        }
        var $e = Ze("animationend");
        var af = Ze("animationiteration");
        var bf = Ze("animationstart");
        var cf = Ze("transitionend");
        var df = /* @__PURE__ */ new Map();
        var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
        function ff(a, b) {
            df.set(a, b);
            fa(b, [
                a
            ]);
        }
        for(gf = 0; gf < ef.length; gf++){
            hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
            ff(jf, "on" + kf);
        }
        var hf;
        var jf;
        var kf;
        var gf;
        ff($e, "onAnimationEnd");
        ff(af, "onAnimationIteration");
        ff(bf, "onAnimationStart");
        ff("dblclick", "onDoubleClick");
        ff("focusin", "onFocus");
        ff("focusout", "onBlur");
        ff(cf, "onTransitionEnd");
        ha("onMouseEnter", [
            "mouseout",
            "mouseover"
        ]);
        ha("onMouseLeave", [
            "mouseout",
            "mouseover"
        ]);
        ha("onPointerEnter", [
            "pointerout",
            "pointerover"
        ]);
        ha("onPointerLeave", [
            "pointerout",
            "pointerover"
        ]);
        fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
        fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
        fa("onBeforeInput", [
            "compositionend",
            "keypress",
            "textInput",
            "paste"
        ]);
        fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
        var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
        var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
        function nf(a, b, c) {
            var d = a.type || "unknown-event";
            a.currentTarget = c;
            Ub(d, b, void 0, a);
            a.currentTarget = null;
        }
        function se(a, b) {
            b = 0 !== (b & 4);
            for(var c = 0; c < a.length; c++){
                var d = a[c], e = d.event;
                d = d.listeners;
                a: {
                    var f = void 0;
                    if (b) for(var g = d.length - 1; 0 <= g; g--){
                        var h = d[g], k = h.instance, l = h.currentTarget;
                        h = h.listener;
                        if (k !== f && e.isPropagationStopped()) break a;
                        nf(e, h, l);
                        f = k;
                    }
                    else for(g = 0; g < d.length; g++){
                        h = d[g];
                        k = h.instance;
                        l = h.currentTarget;
                        h = h.listener;
                        if (k !== f && e.isPropagationStopped()) break a;
                        nf(e, h, l);
                        f = k;
                    }
                }
            }
            if (Qb) throw a = Rb, Qb = false, Rb = null, a;
        }
        function D(a, b) {
            var c = b[of];
            void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
            var d = a + "__bubble";
            c.has(d) || (pf(b, a, 2, false), c.add(d));
        }
        function qf(a, b, c) {
            var d = 0;
            b && (d |= 4);
            pf(c, a, d, b);
        }
        var rf = "_reactListening" + Math.random().toString(36).slice(2);
        function sf(a) {
            if (!a[rf]) {
                a[rf] = true;
                da.forEach(function(b2) {
                    "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
                });
                var b = 9 === a.nodeType ? a : a.ownerDocument;
                null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
            }
        }
        function pf(a, b, c, d) {
            switch(jd(b)){
                case 1:
                    var e = ed;
                    break;
                case 4:
                    e = gd;
                    break;
                default:
                    e = fd;
            }
            c = e.bind(null, b, c, a);
            e = void 0;
            !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
            d ? void 0 !== e ? a.addEventListener(b, c, {
                capture: true,
                passive: e
            }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, {
                passive: e
            }) : a.addEventListener(b, c, false);
        }
        function hd(a, b, c, d, e) {
            var f = d;
            if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for(;;){
                if (null === d) return;
                var g = d.tag;
                if (3 === g || 4 === g) {
                    var h = d.stateNode.containerInfo;
                    if (h === e || 8 === h.nodeType && h.parentNode === e) break;
                    if (4 === g) for(g = d.return; null !== g;){
                        var k = g.tag;
                        if (3 === k || 4 === k) {
                            if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                        }
                        g = g.return;
                    }
                    for(; null !== h;){
                        g = Wc(h);
                        if (null === g) return;
                        k = g.tag;
                        if (5 === k || 6 === k) {
                            d = f = g;
                            continue a;
                        }
                        h = h.parentNode;
                    }
                }
                d = d.return;
            }
            Jb(function() {
                var d2 = f, e2 = xb(c), g2 = [];
                a: {
                    var h2 = df.get(a);
                    if (void 0 !== h2) {
                        var k2 = td, n = a;
                        switch(a){
                            case "keypress":
                                if (0 === od(c)) break a;
                            case "keydown":
                            case "keyup":
                                k2 = Rd;
                                break;
                            case "focusin":
                                n = "focus";
                                k2 = Fd;
                                break;
                            case "focusout":
                                n = "blur";
                                k2 = Fd;
                                break;
                            case "beforeblur":
                            case "afterblur":
                                k2 = Fd;
                                break;
                            case "click":
                                if (2 === c.button) break a;
                            case "auxclick":
                            case "dblclick":
                            case "mousedown":
                            case "mousemove":
                            case "mouseup":
                            case "mouseout":
                            case "mouseover":
                            case "contextmenu":
                                k2 = Bd;
                                break;
                            case "drag":
                            case "dragend":
                            case "dragenter":
                            case "dragexit":
                            case "dragleave":
                            case "dragover":
                            case "dragstart":
                            case "drop":
                                k2 = Dd;
                                break;
                            case "touchcancel":
                            case "touchend":
                            case "touchmove":
                            case "touchstart":
                                k2 = Vd;
                                break;
                            case $e:
                            case af:
                            case bf:
                                k2 = Hd;
                                break;
                            case cf:
                                k2 = Xd;
                                break;
                            case "scroll":
                                k2 = vd;
                                break;
                            case "wheel":
                                k2 = Zd;
                                break;
                            case "copy":
                            case "cut":
                            case "paste":
                                k2 = Jd;
                                break;
                            case "gotpointercapture":
                            case "lostpointercapture":
                            case "pointercancel":
                            case "pointerdown":
                            case "pointermove":
                            case "pointerout":
                            case "pointerover":
                            case "pointerup":
                                k2 = Td;
                        }
                        var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h2 ? h2 + "Capture" : null : h2;
                        t = [];
                        for(var w = d2, u; null !== w;){
                            u = w;
                            var F = u.stateNode;
                            5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
                            if (J) break;
                            w = w.return;
                        }
                        0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({
                            event: h2,
                            listeners: t
                        }));
                    }
                }
                if (0 === (b & 7)) {
                    a: {
                        h2 = "mouseover" === a || "pointerover" === a;
                        k2 = "mouseout" === a || "pointerout" === a;
                        if (h2 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
                        if (k2 || h2) {
                            h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
                            if (k2) {
                                if (n = c.relatedTarget || c.toElement, k2 = d2, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                            } else k2 = null, n = d2;
                            if (k2 !== n) {
                                t = Bd;
                                F = "onMouseLeave";
                                x = "onMouseEnter";
                                w = "mouse";
                                if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                                J = null == k2 ? h2 : ue(k2);
                                u = null == n ? h2 : ue(n);
                                h2 = new t(F, w + "leave", k2, c, e2);
                                h2.target = J;
                                h2.relatedTarget = u;
                                F = null;
                                Wc(e2) === d2 && (t = new t(x, w + "enter", n, c, e2), t.target = u, t.relatedTarget = J, F = t);
                                J = F;
                                if (k2 && n) b: {
                                    t = k2;
                                    x = n;
                                    w = 0;
                                    for(u = t; u; u = vf(u))w++;
                                    u = 0;
                                    for(F = x; F; F = vf(F))u++;
                                    for(; 0 < w - u;)t = vf(t), w--;
                                    for(; 0 < u - w;)x = vf(x), u--;
                                    for(; w--;){
                                        if (t === x || null !== x && t === x.alternate) break b;
                                        t = vf(t);
                                        x = vf(x);
                                    }
                                    t = null;
                                }
                                else t = null;
                                null !== k2 && wf(g2, h2, k2, t, false);
                                null !== n && null !== J && wf(g2, J, n, t, true);
                            }
                        }
                    }
                    a: {
                        h2 = d2 ? ue(d2) : window;
                        k2 = h2.nodeName && h2.nodeName.toLowerCase();
                        if ("select" === k2 || "input" === k2 && "file" === h2.type) var na = ve;
                        else if (me(h2)) if (we) na = Fe;
                        else {
                            na = De;
                            var xa = Ce;
                        }
                        else (k2 = h2.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
                        if (na && (na = na(a, d2))) {
                            ne(g2, na, c, e2);
                            break a;
                        }
                        xa && xa(a, h2, d2);
                        "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
                    }
                    xa = d2 ? ue(d2) : window;
                    switch(a){
                        case "focusin":
                            if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
                            break;
                        case "focusout":
                            Se = Re = Qe = null;
                            break;
                        case "mousedown":
                            Te = true;
                            break;
                        case "contextmenu":
                        case "mouseup":
                        case "dragend":
                            Te = false;
                            Ue(g2, c, e2);
                            break;
                        case "selectionchange":
                            if (Pe) break;
                        case "keydown":
                        case "keyup":
                            Ue(g2, c, e2);
                    }
                    var $a;
                    if (ae) b: {
                        switch(a){
                            case "compositionstart":
                                var ba = "onCompositionStart";
                                break b;
                            case "compositionend":
                                ba = "onCompositionEnd";
                                break b;
                            case "compositionupdate":
                                ba = "onCompositionUpdate";
                                break b;
                        }
                        ba = void 0;
                    }
                    else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
                    ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({
                        event: ba,
                        listeners: xa
                    }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
                    if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({
                        event: e2,
                        listeners: d2
                    }), e2.data = $a);
                }
                se(g2, b);
            });
        }
        function tf(a, b, c) {
            return {
                instance: a,
                listener: b,
                currentTarget: c
            };
        }
        function oe(a, b) {
            for(var c = b + "Capture", d = []; null !== a;){
                var e = a, f = e.stateNode;
                5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
                a = a.return;
            }
            return d;
        }
        function vf(a) {
            if (null === a) return null;
            do a = a.return;
            while (a && 5 !== a.tag);
            return a ? a : null;
        }
        function wf(a, b, c, d, e) {
            for(var f = b._reactName, g = []; null !== c && c !== d;){
                var h = c, k = h.alternate, l = h.stateNode;
                if (null !== k && k === d) break;
                5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
                c = c.return;
            }
            0 !== g.length && a.push({
                event: b,
                listeners: g
            });
        }
        var xf = /\r\n?/g;
        var yf = /\u0000|\uFFFD/g;
        function zf(a) {
            return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
        }
        function Af(a, b, c) {
            b = zf(b);
            if (zf(a) !== b && c) throw Error(p(425));
        }
        function Bf() {}
        var Cf = null;
        var Df = null;
        function Ef(a, b) {
            return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _type_of(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
        }
        var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
        var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
        var Hf = "function" === typeof Promise ? Promise : void 0;
        var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function Jf(a) {
            return Hf.resolve(null).then(a).catch(If);
        } : Ff;
        function If(a) {
            setTimeout(function() {
                throw a;
            });
        }
        function Kf(a, b) {
            var c = b, d = 0;
            do {
                var e = c.nextSibling;
                a.removeChild(c);
                if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
                    if (0 === d) {
                        a.removeChild(e);
                        bd(b);
                        return;
                    }
                    d--;
                } else "$" !== c && "$?" !== c && "$!" !== c || d++;
                c = e;
            }while (c);
            bd(b);
        }
        function Lf(a) {
            for(; null != a; a = a.nextSibling){
                var b = a.nodeType;
                if (1 === b || 3 === b) break;
                if (8 === b) {
                    b = a.data;
                    if ("$" === b || "$!" === b || "$?" === b) break;
                    if ("/$" === b) return null;
                }
            }
            return a;
        }
        function Mf(a) {
            a = a.previousSibling;
            for(var b = 0; a;){
                if (8 === a.nodeType) {
                    var c = a.data;
                    if ("$" === c || "$!" === c || "$?" === c) {
                        if (0 === b) return a;
                        b--;
                    } else "/$" === c && b++;
                }
                a = a.previousSibling;
            }
            return null;
        }
        var Nf = Math.random().toString(36).slice(2);
        var Of = "__reactFiber$" + Nf;
        var Pf = "__reactProps$" + Nf;
        var uf = "__reactContainer$" + Nf;
        var of = "__reactEvents$" + Nf;
        var Qf = "__reactListeners$" + Nf;
        var Rf = "__reactHandles$" + Nf;
        function Wc(a) {
            var b = a[Of];
            if (b) return b;
            for(var c = a.parentNode; c;){
                if (b = c[uf] || c[Of]) {
                    c = b.alternate;
                    if (null !== b.child || null !== c && null !== c.child) for(a = Mf(a); null !== a;){
                        if (c = a[Of]) return c;
                        a = Mf(a);
                    }
                    return b;
                }
                a = c;
                c = a.parentNode;
            }
            return null;
        }
        function Cb(a) {
            a = a[Of] || a[uf];
            return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
        }
        function ue(a) {
            if (5 === a.tag || 6 === a.tag) return a.stateNode;
            throw Error(p(33));
        }
        function Db(a) {
            return a[Pf] || null;
        }
        var Sf = [];
        var Tf = -1;
        function Uf(a) {
            return {
                current: a
            };
        }
        function E(a) {
            0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
        }
        function G(a, b) {
            Tf++;
            Sf[Tf] = a.current;
            a.current = b;
        }
        var Vf = {};
        var H = Uf(Vf);
        var Wf = Uf(false);
        var Xf = Vf;
        function Yf(a, b) {
            var c = a.type.contextTypes;
            if (!c) return Vf;
            var d = a.stateNode;
            if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
            var e = {}, f;
            for(f in c)e[f] = b[f];
            d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
            return e;
        }
        function Zf(a) {
            a = a.childContextTypes;
            return null !== a && void 0 !== a;
        }
        function $f() {
            E(Wf);
            E(H);
        }
        function ag(a, b, c) {
            if (H.current !== Vf) throw Error(p(168));
            G(H, b);
            G(Wf, c);
        }
        function bg(a, b, c) {
            var d = a.stateNode;
            b = b.childContextTypes;
            if ("function" !== typeof d.getChildContext) return c;
            d = d.getChildContext();
            for(var e in d)if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
            return A({}, c, d);
        }
        function cg(a) {
            a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
            Xf = H.current;
            G(H, a);
            G(Wf, Wf.current);
            return true;
        }
        function dg(a, b, c) {
            var d = a.stateNode;
            if (!d) throw Error(p(169));
            c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
            G(Wf, c);
        }
        var eg = null;
        var fg = false;
        var gg = false;
        function hg(a) {
            null === eg ? eg = [
                a
            ] : eg.push(a);
        }
        function ig(a) {
            fg = true;
            hg(a);
        }
        function jg() {
            if (!gg && null !== eg) {
                gg = true;
                var a = 0, b = C;
                try {
                    var c = eg;
                    for(C = 1; a < c.length; a++){
                        var d = c[a];
                        do d = d(true);
                        while (null !== d);
                    }
                    eg = null;
                    fg = false;
                } catch (e) {
                    throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
                } finally{
                    C = b, gg = false;
                }
            }
            return null;
        }
        var kg = [];
        var lg = 0;
        var mg = null;
        var ng = 0;
        var og = [];
        var pg = 0;
        var qg = null;
        var rg = 1;
        var sg = "";
        function tg(a, b) {
            kg[lg++] = ng;
            kg[lg++] = mg;
            mg = a;
            ng = b;
        }
        function ug(a, b, c) {
            og[pg++] = rg;
            og[pg++] = sg;
            og[pg++] = qg;
            qg = a;
            var d = rg;
            a = sg;
            var e = 32 - oc(d) - 1;
            d &= ~(1 << e);
            c += 1;
            var f = 32 - oc(b) + e;
            if (30 < f) {
                var g = e - e % 5;
                f = (d & (1 << g) - 1).toString(32);
                d >>= g;
                e -= g;
                rg = 1 << 32 - oc(b) + e | c << e | d;
                sg = f + a;
            } else rg = 1 << f | c << e | d, sg = a;
        }
        function vg(a) {
            null !== a.return && (tg(a, 1), ug(a, 1, 0));
        }
        function wg(a) {
            for(; a === mg;)mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
            for(; a === qg;)qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
        }
        var xg = null;
        var yg = null;
        var I = false;
        var zg = null;
        function Ag(a, b) {
            var c = Bg(5, null, null, 0);
            c.elementType = "DELETED";
            c.stateNode = b;
            c.return = a;
            b = a.deletions;
            null === b ? (a.deletions = [
                c
            ], a.flags |= 16) : b.push(c);
        }
        function Cg(a, b) {
            switch(a.tag){
                case 5:
                    var c = a.type;
                    b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
                    return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
                case 6:
                    return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
                case 13:
                    return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
                        id: rg,
                        overflow: sg
                    } : null, a.memoizedState = {
                        dehydrated: b,
                        treeContext: c,
                        retryLane: 1073741824
                    }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
                default:
                    return false;
            }
        }
        function Dg(a) {
            return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
        }
        function Eg(a) {
            if (I) {
                var b = yg;
                if (b) {
                    var c = b;
                    if (!Cg(a, b)) {
                        if (Dg(a)) throw Error(p(418));
                        b = Lf(c.nextSibling);
                        var d = xg;
                        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
                    }
                } else {
                    if (Dg(a)) throw Error(p(418));
                    a.flags = a.flags & -4097 | 2;
                    I = false;
                    xg = a;
                }
            }
        }
        function Fg(a) {
            for(a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;)a = a.return;
            xg = a;
        }
        function Gg(a) {
            if (a !== xg) return false;
            if (!I) return Fg(a), I = true, false;
            var b;
            (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
            if (b && (b = yg)) {
                if (Dg(a)) throw Hg(), Error(p(418));
                for(; b;)Ag(a, b), b = Lf(b.nextSibling);
            }
            Fg(a);
            if (13 === a.tag) {
                a = a.memoizedState;
                a = null !== a ? a.dehydrated : null;
                if (!a) throw Error(p(317));
                a: {
                    a = a.nextSibling;
                    for(b = 0; a;){
                        if (8 === a.nodeType) {
                            var c = a.data;
                            if ("/$" === c) {
                                if (0 === b) {
                                    yg = Lf(a.nextSibling);
                                    break a;
                                }
                                b--;
                            } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                        }
                        a = a.nextSibling;
                    }
                    yg = null;
                }
            } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
            return true;
        }
        function Hg() {
            for(var a = yg; a;)a = Lf(a.nextSibling);
        }
        function Ig() {
            yg = xg = null;
            I = false;
        }
        function Jg(a) {
            null === zg ? zg = [
                a
            ] : zg.push(a);
        }
        var Kg = ua.ReactCurrentBatchConfig;
        function Lg(a, b, c) {
            a = c.ref;
            if (null !== a && "function" !== typeof a && "object" !== (typeof a === "undefined" ? "undefined" : _type_of(a))) {
                if (c._owner) {
                    c = c._owner;
                    if (c) {
                        if (1 !== c.tag) throw Error(p(309));
                        var d = c.stateNode;
                    }
                    if (!d) throw Error(p(147, a));
                    var e = d, f = "" + a;
                    if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
                    b = function b(a2) {
                        var b2 = e.refs;
                        null === a2 ? delete b2[f] : b2[f] = a2;
                    };
                    b._stringRef = f;
                    return b;
                }
                if ("string" !== typeof a) throw Error(p(284));
                if (!c._owner) throw Error(p(290, a));
            }
            return a;
        }
        function Mg(a, b) {
            a = Object.prototype.toString.call(b);
            throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
        }
        function Ng(a) {
            var b = a._init;
            return b(a._payload);
        }
        function Og(a) {
            function b(b2, c2) {
                if (a) {
                    var d2 = b2.deletions;
                    null === d2 ? (b2.deletions = [
                        c2
                    ], b2.flags |= 16) : d2.push(c2);
                }
            }
            function c(c2, d2) {
                if (!a) return null;
                for(; null !== d2;)b(c2, d2), d2 = d2.sibling;
                return null;
            }
            function d(a2, b2) {
                for(a2 = /* @__PURE__ */ new Map(); null !== b2;)null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
                return a2;
            }
            function e(a2, b2) {
                a2 = Pg(a2, b2);
                a2.index = 0;
                a2.sibling = null;
                return a2;
            }
            function f(b2, c2, d2) {
                b2.index = d2;
                if (!a) return b2.flags |= 1048576, c2;
                d2 = b2.alternate;
                if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
                b2.flags |= 2;
                return c2;
            }
            function g(b2) {
                a && null === b2.alternate && (b2.flags |= 2);
                return b2;
            }
            function h(a2, b2, c2, d2) {
                if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
                b2 = e(b2, c2);
                b2.return = a2;
                return b2;
            }
            function k(a2, b2, c2, d2) {
                var f2 = c2.type;
                if (f2 === ya) return m(a2, b2, c2.props.children, d2, c2.key);
                if (null !== b2 && (b2.elementType === f2 || "object" === (typeof f2 === "undefined" ? "undefined" : _type_of(f2)) && null !== f2 && f2.$$typeof === Ha && Ng(f2) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
                d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
                d2.ref = Lg(a2, b2, c2);
                d2.return = a2;
                return d2;
            }
            function l(a2, b2, c2, d2) {
                if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
                b2 = e(b2, c2.children || []);
                b2.return = a2;
                return b2;
            }
            function m(a2, b2, c2, d2, f2) {
                if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2;
                b2 = e(b2, c2);
                b2.return = a2;
                return b2;
            }
            function q(a2, b2, c2) {
                if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
                if ("object" === (typeof b2 === "undefined" ? "undefined" : _type_of(b2)) && null !== b2) {
                    switch(b2.$$typeof){
                        case va:
                            return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
                        case wa:
                            return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
                        case Ha:
                            var d2 = b2._init;
                            return q(a2, d2(b2._payload), c2);
                    }
                    if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
                    Mg(a2, b2);
                }
                return null;
            }
            function r(a2, b2, c2, d2) {
                var e2 = null !== b2 ? b2.key : null;
                if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
                if ("object" === (typeof c2 === "undefined" ? "undefined" : _type_of(c2)) && null !== c2) {
                    switch(c2.$$typeof){
                        case va:
                            return c2.key === e2 ? k(a2, b2, c2, d2) : null;
                        case wa:
                            return c2.key === e2 ? l(a2, b2, c2, d2) : null;
                        case Ha:
                            return e2 = c2._init, r(a2, b2, e2(c2._payload), d2);
                    }
                    if (eb(c2) || Ka(c2)) return null !== e2 ? null : m(a2, b2, c2, d2, null);
                    Mg(a2, c2);
                }
                return null;
            }
            function y(a2, b2, c2, d2, e2) {
                if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
                if ("object" === (typeof d2 === "undefined" ? "undefined" : _type_of(d2)) && null !== d2) {
                    switch(d2.$$typeof){
                        case va:
                            return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k(b2, a2, d2, e2);
                        case wa:
                            return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
                        case Ha:
                            var f2 = d2._init;
                            return y(a2, b2, c2, f2(d2._payload), e2);
                    }
                    if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m(b2, a2, d2, e2, null);
                    Mg(b2, d2);
                }
                return null;
            }
            function n(e2, g2, h2, k2) {
                for(var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; null !== u && w < h2.length; w++){
                    u.index > w ? (x = u, u = null) : x = u.sibling;
                    var n2 = r(e2, u, h2[w], k2);
                    if (null === n2) {
                        null === u && (u = x);
                        break;
                    }
                    a && u && null === n2.alternate && b(e2, u);
                    g2 = f(n2, g2, w);
                    null === m2 ? l2 = n2 : m2.sibling = n2;
                    m2 = n2;
                    u = x;
                }
                if (w === h2.length) return c(e2, u), I && tg(e2, w), l2;
                if (null === u) {
                    for(; w < h2.length; w++)u = q(e2, h2[w], k2), null !== u && (g2 = f(u, g2, w), null === m2 ? l2 = u : m2.sibling = u, m2 = u);
                    I && tg(e2, w);
                    return l2;
                }
                for(u = d(e2, u); w < h2.length; w++)x = y(u, e2, w, h2[w], k2), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m2 ? l2 = x : m2.sibling = x, m2 = x);
                a && u.forEach(function(a2) {
                    return b(e2, a2);
                });
                I && tg(e2, w);
                return l2;
            }
            function t(e2, g2, h2, k2) {
                var l2 = Ka(h2);
                if ("function" !== typeof l2) throw Error(p(150));
                h2 = l2.call(h2);
                if (null == h2) throw Error(p(151));
                for(var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); null !== m2 && !n2.done; w++, n2 = h2.next()){
                    m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
                    var t2 = r(e2, m2, n2.value, k2);
                    if (null === t2) {
                        null === m2 && (m2 = x);
                        break;
                    }
                    a && m2 && null === t2.alternate && b(e2, m2);
                    g2 = f(t2, g2, w);
                    null === u ? l2 = t2 : u.sibling = t2;
                    u = t2;
                    m2 = x;
                }
                if (n2.done) return c(e2, m2), I && tg(e2, w), l2;
                if (null === m2) {
                    for(; !n2.done; w++, n2 = h2.next())n2 = q(e2, n2.value, k2), null !== n2 && (g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
                    I && tg(e2, w);
                    return l2;
                }
                for(m2 = d(e2, m2); !n2.done; w++, n2 = h2.next())n2 = y(m2, e2, w, n2.value, k2), null !== n2 && (a && null !== n2.alternate && m2.delete(null === n2.key ? w : n2.key), g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
                a && m2.forEach(function(a2) {
                    return b(e2, a2);
                });
                I && tg(e2, w);
                return l2;
            }
            function J(a2, d2, f2, h2) {
                "object" === (typeof f2 === "undefined" ? "undefined" : _type_of(f2)) && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
                if ("object" === (typeof f2 === "undefined" ? "undefined" : _type_of(f2)) && null !== f2) {
                    switch(f2.$$typeof){
                        case va:
                            a: {
                                for(var k2 = f2.key, l2 = d2; null !== l2;){
                                    if (l2.key === k2) {
                                        k2 = f2.type;
                                        if (k2 === ya) {
                                            if (7 === l2.tag) {
                                                c(a2, l2.sibling);
                                                d2 = e(l2, f2.props.children);
                                                d2.return = a2;
                                                a2 = d2;
                                                break a;
                                            }
                                        } else if (l2.elementType === k2 || "object" === (typeof k2 === "undefined" ? "undefined" : _type_of(k2)) && null !== k2 && k2.$$typeof === Ha && Ng(k2) === l2.type) {
                                            c(a2, l2.sibling);
                                            d2 = e(l2, f2.props);
                                            d2.ref = Lg(a2, l2, f2);
                                            d2.return = a2;
                                            a2 = d2;
                                            break a;
                                        }
                                        c(a2, l2);
                                        break;
                                    } else b(a2, l2);
                                    l2 = l2.sibling;
                                }
                                f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
                            }
                            return g(a2);
                        case wa:
                            a: {
                                for(l2 = f2.key; null !== d2;){
                                    if (d2.key === l2) if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                                        c(a2, d2.sibling);
                                        d2 = e(d2, f2.children || []);
                                        d2.return = a2;
                                        a2 = d2;
                                        break a;
                                    } else {
                                        c(a2, d2);
                                        break;
                                    }
                                    else b(a2, d2);
                                    d2 = d2.sibling;
                                }
                                d2 = Sg(f2, a2.mode, h2);
                                d2.return = a2;
                                a2 = d2;
                            }
                            return g(a2);
                        case Ha:
                            return l2 = f2._init, J(a2, d2, l2(f2._payload), h2);
                    }
                    if (eb(f2)) return n(a2, d2, f2, h2);
                    if (Ka(f2)) return t(a2, d2, f2, h2);
                    Mg(a2, f2);
                }
                return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
            }
            return J;
        }
        var Ug = Og(true);
        var Vg = Og(false);
        var Wg = Uf(null);
        var Xg = null;
        var Yg = null;
        var Zg = null;
        function $g() {
            Zg = Yg = Xg = null;
        }
        function ah(a) {
            var b = Wg.current;
            E(Wg);
            a._currentValue = b;
        }
        function bh(a, b, c) {
            for(; null !== a;){
                var d = a.alternate;
                (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
                if (a === c) break;
                a = a.return;
            }
        }
        function ch(a, b) {
            Xg = a;
            Zg = Yg = null;
            a = a.dependencies;
            null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
        }
        function eh(a) {
            var b = a._currentValue;
            if (Zg !== a) if (a = {
                context: a,
                memoizedValue: b,
                next: null
            }, null === Yg) {
                if (null === Xg) throw Error(p(308));
                Yg = a;
                Xg.dependencies = {
                    lanes: 0,
                    firstContext: a
                };
            } else Yg = Yg.next = a;
            return b;
        }
        var fh = null;
        function gh(a) {
            null === fh ? fh = [
                a
            ] : fh.push(a);
        }
        function hh(a, b, c, d) {
            var e = b.interleaved;
            null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
            b.interleaved = c;
            return ih(a, d);
        }
        function ih(a, b) {
            a.lanes |= b;
            var c = a.alternate;
            null !== c && (c.lanes |= b);
            c = a;
            for(a = a.return; null !== a;)a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
            return 3 === c.tag ? c.stateNode : null;
        }
        var jh = false;
        function kh(a) {
            a.updateQueue = {
                baseState: a.memoizedState,
                firstBaseUpdate: null,
                lastBaseUpdate: null,
                shared: {
                    pending: null,
                    interleaved: null,
                    lanes: 0
                },
                effects: null
            };
        }
        function lh(a, b) {
            a = a.updateQueue;
            b.updateQueue === a && (b.updateQueue = {
                baseState: a.baseState,
                firstBaseUpdate: a.firstBaseUpdate,
                lastBaseUpdate: a.lastBaseUpdate,
                shared: a.shared,
                effects: a.effects
            });
        }
        function mh(a, b) {
            return {
                eventTime: a,
                lane: b,
                tag: 0,
                payload: null,
                callback: null,
                next: null
            };
        }
        function nh(a, b, c) {
            var d = a.updateQueue;
            if (null === d) return null;
            d = d.shared;
            if (0 !== (K & 2)) {
                var e = d.pending;
                null === e ? b.next = b : (b.next = e.next, e.next = b);
                d.pending = b;
                return ih(a, c);
            }
            e = d.interleaved;
            null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
            d.interleaved = b;
            return ih(a, c);
        }
        function oh(a, b, c) {
            b = b.updateQueue;
            if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
                var d = b.lanes;
                d &= a.pendingLanes;
                c |= d;
                b.lanes = c;
                Cc(a, c);
            }
        }
        function ph(a, b) {
            var c = a.updateQueue, d = a.alternate;
            if (null !== d && (d = d.updateQueue, c === d)) {
                var e = null, f = null;
                c = c.firstBaseUpdate;
                if (null !== c) {
                    do {
                        var g = {
                            eventTime: c.eventTime,
                            lane: c.lane,
                            tag: c.tag,
                            payload: c.payload,
                            callback: c.callback,
                            next: null
                        };
                        null === f ? e = f = g : f = f.next = g;
                        c = c.next;
                    }while (null !== c);
                    null === f ? e = f = b : f = f.next = b;
                } else e = f = b;
                c = {
                    baseState: d.baseState,
                    firstBaseUpdate: e,
                    lastBaseUpdate: f,
                    shared: d.shared,
                    effects: d.effects
                };
                a.updateQueue = c;
                return;
            }
            a = c.lastBaseUpdate;
            null === a ? c.firstBaseUpdate = b : a.next = b;
            c.lastBaseUpdate = b;
        }
        function qh(a, b, c, d) {
            var e = a.updateQueue;
            jh = false;
            var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
            if (null !== h) {
                e.shared.pending = null;
                var k = h, l = k.next;
                k.next = null;
                null === g ? f = l : g.next = l;
                g = k;
                var m = a.alternate;
                null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
            }
            if (null !== f) {
                var q = e.baseState;
                g = 0;
                m = l = k = null;
                h = f;
                do {
                    var r = h.lane, y = h.eventTime;
                    if ((d & r) === r) {
                        null !== m && (m = m.next = {
                            eventTime: y,
                            lane: 0,
                            tag: h.tag,
                            payload: h.payload,
                            callback: h.callback,
                            next: null
                        });
                        a: {
                            var n = a, t = h;
                            r = b;
                            y = c;
                            switch(t.tag){
                                case 1:
                                    n = t.payload;
                                    if ("function" === typeof n) {
                                        q = n.call(y, q, r);
                                        break a;
                                    }
                                    q = n;
                                    break a;
                                case 3:
                                    n.flags = n.flags & -65537 | 128;
                                case 0:
                                    n = t.payload;
                                    r = "function" === typeof n ? n.call(y, q, r) : n;
                                    if (null === r || void 0 === r) break a;
                                    q = A({}, q, r);
                                    break a;
                                case 2:
                                    jh = true;
                            }
                        }
                        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [
                            h
                        ] : r.push(h));
                    } else y = {
                        eventTime: y,
                        lane: r,
                        tag: h.tag,
                        payload: h.payload,
                        callback: h.callback,
                        next: null
                    }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
                    h = h.next;
                    if (null === h) if (h = e.shared.pending, null === h) break;
                    else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
                }while (1);
                null === m && (k = q);
                e.baseState = k;
                e.firstBaseUpdate = l;
                e.lastBaseUpdate = m;
                b = e.shared.interleaved;
                if (null !== b) {
                    e = b;
                    do g |= e.lane, e = e.next;
                    while (e !== b);
                } else null === f && (e.shared.lanes = 0);
                rh |= g;
                a.lanes = g;
                a.memoizedState = q;
            }
        }
        function sh(a, b, c) {
            a = b.effects;
            b.effects = null;
            if (null !== a) for(b = 0; b < a.length; b++){
                var d = a[b], e = d.callback;
                if (null !== e) {
                    d.callback = null;
                    d = c;
                    if ("function" !== typeof e) throw Error(p(191, e));
                    e.call(d);
                }
            }
        }
        var th = {};
        var uh = Uf(th);
        var vh = Uf(th);
        var wh = Uf(th);
        function xh(a) {
            if (a === th) throw Error(p(174));
            return a;
        }
        function yh(a, b) {
            G(wh, b);
            G(vh, a);
            G(uh, th);
            a = b.nodeType;
            switch(a){
                case 9:
                case 11:
                    b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
                    break;
                default:
                    a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
            }
            E(uh);
            G(uh, b);
        }
        function zh() {
            E(uh);
            E(vh);
            E(wh);
        }
        function Ah(a) {
            xh(wh.current);
            var b = xh(uh.current);
            var c = lb(b, a.type);
            b !== c && (G(vh, a), G(uh, c));
        }
        function Bh(a) {
            vh.current === a && (E(uh), E(vh));
        }
        var L = Uf(0);
        function Ch(a) {
            for(var b = a; null !== b;){
                if (13 === b.tag) {
                    var c = b.memoizedState;
                    if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
                } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
                    if (0 !== (b.flags & 128)) return b;
                } else if (null !== b.child) {
                    b.child.return = b;
                    b = b.child;
                    continue;
                }
                if (b === a) break;
                for(; null === b.sibling;){
                    if (null === b.return || b.return === a) return null;
                    b = b.return;
                }
                b.sibling.return = b.return;
                b = b.sibling;
            }
            return null;
        }
        var Dh = [];
        function Eh() {
            for(var a = 0; a < Dh.length; a++)Dh[a]._workInProgressVersionPrimary = null;
            Dh.length = 0;
        }
        var Fh = ua.ReactCurrentDispatcher;
        var Gh = ua.ReactCurrentBatchConfig;
        var Hh = 0;
        var M = null;
        var N = null;
        var O = null;
        var Ih = false;
        var Jh = false;
        var Kh = 0;
        var Lh = 0;
        function P() {
            throw Error(p(321));
        }
        function Mh(a, b) {
            if (null === b) return false;
            for(var c = 0; c < b.length && c < a.length; c++)if (!He(a[c], b[c])) return false;
            return true;
        }
        function Nh(a, b, c, d, e, f) {
            Hh = f;
            M = b;
            b.memoizedState = null;
            b.updateQueue = null;
            b.lanes = 0;
            Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
            a = c(d, e);
            if (Jh) {
                f = 0;
                do {
                    Jh = false;
                    Kh = 0;
                    if (25 <= f) throw Error(p(301));
                    f += 1;
                    O = N = null;
                    b.updateQueue = null;
                    Fh.current = Qh;
                    a = c(d, e);
                }while (Jh);
            }
            Fh.current = Rh;
            b = null !== N && null !== N.next;
            Hh = 0;
            O = N = M = null;
            Ih = false;
            if (b) throw Error(p(300));
            return a;
        }
        function Sh() {
            var a = 0 !== Kh;
            Kh = 0;
            return a;
        }
        function Th() {
            var a = {
                memoizedState: null,
                baseState: null,
                baseQueue: null,
                queue: null,
                next: null
            };
            null === O ? M.memoizedState = O = a : O = O.next = a;
            return O;
        }
        function Uh() {
            if (null === N) {
                var a = M.alternate;
                a = null !== a ? a.memoizedState : null;
            } else a = N.next;
            var b = null === O ? M.memoizedState : O.next;
            if (null !== b) O = b, N = a;
            else {
                if (null === a) throw Error(p(310));
                N = a;
                a = {
                    memoizedState: N.memoizedState,
                    baseState: N.baseState,
                    baseQueue: N.baseQueue,
                    queue: N.queue,
                    next: null
                };
                null === O ? M.memoizedState = O = a : O = O.next = a;
            }
            return O;
        }
        function Vh(a, b) {
            return "function" === typeof b ? b(a) : b;
        }
        function Wh(a) {
            var b = Uh(), c = b.queue;
            if (null === c) throw Error(p(311));
            c.lastRenderedReducer = a;
            var d = N, e = d.baseQueue, f = c.pending;
            if (null !== f) {
                if (null !== e) {
                    var g = e.next;
                    e.next = f.next;
                    f.next = g;
                }
                d.baseQueue = e = f;
                c.pending = null;
            }
            if (null !== e) {
                f = e.next;
                d = d.baseState;
                var h = g = null, k = null, l = f;
                do {
                    var m = l.lane;
                    if ((Hh & m) === m) null !== k && (k = k.next = {
                        lane: 0,
                        action: l.action,
                        hasEagerState: l.hasEagerState,
                        eagerState: l.eagerState,
                        next: null
                    }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
                    else {
                        var q = {
                            lane: m,
                            action: l.action,
                            hasEagerState: l.hasEagerState,
                            eagerState: l.eagerState,
                            next: null
                        };
                        null === k ? (h = k = q, g = d) : k = k.next = q;
                        M.lanes |= m;
                        rh |= m;
                    }
                    l = l.next;
                }while (null !== l && l !== f);
                null === k ? g = d : k.next = h;
                He(d, b.memoizedState) || (dh = true);
                b.memoizedState = d;
                b.baseState = g;
                b.baseQueue = k;
                c.lastRenderedState = d;
            }
            a = c.interleaved;
            if (null !== a) {
                e = a;
                do f = e.lane, M.lanes |= f, rh |= f, e = e.next;
                while (e !== a);
            } else null === e && (c.lanes = 0);
            return [
                b.memoizedState,
                c.dispatch
            ];
        }
        function Xh(a) {
            var b = Uh(), c = b.queue;
            if (null === c) throw Error(p(311));
            c.lastRenderedReducer = a;
            var d = c.dispatch, e = c.pending, f = b.memoizedState;
            if (null !== e) {
                c.pending = null;
                var g = e = e.next;
                do f = a(f, g.action), g = g.next;
                while (g !== e);
                He(f, b.memoizedState) || (dh = true);
                b.memoizedState = f;
                null === b.baseQueue && (b.baseState = f);
                c.lastRenderedState = f;
            }
            return [
                f,
                d
            ];
        }
        function Yh() {}
        function Zh(a, b) {
            var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
            f && (d.memoizedState = e, dh = true);
            d = d.queue;
            $h(ai.bind(null, c, d, a), [
                a
            ]);
            if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
                c.flags |= 2048;
                bi(9, ci.bind(null, c, d, e, b), void 0, null);
                if (null === Q) throw Error(p(349));
                0 !== (Hh & 30) || di(c, b, e);
            }
            return e;
        }
        function di(a, b, c) {
            a.flags |= 16384;
            a = {
                getSnapshot: b,
                value: c
            };
            b = M.updateQueue;
            null === b ? (b = {
                lastEffect: null,
                stores: null
            }, M.updateQueue = b, b.stores = [
                a
            ]) : (c = b.stores, null === c ? b.stores = [
                a
            ] : c.push(a));
        }
        function ci(a, b, c, d) {
            b.value = c;
            b.getSnapshot = d;
            ei(b) && fi(a);
        }
        function ai(a, b, c) {
            return c(function() {
                ei(b) && fi(a);
            });
        }
        function ei(a) {
            var b = a.getSnapshot;
            a = a.value;
            try {
                var c = b();
                return !He(a, c);
            } catch (d) {
                return true;
            }
        }
        function fi(a) {
            var b = ih(a, 1);
            null !== b && gi(b, a, 1, -1);
        }
        function hi(a) {
            var b = Th();
            "function" === typeof a && (a = a());
            b.memoizedState = b.baseState = a;
            a = {
                pending: null,
                interleaved: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: Vh,
                lastRenderedState: a
            };
            b.queue = a;
            a = a.dispatch = ii.bind(null, M, a);
            return [
                b.memoizedState,
                a
            ];
        }
        function bi(a, b, c, d) {
            a = {
                tag: a,
                create: b,
                destroy: c,
                deps: d,
                next: null
            };
            b = M.updateQueue;
            null === b ? (b = {
                lastEffect: null,
                stores: null
            }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
            return a;
        }
        function ji() {
            return Uh().memoizedState;
        }
        function ki(a, b, c, d) {
            var e = Th();
            M.flags |= a;
            e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
        }
        function li(a, b, c, d) {
            var e = Uh();
            d = void 0 === d ? null : d;
            var f = void 0;
            if (null !== N) {
                var g = N.memoizedState;
                f = g.destroy;
                if (null !== d && Mh(d, g.deps)) {
                    e.memoizedState = bi(b, c, f, d);
                    return;
                }
            }
            M.flags |= a;
            e.memoizedState = bi(1 | b, c, f, d);
        }
        function mi(a, b) {
            return ki(8390656, 8, a, b);
        }
        function $h(a, b) {
            return li(2048, 8, a, b);
        }
        function ni(a, b) {
            return li(4, 2, a, b);
        }
        function oi(a, b) {
            return li(4, 4, a, b);
        }
        function pi(a, b) {
            if ("function" === typeof b) return a = a(), b(a), function() {
                b(null);
            };
            if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
                b.current = null;
            };
        }
        function qi(a, b, c) {
            c = null !== c && void 0 !== c ? c.concat([
                a
            ]) : null;
            return li(4, 4, pi.bind(null, b, a), c);
        }
        function ri() {}
        function si(a, b) {
            var c = Uh();
            b = void 0 === b ? null : b;
            var d = c.memoizedState;
            if (null !== d && null !== b && Mh(b, d[1])) return d[0];
            c.memoizedState = [
                a,
                b
            ];
            return a;
        }
        function ti(a, b) {
            var c = Uh();
            b = void 0 === b ? null : b;
            var d = c.memoizedState;
            if (null !== d && null !== b && Mh(b, d[1])) return d[0];
            a = a();
            c.memoizedState = [
                a,
                b
            ];
            return a;
        }
        function ui(a, b, c) {
            if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
            He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
            return b;
        }
        function vi(a, b) {
            var c = C;
            C = 0 !== c && 4 > c ? c : 4;
            a(true);
            var d = Gh.transition;
            Gh.transition = {};
            try {
                a(false), b();
            } finally{
                C = c, Gh.transition = d;
            }
        }
        function wi() {
            return Uh().memoizedState;
        }
        function xi(a, b, c) {
            var d = yi(a);
            c = {
                lane: d,
                action: c,
                hasEagerState: false,
                eagerState: null,
                next: null
            };
            if (zi(a)) Ai(b, c);
            else if (c = hh(a, b, c, d), null !== c) {
                var e = R();
                gi(c, a, d, e);
                Bi(c, b, d);
            }
        }
        function ii(a, b, c) {
            var d = yi(a), e = {
                lane: d,
                action: c,
                hasEagerState: false,
                eagerState: null,
                next: null
            };
            if (zi(a)) Ai(b, e);
            else {
                var f = a.alternate;
                if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
                    var g = b.lastRenderedState, h = f(g, c);
                    e.hasEagerState = true;
                    e.eagerState = h;
                    if (He(h, g)) {
                        var k = b.interleaved;
                        null === k ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e);
                        b.interleaved = e;
                        return;
                    }
                } catch (l) {} finally{}
                c = hh(a, b, e, d);
                null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
            }
        }
        function zi(a) {
            var b = a.alternate;
            return a === M || null !== b && b === M;
        }
        function Ai(a, b) {
            Jh = Ih = true;
            var c = a.pending;
            null === c ? b.next = b : (b.next = c.next, c.next = b);
            a.pending = b;
        }
        function Bi(a, b, c) {
            if (0 !== (c & 4194240)) {
                var d = b.lanes;
                d &= a.pendingLanes;
                c |= d;
                b.lanes = c;
                Cc(a, c);
            }
        }
        var Rh = {
            readContext: eh,
            useCallback: P,
            useContext: P,
            useEffect: P,
            useImperativeHandle: P,
            useInsertionEffect: P,
            useLayoutEffect: P,
            useMemo: P,
            useReducer: P,
            useRef: P,
            useState: P,
            useDebugValue: P,
            useDeferredValue: P,
            useTransition: P,
            useMutableSource: P,
            useSyncExternalStore: P,
            useId: P,
            unstable_isNewReconciler: false
        };
        var Oh = {
            readContext: eh,
            useCallback: function useCallback(a, b) {
                Th().memoizedState = [
                    a,
                    void 0 === b ? null : b
                ];
                return a;
            },
            useContext: eh,
            useEffect: mi,
            useImperativeHandle: function useImperativeHandle(a, b, c) {
                c = null !== c && void 0 !== c ? c.concat([
                    a
                ]) : null;
                return ki(4194308, 4, pi.bind(null, b, a), c);
            },
            useLayoutEffect: function useLayoutEffect(a, b) {
                return ki(4194308, 4, a, b);
            },
            useInsertionEffect: function useInsertionEffect(a, b) {
                return ki(4, 2, a, b);
            },
            useMemo: function useMemo(a, b) {
                var c = Th();
                b = void 0 === b ? null : b;
                a = a();
                c.memoizedState = [
                    a,
                    b
                ];
                return a;
            },
            useReducer: function useReducer(a, b, c) {
                var d = Th();
                b = void 0 !== c ? c(b) : b;
                d.memoizedState = d.baseState = b;
                a = {
                    pending: null,
                    interleaved: null,
                    lanes: 0,
                    dispatch: null,
                    lastRenderedReducer: a,
                    lastRenderedState: b
                };
                d.queue = a;
                a = a.dispatch = xi.bind(null, M, a);
                return [
                    d.memoizedState,
                    a
                ];
            },
            useRef: function useRef(a) {
                var b = Th();
                a = {
                    current: a
                };
                return b.memoizedState = a;
            },
            useState: hi,
            useDebugValue: ri,
            useDeferredValue: function useDeferredValue(a) {
                return Th().memoizedState = a;
            },
            useTransition: function useTransition() {
                var a = hi(false), b = a[0];
                a = vi.bind(null, a[1]);
                Th().memoizedState = a;
                return [
                    b,
                    a
                ];
            },
            useMutableSource: function useMutableSource() {},
            useSyncExternalStore: function useSyncExternalStore(a, b, c) {
                var d = M, e = Th();
                if (I) {
                    if (void 0 === c) throw Error(p(407));
                    c = c();
                } else {
                    c = b();
                    if (null === Q) throw Error(p(349));
                    0 !== (Hh & 30) || di(d, b, c);
                }
                e.memoizedState = c;
                var f = {
                    value: c,
                    getSnapshot: b
                };
                e.queue = f;
                mi(ai.bind(null, d, f, a), [
                    a
                ]);
                d.flags |= 2048;
                bi(9, ci.bind(null, d, f, c, b), void 0, null);
                return c;
            },
            useId: function useId() {
                var a = Th(), b = Q.identifierPrefix;
                if (I) {
                    var c = sg;
                    var d = rg;
                    c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
                    b = ":" + b + "R" + c;
                    c = Kh++;
                    0 < c && (b += "H" + c.toString(32));
                    b += ":";
                } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
                return a.memoizedState = b;
            },
            unstable_isNewReconciler: false
        };
        var Ph = {
            readContext: eh,
            useCallback: si,
            useContext: eh,
            useEffect: $h,
            useImperativeHandle: qi,
            useInsertionEffect: ni,
            useLayoutEffect: oi,
            useMemo: ti,
            useReducer: Wh,
            useRef: ji,
            useState: function useState() {
                return Wh(Vh);
            },
            useDebugValue: ri,
            useDeferredValue: function useDeferredValue(a) {
                var b = Uh();
                return ui(b, N.memoizedState, a);
            },
            useTransition: function useTransition() {
                var a = Wh(Vh)[0], b = Uh().memoizedState;
                return [
                    a,
                    b
                ];
            },
            useMutableSource: Yh,
            useSyncExternalStore: Zh,
            useId: wi,
            unstable_isNewReconciler: false
        };
        var Qh = {
            readContext: eh,
            useCallback: si,
            useContext: eh,
            useEffect: $h,
            useImperativeHandle: qi,
            useInsertionEffect: ni,
            useLayoutEffect: oi,
            useMemo: ti,
            useReducer: Xh,
            useRef: ji,
            useState: function useState() {
                return Xh(Vh);
            },
            useDebugValue: ri,
            useDeferredValue: function useDeferredValue(a) {
                var b = Uh();
                return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
            },
            useTransition: function useTransition() {
                var a = Xh(Vh)[0], b = Uh().memoizedState;
                return [
                    a,
                    b
                ];
            },
            useMutableSource: Yh,
            useSyncExternalStore: Zh,
            useId: wi,
            unstable_isNewReconciler: false
        };
        function Ci(a, b) {
            if (a && a.defaultProps) {
                b = A({}, b);
                a = a.defaultProps;
                for(var c in a)void 0 === b[c] && (b[c] = a[c]);
                return b;
            }
            return b;
        }
        function Di(a, b, c, d) {
            b = a.memoizedState;
            c = c(d, b);
            c = null === c || void 0 === c ? b : A({}, b, c);
            a.memoizedState = c;
            0 === a.lanes && (a.updateQueue.baseState = c);
        }
        var Ei = {
            isMounted: function isMounted(a) {
                return (a = a._reactInternals) ? Vb(a) === a : false;
            },
            enqueueSetState: function enqueueSetState(a, b, c) {
                a = a._reactInternals;
                var d = R(), e = yi(a), f = mh(d, e);
                f.payload = b;
                void 0 !== c && null !== c && (f.callback = c);
                b = nh(a, f, e);
                null !== b && (gi(b, a, e, d), oh(b, a, e));
            },
            enqueueReplaceState: function enqueueReplaceState(a, b, c) {
                a = a._reactInternals;
                var d = R(), e = yi(a), f = mh(d, e);
                f.tag = 1;
                f.payload = b;
                void 0 !== c && null !== c && (f.callback = c);
                b = nh(a, f, e);
                null !== b && (gi(b, a, e, d), oh(b, a, e));
            },
            enqueueForceUpdate: function enqueueForceUpdate(a, b) {
                a = a._reactInternals;
                var c = R(), d = yi(a), e = mh(c, d);
                e.tag = 2;
                void 0 !== b && null !== b && (e.callback = b);
                b = nh(a, e, d);
                null !== b && (gi(b, a, d, c), oh(b, a, d));
            }
        };
        function Fi(a, b, c, d, e, f, g) {
            a = a.stateNode;
            return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : true;
        }
        function Gi(a, b, c) {
            var d = false, e = Vf;
            var f = b.contextType;
            "object" === (typeof f === "undefined" ? "undefined" : _type_of(f)) && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
            b = new b(c, f);
            a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
            b.updater = Ei;
            a.stateNode = b;
            b._reactInternals = a;
            d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
            return b;
        }
        function Hi(a, b, c, d) {
            a = b.state;
            "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
            "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
            b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
        }
        function Ii(a, b, c, d) {
            var e = a.stateNode;
            e.props = c;
            e.state = a.memoizedState;
            e.refs = {};
            kh(a);
            var f = b.contextType;
            "object" === (typeof f === "undefined" ? "undefined" : _type_of(f)) && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
            e.state = a.memoizedState;
            f = b.getDerivedStateFromProps;
            "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
            "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
            "function" === typeof e.componentDidMount && (a.flags |= 4194308);
        }
        function Ji(a, b) {
            try {
                var c = "", d = b;
                do c += Pa(d), d = d.return;
                while (d);
                var e = c;
            } catch (f) {
                e = "\nError generating stack: " + f.message + "\n" + f.stack;
            }
            return {
                value: a,
                source: b,
                stack: e,
                digest: null
            };
        }
        function Ki(a, b, c) {
            return {
                value: a,
                source: null,
                stack: null != c ? c : null,
                digest: null != b ? b : null
            };
        }
        function Li(a, b) {
            try {
                console.error(b.value);
            } catch (c) {
                setTimeout(function() {
                    throw c;
                });
            }
        }
        var Mi = "function" === typeof WeakMap ? WeakMap : Map;
        function Ni(a, b, c) {
            c = mh(-1, c);
            c.tag = 3;
            c.payload = {
                element: null
            };
            var d = b.value;
            c.callback = function() {
                Oi || (Oi = true, Pi = d);
                Li(a, b);
            };
            return c;
        }
        function Qi(a, b, c) {
            c = mh(-1, c);
            c.tag = 3;
            var d = a.type.getDerivedStateFromError;
            if ("function" === typeof d) {
                var e = b.value;
                c.payload = function() {
                    return d(e);
                };
                c.callback = function() {
                    Li(a, b);
                };
            }
            var f = a.stateNode;
            null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
                Li(a, b);
                "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([
                    this
                ]) : Ri.add(this));
                var c2 = b.stack;
                this.componentDidCatch(b.value, {
                    componentStack: null !== c2 ? c2 : ""
                });
            });
            return c;
        }
        function Si(a, b, c) {
            var d = a.pingCache;
            if (null === d) {
                d = a.pingCache = new Mi();
                var e = /* @__PURE__ */ new Set();
                d.set(b, e);
            } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
            e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
        }
        function Ui(a) {
            do {
                var b;
                if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
                if (b) return a;
                a = a.return;
            }while (null !== a);
            return null;
        }
        function Vi(a, b, c, d, e) {
            if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
            a.flags |= 65536;
            a.lanes = e;
            return a;
        }
        var Wi = ua.ReactCurrentOwner;
        var dh = false;
        function Xi(a, b, c, d) {
            b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
        }
        function Yi(a, b, c, d, e) {
            c = c.render;
            var f = b.ref;
            ch(b, e);
            d = Nh(a, b, c, d, f, e);
            c = Sh();
            if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
            I && c && vg(b);
            b.flags |= 1;
            Xi(a, b, d, e);
            return b.child;
        }
        function $i(a, b, c, d, e) {
            if (null === a) {
                var f = c.type;
                if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
                a = Rg(c.type, null, d, b, b.mode, e);
                a.ref = b.ref;
                a.return = b;
                return b.child = a;
            }
            f = a.child;
            if (0 === (a.lanes & e)) {
                var g = f.memoizedProps;
                c = c.compare;
                c = null !== c ? c : Ie;
                if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
            }
            b.flags |= 1;
            a = Pg(f, d);
            a.ref = b.ref;
            a.return = b;
            return b.child = a;
        }
        function bj(a, b, c, d, e) {
            if (null !== a) {
                var f = a.memoizedProps;
                if (Ie(f, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
                else return b.lanes = a.lanes, Zi(a, b, e);
            }
            return cj(a, b, c, d, e);
        }
        function dj(a, b, c) {
            var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
            if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
            }, G(ej, fj), fj |= c;
            else {
                if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
                    baseLanes: a,
                    cachePool: null,
                    transitions: null
                }, b.updateQueue = null, G(ej, fj), fj |= a, null;
                b.memoizedState = {
                    baseLanes: 0,
                    cachePool: null,
                    transitions: null
                };
                d = null !== f ? f.baseLanes : c;
                G(ej, fj);
                fj |= d;
            }
            else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
            Xi(a, b, e, c);
            return b.child;
        }
        function gj(a, b) {
            var c = b.ref;
            if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
        }
        function cj(a, b, c, d, e) {
            var f = Zf(c) ? Xf : H.current;
            f = Yf(b, f);
            ch(b, e);
            c = Nh(a, b, c, d, f, e);
            d = Sh();
            if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
            I && d && vg(b);
            b.flags |= 1;
            Xi(a, b, c, e);
            return b.child;
        }
        function hj(a, b, c, d, e) {
            if (Zf(c)) {
                var f = true;
                cg(b);
            } else f = false;
            ch(b, e);
            if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
            else if (null === a) {
                var g = b.stateNode, h = b.memoizedProps;
                g.props = h;
                var k = g.context, l = c.contextType;
                "object" === (typeof l === "undefined" ? "undefined" : _type_of(l)) && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
                var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
                q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Hi(b, g, d, l);
                jh = false;
                var r = b.memoizedState;
                g.state = r;
                qh(b, d, g, e);
                k = b.memoizedState;
                h !== d || r !== k || Wf.current || jh ? ("function" === typeof m && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
            } else {
                g = b.stateNode;
                lh(a, b);
                h = b.memoizedProps;
                l = b.type === b.elementType ? h : Ci(b.type, h);
                g.props = l;
                q = b.pendingProps;
                r = g.context;
                k = c.contextType;
                "object" === (typeof k === "undefined" ? "undefined" : _type_of(k)) && null !== k ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
                var y = c.getDerivedStateFromProps;
                (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && Hi(b, g, d, k);
                jh = false;
                r = b.memoizedState;
                g.state = r;
                qh(b, d, g, e);
                var n = b.memoizedState;
                h !== q || r !== n || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || false) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = false);
            }
            return jj(a, b, c, d, f, e);
        }
        function jj(a, b, c, d, e, f) {
            gj(a, b);
            var g = 0 !== (b.flags & 128);
            if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
            d = b.stateNode;
            Wi.current = b;
            var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
            b.flags |= 1;
            null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
            b.memoizedState = d.state;
            e && dg(b, c, true);
            return b.child;
        }
        function kj(a) {
            var b = a.stateNode;
            b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
            yh(a, b.containerInfo);
        }
        function lj(a, b, c, d, e) {
            Ig();
            Jg(e);
            b.flags |= 256;
            Xi(a, b, c, d);
            return b.child;
        }
        var mj = {
            dehydrated: null,
            treeContext: null,
            retryLane: 0
        };
        function nj(a) {
            return {
                baseLanes: a,
                cachePool: null,
                transitions: null
            };
        }
        function oj(a, b, c) {
            var d = b.pendingProps, e = L.current, f = false, g = 0 !== (b.flags & 128), h;
            (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
            if (h) f = true, b.flags &= -129;
            else if (null === a || null !== a.memoizedState) e |= 1;
            G(L, e & 1);
            if (null === a) {
                Eg(b);
                a = b.memoizedState;
                if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
                g = d.children;
                a = d.fallback;
                return f ? (d = b.mode, f = b.child, g = {
                    mode: "hidden",
                    children: g
                }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
            }
            e = a.memoizedState;
            if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
            if (f) {
                f = d.fallback;
                g = b.mode;
                e = a.child;
                h = e.sibling;
                var k = {
                    mode: "hidden",
                    children: d.children
                };
                0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
                null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
                f.return = b;
                d.return = b;
                d.sibling = f;
                b.child = d;
                d = f;
                f = b.child;
                g = a.child.memoizedState;
                g = null === g ? nj(c) : {
                    baseLanes: g.baseLanes | c,
                    cachePool: null,
                    transitions: g.transitions
                };
                f.memoizedState = g;
                f.childLanes = a.childLanes & ~c;
                b.memoizedState = mj;
                return d;
            }
            f = a.child;
            a = f.sibling;
            d = Pg(f, {
                mode: "visible",
                children: d.children
            });
            0 === (b.mode & 1) && (d.lanes = c);
            d.return = b;
            d.sibling = null;
            null !== a && (c = b.deletions, null === c ? (b.deletions = [
                a
            ], b.flags |= 16) : c.push(a));
            b.child = d;
            b.memoizedState = null;
            return d;
        }
        function qj(a, b) {
            b = pj({
                mode: "visible",
                children: b
            }, a.mode, 0, null);
            b.return = a;
            return a.child = b;
        }
        function sj(a, b, c, d) {
            null !== d && Jg(d);
            Ug(b, a.child, null, c);
            a = qj(b, b.pendingProps.children);
            a.flags |= 2;
            b.memoizedState = null;
            return a;
        }
        function rj(a, b, c, d, e, f, g) {
            if (c) {
                if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
                if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
                f = d.fallback;
                e = b.mode;
                d = pj({
                    mode: "visible",
                    children: d.children
                }, e, 0, null);
                f = Tg(f, e, g, null);
                f.flags |= 2;
                d.return = b;
                f.return = b;
                d.sibling = f;
                b.child = d;
                0 !== (b.mode & 1) && Ug(b, a.child, null, g);
                b.child.memoizedState = nj(g);
                b.memoizedState = mj;
                return f;
            }
            if (0 === (b.mode & 1)) return sj(a, b, g, null);
            if ("$!" === e.data) {
                d = e.nextSibling && e.nextSibling.dataset;
                if (d) var h = d.dgst;
                d = h;
                f = Error(p(419));
                d = Ki(f, d, void 0);
                return sj(a, b, g, d);
            }
            h = 0 !== (g & a.childLanes);
            if (dh || h) {
                d = Q;
                if (null !== d) {
                    switch(g & -g){
                        case 4:
                            e = 2;
                            break;
                        case 16:
                            e = 8;
                            break;
                        case 64:
                        case 128:
                        case 256:
                        case 512:
                        case 1024:
                        case 2048:
                        case 4096:
                        case 8192:
                        case 16384:
                        case 32768:
                        case 65536:
                        case 131072:
                        case 262144:
                        case 524288:
                        case 1048576:
                        case 2097152:
                        case 4194304:
                        case 8388608:
                        case 16777216:
                        case 33554432:
                        case 67108864:
                            e = 32;
                            break;
                        case 536870912:
                            e = 268435456;
                            break;
                        default:
                            e = 0;
                    }
                    e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
                    0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
                }
                tj();
                d = Ki(Error(p(421)));
                return sj(a, b, g, d);
            }
            if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
            a = f.treeContext;
            yg = Lf(e.nextSibling);
            xg = b;
            I = true;
            zg = null;
            null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
            b = qj(b, d.children);
            b.flags |= 4096;
            return b;
        }
        function vj(a, b, c) {
            a.lanes |= b;
            var d = a.alternate;
            null !== d && (d.lanes |= b);
            bh(a.return, b, c);
        }
        function wj(a, b, c, d, e) {
            var f = a.memoizedState;
            null === f ? a.memoizedState = {
                isBackwards: b,
                rendering: null,
                renderingStartTime: 0,
                last: d,
                tail: c,
                tailMode: e
            } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
        }
        function xj(a, b, c) {
            var d = b.pendingProps, e = d.revealOrder, f = d.tail;
            Xi(a, b, d.children, c);
            d = L.current;
            if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
            else {
                if (null !== a && 0 !== (a.flags & 128)) a: for(a = b.child; null !== a;){
                    if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
                    else if (19 === a.tag) vj(a, c, b);
                    else if (null !== a.child) {
                        a.child.return = a;
                        a = a.child;
                        continue;
                    }
                    if (a === b) break a;
                    for(; null === a.sibling;){
                        if (null === a.return || a.return === b) break a;
                        a = a.return;
                    }
                    a.sibling.return = a.return;
                    a = a.sibling;
                }
                d &= 1;
            }
            G(L, d);
            if (0 === (b.mode & 1)) b.memoizedState = null;
            else switch(e){
                case "forwards":
                    c = b.child;
                    for(e = null; null !== c;)a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
                    c = e;
                    null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
                    wj(b, false, e, c, f);
                    break;
                case "backwards":
                    c = null;
                    e = b.child;
                    for(b.child = null; null !== e;){
                        a = e.alternate;
                        if (null !== a && null === Ch(a)) {
                            b.child = e;
                            break;
                        }
                        a = e.sibling;
                        e.sibling = c;
                        c = e;
                        e = a;
                    }
                    wj(b, true, c, null, f);
                    break;
                case "together":
                    wj(b, false, null, null, void 0);
                    break;
                default:
                    b.memoizedState = null;
            }
            return b.child;
        }
        function ij(a, b) {
            0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
        }
        function Zi(a, b, c) {
            null !== a && (b.dependencies = a.dependencies);
            rh |= b.lanes;
            if (0 === (c & b.childLanes)) return null;
            if (null !== a && b.child !== a.child) throw Error(p(153));
            if (null !== b.child) {
                a = b.child;
                c = Pg(a, a.pendingProps);
                b.child = c;
                for(c.return = b; null !== a.sibling;)a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
                c.sibling = null;
            }
            return b.child;
        }
        function yj(a, b, c) {
            switch(b.tag){
                case 3:
                    kj(b);
                    Ig();
                    break;
                case 5:
                    Ah(b);
                    break;
                case 1:
                    Zf(b.type) && cg(b);
                    break;
                case 4:
                    yh(b, b.stateNode.containerInfo);
                    break;
                case 10:
                    var d = b.type._context, e = b.memoizedProps.value;
                    G(Wg, d._currentValue);
                    d._currentValue = e;
                    break;
                case 13:
                    d = b.memoizedState;
                    if (null !== d) {
                        if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
                        if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
                        G(L, L.current & 1);
                        a = Zi(a, b, c);
                        return null !== a ? a.sibling : null;
                    }
                    G(L, L.current & 1);
                    break;
                case 19:
                    d = 0 !== (c & b.childLanes);
                    if (0 !== (a.flags & 128)) {
                        if (d) return xj(a, b, c);
                        b.flags |= 128;
                    }
                    e = b.memoizedState;
                    null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
                    G(L, L.current);
                    if (d) break;
                    else return null;
                case 22:
                case 23:
                    return b.lanes = 0, dj(a, b, c);
            }
            return Zi(a, b, c);
        }
        var zj;
        var Aj;
        var Bj;
        var Cj;
        zj = function zj(a, b) {
            for(var c = b.child; null !== c;){
                if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
                else if (4 !== c.tag && null !== c.child) {
                    c.child.return = c;
                    c = c.child;
                    continue;
                }
                if (c === b) break;
                for(; null === c.sibling;){
                    if (null === c.return || c.return === b) return;
                    c = c.return;
                }
                c.sibling.return = c.return;
                c = c.sibling;
            }
        };
        Aj = function Aj() {};
        Bj = function Bj(a, b, c, d) {
            var e = a.memoizedProps;
            if (e !== d) {
                a = b.stateNode;
                xh(uh.current);
                var f = null;
                switch(c){
                    case "input":
                        e = Ya(a, e);
                        d = Ya(a, d);
                        f = [];
                        break;
                    case "select":
                        e = A({}, e, {
                            value: void 0
                        });
                        d = A({}, d, {
                            value: void 0
                        });
                        f = [];
                        break;
                    case "textarea":
                        e = gb(a, e);
                        d = gb(a, d);
                        f = [];
                        break;
                    default:
                        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
                }
                ub(c, d);
                var g;
                c = null;
                for(l in e)if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
                    var h = e[l];
                    for(g in h)h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
                } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
                for(l in d){
                    var k = d[l];
                    h = null != e ? e[l] : void 0;
                    if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) if (h) {
                        for(g in h)!h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                        for(g in k)k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                    else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
                }
                c && (f = f || []).push("style", c);
                var l = f;
                if (b.updateQueue = l) b.flags |= 4;
            }
        };
        Cj = function Cj(a, b, c, d) {
            c !== d && (b.flags |= 4);
        };
        function Dj(a, b) {
            if (!I) switch(a.tailMode){
                case "hidden":
                    b = a.tail;
                    for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;
                    null === c ? a.tail = null : c.sibling = null;
                    break;
                case "collapsed":
                    c = a.tail;
                    for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;
                    null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
            }
        }
        function S(a) {
            var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
            if (b) for(var e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
            else for(e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
            a.subtreeFlags |= d;
            a.childLanes = c;
            return b;
        }
        function Ej(a, b, c) {
            var d = b.pendingProps;
            wg(b);
            switch(b.tag){
                case 2:
                case 16:
                case 15:
                case 0:
                case 11:
                case 7:
                case 8:
                case 12:
                case 9:
                case 14:
                    return S(b), null;
                case 1:
                    return Zf(b.type) && $f(), S(b), null;
                case 3:
                    d = b.stateNode;
                    zh();
                    E(Wf);
                    E(H);
                    Eh();
                    d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
                    if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
                    Aj(a, b);
                    S(b);
                    return null;
                case 5:
                    Bh(b);
                    var e = xh(wh.current);
                    c = b.type;
                    if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
                    else {
                        if (!d) {
                            if (null === b.stateNode) throw Error(p(166));
                            S(b);
                            return null;
                        }
                        a = xh(uh.current);
                        if (Gg(b)) {
                            d = b.stateNode;
                            c = b.type;
                            var f = b.memoizedProps;
                            d[Of] = b;
                            d[Pf] = f;
                            a = 0 !== (b.mode & 1);
                            switch(c){
                                case "dialog":
                                    D("cancel", d);
                                    D("close", d);
                                    break;
                                case "iframe":
                                case "object":
                                case "embed":
                                    D("load", d);
                                    break;
                                case "video":
                                case "audio":
                                    for(e = 0; e < lf.length; e++)D(lf[e], d);
                                    break;
                                case "source":
                                    D("error", d);
                                    break;
                                case "img":
                                case "image":
                                case "link":
                                    D("error", d);
                                    D("load", d);
                                    break;
                                case "details":
                                    D("toggle", d);
                                    break;
                                case "input":
                                    Za(d, f);
                                    D("invalid", d);
                                    break;
                                case "select":
                                    d._wrapperState = {
                                        wasMultiple: !!f.multiple
                                    };
                                    D("invalid", d);
                                    break;
                                case "textarea":
                                    hb(d, f), D("invalid", d);
                            }
                            ub(c, f);
                            e = null;
                            for(var g in f)if (f.hasOwnProperty(g)) {
                                var h = f[g];
                                "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = [
                                    "children",
                                    h
                                ]) : "number" === typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = [
                                    "children",
                                    "" + h
                                ]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
                            }
                            switch(c){
                                case "input":
                                    Va(d);
                                    db(d, f, true);
                                    break;
                                case "textarea":
                                    Va(d);
                                    jb(d);
                                    break;
                                case "select":
                                case "option":
                                    break;
                                default:
                                    "function" === typeof f.onClick && (d.onclick = Bf);
                            }
                            d = e;
                            b.updateQueue = d;
                            null !== d && (b.flags |= 4);
                        } else {
                            g = 9 === e.nodeType ? e : e.ownerDocument;
                            "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                            "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                                is: d.is
                            }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                            a[Of] = b;
                            a[Pf] = d;
                            zj(a, b, false, false);
                            b.stateNode = a;
                            a: {
                                g = vb(c, d);
                                switch(c){
                                    case "dialog":
                                        D("cancel", a);
                                        D("close", a);
                                        e = d;
                                        break;
                                    case "iframe":
                                    case "object":
                                    case "embed":
                                        D("load", a);
                                        e = d;
                                        break;
                                    case "video":
                                    case "audio":
                                        for(e = 0; e < lf.length; e++)D(lf[e], a);
                                        e = d;
                                        break;
                                    case "source":
                                        D("error", a);
                                        e = d;
                                        break;
                                    case "img":
                                    case "image":
                                    case "link":
                                        D("error", a);
                                        D("load", a);
                                        e = d;
                                        break;
                                    case "details":
                                        D("toggle", a);
                                        e = d;
                                        break;
                                    case "input":
                                        Za(a, d);
                                        e = Ya(a, d);
                                        D("invalid", a);
                                        break;
                                    case "option":
                                        e = d;
                                        break;
                                    case "select":
                                        a._wrapperState = {
                                            wasMultiple: !!d.multiple
                                        };
                                        e = A({}, d, {
                                            value: void 0
                                        });
                                        D("invalid", a);
                                        break;
                                    case "textarea":
                                        hb(a, d);
                                        e = gb(a, d);
                                        D("invalid", a);
                                        break;
                                    default:
                                        e = d;
                                }
                                ub(c, e);
                                h = e;
                                for(f in h)if (h.hasOwnProperty(f)) {
                                    var k = h[f];
                                    "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
                                }
                                switch(c){
                                    case "input":
                                        Va(a);
                                        db(a, d, false);
                                        break;
                                    case "textarea":
                                        Va(a);
                                        jb(a);
                                        break;
                                    case "option":
                                        null != d.value && a.setAttribute("value", "" + Sa(d.value));
                                        break;
                                    case "select":
                                        a.multiple = !!d.multiple;
                                        f = d.value;
                                        null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, true);
                                        break;
                                    default:
                                        "function" === typeof e.onClick && (a.onclick = Bf);
                                }
                                switch(c){
                                    case "button":
                                    case "input":
                                    case "select":
                                    case "textarea":
                                        d = !!d.autoFocus;
                                        break a;
                                    case "img":
                                        d = true;
                                        break a;
                                    default:
                                        d = false;
                                }
                            }
                            d && (b.flags |= 4);
                        }
                        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
                    }
                    S(b);
                    return null;
                case 6:
                    if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
                    else {
                        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
                        c = xh(wh.current);
                        xh(uh.current);
                        if (Gg(b)) {
                            d = b.stateNode;
                            c = b.memoizedProps;
                            d[Of] = b;
                            if (f = d.nodeValue !== c) {
                                if (a = xg, null !== a) switch(a.tag){
                                    case 3:
                                        Af(d.nodeValue, c, 0 !== (a.mode & 1));
                                        break;
                                    case 5:
                                        true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                                }
                            }
                            f && (b.flags |= 4);
                        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
                    }
                    S(b);
                    return null;
                case 13:
                    E(L);
                    d = b.memoizedState;
                    if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
                        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = false;
                        else if (f = Gg(b), null !== d && null !== d.dehydrated) {
                            if (null === a) {
                                if (!f) throw Error(p(318));
                                f = b.memoizedState;
                                f = null !== f ? f.dehydrated : null;
                                if (!f) throw Error(p(317));
                                f[Of] = b;
                            } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                            S(b);
                            f = false;
                        } else null !== zg && (Fj(zg), zg = null), f = true;
                        if (!f) return b.flags & 65536 ? b : null;
                    }
                    if (0 !== (b.flags & 128)) return b.lanes = c, b;
                    d = null !== d;
                    d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
                    null !== b.updateQueue && (b.flags |= 4);
                    S(b);
                    return null;
                case 4:
                    return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
                case 10:
                    return ah(b.type._context), S(b), null;
                case 17:
                    return Zf(b.type) && $f(), S(b), null;
                case 19:
                    E(L);
                    f = b.memoizedState;
                    if (null === f) return S(b), null;
                    d = 0 !== (b.flags & 128);
                    g = f.rendering;
                    if (null === g) if (d) Dj(f, false);
                    else {
                        if (0 !== T || null !== a && 0 !== (a.flags & 128)) for(a = b.child; null !== a;){
                            g = Ch(a);
                            if (null !== g) {
                                b.flags |= 128;
                                Dj(f, false);
                                d = g.updateQueue;
                                null !== d && (b.updateQueue = d, b.flags |= 4);
                                b.subtreeFlags = 0;
                                d = c;
                                for(c = b.child; null !== c;)f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                                    lanes: a.lanes,
                                    firstContext: a.firstContext
                                }), c = c.sibling;
                                G(L, L.current & 1 | 2);
                                return b.child;
                            }
                            a = a.sibling;
                        }
                        null !== f.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
                    }
                    else {
                        if (!d) if (a = Ch(g), null !== a) {
                            if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
                        } else 2 * B() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
                        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
                    }
                    if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
                    S(b);
                    return null;
                case 22:
                case 23:
                    return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
                case 24:
                    return null;
                case 25:
                    return null;
            }
            throw Error(p(156, b.tag));
        }
        function Ij(a, b) {
            wg(b);
            switch(b.tag){
                case 1:
                    return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
                case 3:
                    return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
                case 5:
                    return Bh(b), null;
                case 13:
                    E(L);
                    a = b.memoizedState;
                    if (null !== a && null !== a.dehydrated) {
                        if (null === b.alternate) throw Error(p(340));
                        Ig();
                    }
                    a = b.flags;
                    return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
                case 19:
                    return E(L), null;
                case 4:
                    return zh(), null;
                case 10:
                    return ah(b.type._context), null;
                case 22:
                case 23:
                    return Hj(), null;
                case 24:
                    return null;
                default:
                    return null;
            }
        }
        var Jj = false;
        var U = false;
        var Kj = "function" === typeof WeakSet ? WeakSet : Set;
        var V = null;
        function Lj(a, b) {
            var c = a.ref;
            if (null !== c) if ("function" === typeof c) try {
                c(null);
            } catch (d) {
                W(a, b, d);
            }
            else c.current = null;
        }
        function Mj(a, b, c) {
            try {
                c();
            } catch (d) {
                W(a, b, d);
            }
        }
        var Nj = false;
        function Oj(a, b) {
            Cf = dd;
            a = Me();
            if (Ne(a)) {
                if ("selectionStart" in a) var c = {
                    start: a.selectionStart,
                    end: a.selectionEnd
                };
                else a: {
                    c = (c = a.ownerDocument) && c.defaultView || window;
                    var d = c.getSelection && c.getSelection();
                    if (d && 0 !== d.rangeCount) {
                        c = d.anchorNode;
                        var e = d.anchorOffset, f = d.focusNode;
                        d = d.focusOffset;
                        try {
                            c.nodeType, f.nodeType;
                        } catch (F) {
                            c = null;
                            break a;
                        }
                        var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
                        b: for(;;){
                            for(var y;;){
                                q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                                q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                                3 === q.nodeType && (g += q.nodeValue.length);
                                if (null === (y = q.firstChild)) break;
                                r = q;
                                q = y;
                            }
                            for(;;){
                                if (q === a) break b;
                                r === c && ++l === e && (h = g);
                                r === f && ++m === d && (k = g);
                                if (null !== (y = q.nextSibling)) break;
                                q = r;
                                r = q.parentNode;
                            }
                            q = y;
                        }
                        c = -1 === h || -1 === k ? null : {
                            start: h,
                            end: k
                        };
                    } else c = null;
                }
                c = c || {
                    start: 0,
                    end: 0
                };
            } else c = null;
            Df = {
                focusedElem: a,
                selectionRange: c
            };
            dd = false;
            for(V = b; null !== V;)if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
            else for(; null !== V;){
                b = V;
                try {
                    var n = b.alternate;
                    if (0 !== (b.flags & 1024)) switch(b.tag){
                        case 0:
                        case 11:
                        case 15:
                            break;
                        case 1:
                            if (null !== n) {
                                var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
                                x.__reactInternalSnapshotBeforeUpdate = w;
                            }
                            break;
                        case 3:
                            var u = b.stateNode.containerInfo;
                            1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                            break;
                        case 5:
                        case 6:
                        case 4:
                        case 17:
                            break;
                        default:
                            throw Error(p(163));
                    }
                } catch (F) {
                    W(b, b.return, F);
                }
                a = b.sibling;
                if (null !== a) {
                    a.return = b.return;
                    V = a;
                    break;
                }
                V = b.return;
            }
            n = Nj;
            Nj = false;
            return n;
        }
        function Pj(a, b, c) {
            var d = b.updateQueue;
            d = null !== d ? d.lastEffect : null;
            if (null !== d) {
                var e = d = d.next;
                do {
                    if ((e.tag & a) === a) {
                        var f = e.destroy;
                        e.destroy = void 0;
                        void 0 !== f && Mj(b, c, f);
                    }
                    e = e.next;
                }while (e !== d);
            }
        }
        function Qj(a, b) {
            b = b.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                var c = b = b.next;
                do {
                    if ((c.tag & a) === a) {
                        var d = c.create;
                        c.destroy = d();
                    }
                    c = c.next;
                }while (c !== b);
            }
        }
        function Rj(a) {
            var b = a.ref;
            if (null !== b) {
                var c = a.stateNode;
                switch(a.tag){
                    case 5:
                        a = c;
                        break;
                    default:
                        a = c;
                }
                "function" === typeof b ? b(a) : b.current = a;
            }
        }
        function Sj(a) {
            var b = a.alternate;
            null !== b && (a.alternate = null, Sj(b));
            a.child = null;
            a.deletions = null;
            a.sibling = null;
            5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
            a.stateNode = null;
            a.return = null;
            a.dependencies = null;
            a.memoizedProps = null;
            a.memoizedState = null;
            a.pendingProps = null;
            a.stateNode = null;
            a.updateQueue = null;
        }
        function Tj(a) {
            return 5 === a.tag || 3 === a.tag || 4 === a.tag;
        }
        function Uj(a) {
            a: for(;;){
                for(; null === a.sibling;){
                    if (null === a.return || Tj(a.return)) return null;
                    a = a.return;
                }
                a.sibling.return = a.return;
                for(a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;){
                    if (a.flags & 2) continue a;
                    if (null === a.child || 4 === a.tag) continue a;
                    else a.child.return = a, a = a.child;
                }
                if (!(a.flags & 2)) return a.stateNode;
            }
        }
        function Vj(a, b, c) {
            var d = a.tag;
            if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
            else if (4 !== d && (a = a.child, null !== a)) for(Vj(a, b, c), a = a.sibling; null !== a;)Vj(a, b, c), a = a.sibling;
        }
        function Wj(a, b, c) {
            var d = a.tag;
            if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
            else if (4 !== d && (a = a.child, null !== a)) for(Wj(a, b, c), a = a.sibling; null !== a;)Wj(a, b, c), a = a.sibling;
        }
        var X = null;
        var Xj = false;
        function Yj(a, b, c) {
            for(c = c.child; null !== c;)Zj(a, b, c), c = c.sibling;
        }
        function Zj(a, b, c) {
            if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
                lc.onCommitFiberUnmount(kc, c);
            } catch (h) {}
            switch(c.tag){
                case 5:
                    U || Lj(c, b);
                case 6:
                    var d = X, e = Xj;
                    X = null;
                    Yj(a, b, c);
                    X = d;
                    Xj = e;
                    null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
                    break;
                case 18:
                    null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
                    break;
                case 4:
                    d = X;
                    e = Xj;
                    X = c.stateNode.containerInfo;
                    Xj = true;
                    Yj(a, b, c);
                    X = d;
                    Xj = e;
                    break;
                case 0:
                case 11:
                case 14:
                case 15:
                    if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
                        e = d = d.next;
                        do {
                            var f = e, g = f.destroy;
                            f = f.tag;
                            void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
                            e = e.next;
                        }while (e !== d);
                    }
                    Yj(a, b, c);
                    break;
                case 1:
                    if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
                        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
                    } catch (h) {
                        W(c, b, h);
                    }
                    Yj(a, b, c);
                    break;
                case 21:
                    Yj(a, b, c);
                    break;
                case 22:
                    c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
                    break;
                default:
                    Yj(a, b, c);
            }
        }
        function ak(a) {
            var b = a.updateQueue;
            if (null !== b) {
                a.updateQueue = null;
                var c = a.stateNode;
                null === c && (c = a.stateNode = new Kj());
                b.forEach(function(b2) {
                    var d = bk.bind(null, a, b2);
                    c.has(b2) || (c.add(b2), b2.then(d, d));
                });
            }
        }
        function ck(a, b) {
            var c = b.deletions;
            if (null !== c) for(var d = 0; d < c.length; d++){
                var e = c[d];
                try {
                    var f = a, g = b, h = g;
                    a: for(; null !== h;){
                        switch(h.tag){
                            case 5:
                                X = h.stateNode;
                                Xj = false;
                                break a;
                            case 3:
                                X = h.stateNode.containerInfo;
                                Xj = true;
                                break a;
                            case 4:
                                X = h.stateNode.containerInfo;
                                Xj = true;
                                break a;
                        }
                        h = h.return;
                    }
                    if (null === X) throw Error(p(160));
                    Zj(f, g, e);
                    X = null;
                    Xj = false;
                    var k = e.alternate;
                    null !== k && (k.return = null);
                    e.return = null;
                } catch (l) {
                    W(e, b, l);
                }
            }
            if (b.subtreeFlags & 12854) for(b = b.child; null !== b;)dk(b, a), b = b.sibling;
        }
        function dk(a, b) {
            var c = a.alternate, d = a.flags;
            switch(a.tag){
                case 0:
                case 11:
                case 14:
                case 15:
                    ck(b, a);
                    ek(a);
                    if (d & 4) {
                        try {
                            Pj(3, a, a.return), Qj(3, a);
                        } catch (t) {
                            W(a, a.return, t);
                        }
                        try {
                            Pj(5, a, a.return);
                        } catch (t) {
                            W(a, a.return, t);
                        }
                    }
                    break;
                case 1:
                    ck(b, a);
                    ek(a);
                    d & 512 && null !== c && Lj(c, c.return);
                    break;
                case 5:
                    ck(b, a);
                    ek(a);
                    d & 512 && null !== c && Lj(c, c.return);
                    if (a.flags & 32) {
                        var e = a.stateNode;
                        try {
                            ob(e, "");
                        } catch (t) {
                            W(a, a.return, t);
                        }
                    }
                    if (d & 4 && (e = a.stateNode, null != e)) {
                        var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
                        a.updateQueue = null;
                        if (null !== k) try {
                            "input" === h && "radio" === f.type && null != f.name && ab(e, f);
                            vb(h, g);
                            var l = vb(h, f);
                            for(g = 0; g < k.length; g += 2){
                                var m = k[g], q = k[g + 1];
                                "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
                            }
                            switch(h){
                                case "input":
                                    bb(e, f);
                                    break;
                                case "textarea":
                                    ib(e, f);
                                    break;
                                case "select":
                                    var r = e._wrapperState.wasMultiple;
                                    e._wrapperState.wasMultiple = !!f.multiple;
                                    var y = f.value;
                                    null != y ? fb(e, !!f.multiple, y, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, true) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
                            }
                            e[Pf] = f;
                        } catch (t) {
                            W(a, a.return, t);
                        }
                    }
                    break;
                case 6:
                    ck(b, a);
                    ek(a);
                    if (d & 4) {
                        if (null === a.stateNode) throw Error(p(162));
                        e = a.stateNode;
                        f = a.memoizedProps;
                        try {
                            e.nodeValue = f;
                        } catch (t) {
                            W(a, a.return, t);
                        }
                    }
                    break;
                case 3:
                    ck(b, a);
                    ek(a);
                    if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
                        bd(b.containerInfo);
                    } catch (t) {
                        W(a, a.return, t);
                    }
                    break;
                case 4:
                    ck(b, a);
                    ek(a);
                    break;
                case 13:
                    ck(b, a);
                    ek(a);
                    e = a.child;
                    e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
                    d & 4 && ak(a);
                    break;
                case 22:
                    m = null !== c && null !== c.memoizedState;
                    a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a);
                    ek(a);
                    if (d & 8192) {
                        l = null !== a.memoizedState;
                        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for(V = a, m = a.child; null !== m;){
                            for(q = V = m; null !== V;){
                                r = V;
                                y = r.child;
                                switch(r.tag){
                                    case 0:
                                    case 11:
                                    case 14:
                                    case 15:
                                        Pj(4, r, r.return);
                                        break;
                                    case 1:
                                        Lj(r, r.return);
                                        var n = r.stateNode;
                                        if ("function" === typeof n.componentWillUnmount) {
                                            d = r;
                                            c = r.return;
                                            try {
                                                b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                                            } catch (t) {
                                                W(d, c, t);
                                            }
                                        }
                                        break;
                                    case 5:
                                        Lj(r, r.return);
                                        break;
                                    case 22:
                                        if (null !== r.memoizedState) {
                                            gk(q);
                                            continue;
                                        }
                                }
                                null !== y ? (y.return = r, V = y) : gk(q);
                            }
                            m = m.sibling;
                        }
                        a: for(m = null, q = a;;){
                            if (5 === q.tag) {
                                if (null === m) {
                                    m = q;
                                    try {
                                        e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                                    } catch (t) {
                                        W(a, a.return, t);
                                    }
                                }
                            } else if (6 === q.tag) {
                                if (null === m) try {
                                    q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                                } catch (t) {
                                    W(a, a.return, t);
                                }
                            } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                                q.child.return = q;
                                q = q.child;
                                continue;
                            }
                            if (q === a) break a;
                            for(; null === q.sibling;){
                                if (null === q.return || q.return === a) break a;
                                m === q && (m = null);
                                q = q.return;
                            }
                            m === q && (m = null);
                            q.sibling.return = q.return;
                            q = q.sibling;
                        }
                    }
                    break;
                case 19:
                    ck(b, a);
                    ek(a);
                    d & 4 && ak(a);
                    break;
                case 21:
                    break;
                default:
                    ck(b, a), ek(a);
            }
        }
        function ek(a) {
            var b = a.flags;
            if (b & 2) {
                try {
                    a: {
                        for(var c = a.return; null !== c;){
                            if (Tj(c)) {
                                var d = c;
                                break a;
                            }
                            c = c.return;
                        }
                        throw Error(p(160));
                    }
                    switch(d.tag){
                        case 5:
                            var e = d.stateNode;
                            d.flags & 32 && (ob(e, ""), d.flags &= -33);
                            var f = Uj(a);
                            Wj(a, f, e);
                            break;
                        case 3:
                        case 4:
                            var g = d.stateNode.containerInfo, h = Uj(a);
                            Vj(a, h, g);
                            break;
                        default:
                            throw Error(p(161));
                    }
                } catch (k) {
                    W(a, a.return, k);
                }
                a.flags &= -3;
            }
            b & 4096 && (a.flags &= -4097);
        }
        function hk(a, b, c) {
            V = a;
            ik(a, b, c);
        }
        function ik(a, b, c) {
            for(var d = 0 !== (a.mode & 1); null !== V;){
                var e = V, f = e.child;
                if (22 === e.tag && d) {
                    var g = null !== e.memoizedState || Jj;
                    if (!g) {
                        var h = e.alternate, k = null !== h && null !== h.memoizedState || U;
                        h = Jj;
                        var l = U;
                        Jj = g;
                        if ((U = k) && !l) for(V = e; null !== V;)g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k ? (k.return = g, V = k) : jk(e);
                        for(; null !== f;)V = f, ik(f, b, c), f = f.sibling;
                        V = e;
                        Jj = h;
                        U = l;
                    }
                    kk(a, b, c);
                } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a, b, c);
            }
        }
        function kk(a) {
            for(; null !== V;){
                var b = V;
                if (0 !== (b.flags & 8772)) {
                    var c = b.alternate;
                    try {
                        if (0 !== (b.flags & 8772)) switch(b.tag){
                            case 0:
                            case 11:
                            case 15:
                                U || Qj(5, b);
                                break;
                            case 1:
                                var d = b.stateNode;
                                if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
                                else {
                                    var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                                    d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                                }
                                var f = b.updateQueue;
                                null !== f && sh(b, f, d);
                                break;
                            case 3:
                                var g = b.updateQueue;
                                if (null !== g) {
                                    c = null;
                                    if (null !== b.child) switch(b.child.tag){
                                        case 5:
                                            c = b.child.stateNode;
                                            break;
                                        case 1:
                                            c = b.child.stateNode;
                                    }
                                    sh(b, g, c);
                                }
                                break;
                            case 5:
                                var h = b.stateNode;
                                if (null === c && b.flags & 4) {
                                    c = h;
                                    var k = b.memoizedProps;
                                    switch(b.type){
                                        case "button":
                                        case "input":
                                        case "select":
                                        case "textarea":
                                            k.autoFocus && c.focus();
                                            break;
                                        case "img":
                                            k.src && (c.src = k.src);
                                    }
                                }
                                break;
                            case 6:
                                break;
                            case 4:
                                break;
                            case 12:
                                break;
                            case 13:
                                if (null === b.memoizedState) {
                                    var l = b.alternate;
                                    if (null !== l) {
                                        var m = l.memoizedState;
                                        if (null !== m) {
                                            var q = m.dehydrated;
                                            null !== q && bd(q);
                                        }
                                    }
                                }
                                break;
                            case 19:
                            case 17:
                            case 21:
                            case 22:
                            case 23:
                            case 25:
                                break;
                            default:
                                throw Error(p(163));
                        }
                        U || b.flags & 512 && Rj(b);
                    } catch (r) {
                        W(b, b.return, r);
                    }
                }
                if (b === a) {
                    V = null;
                    break;
                }
                c = b.sibling;
                if (null !== c) {
                    c.return = b.return;
                    V = c;
                    break;
                }
                V = b.return;
            }
        }
        function gk(a) {
            for(; null !== V;){
                var b = V;
                if (b === a) {
                    V = null;
                    break;
                }
                var c = b.sibling;
                if (null !== c) {
                    c.return = b.return;
                    V = c;
                    break;
                }
                V = b.return;
            }
        }
        function jk(a) {
            for(; null !== V;){
                var b = V;
                try {
                    switch(b.tag){
                        case 0:
                        case 11:
                        case 15:
                            var c = b.return;
                            try {
                                Qj(4, b);
                            } catch (k) {
                                W(b, c, k);
                            }
                            break;
                        case 1:
                            var d = b.stateNode;
                            if ("function" === typeof d.componentDidMount) {
                                var e = b.return;
                                try {
                                    d.componentDidMount();
                                } catch (k) {
                                    W(b, e, k);
                                }
                            }
                            var f = b.return;
                            try {
                                Rj(b);
                            } catch (k) {
                                W(b, f, k);
                            }
                            break;
                        case 5:
                            var g = b.return;
                            try {
                                Rj(b);
                            } catch (k) {
                                W(b, g, k);
                            }
                    }
                } catch (k) {
                    W(b, b.return, k);
                }
                if (b === a) {
                    V = null;
                    break;
                }
                var h = b.sibling;
                if (null !== h) {
                    h.return = b.return;
                    V = h;
                    break;
                }
                V = b.return;
            }
        }
        var lk = Math.ceil;
        var mk = ua.ReactCurrentDispatcher;
        var nk = ua.ReactCurrentOwner;
        var ok = ua.ReactCurrentBatchConfig;
        var K = 0;
        var Q = null;
        var Y = null;
        var Z = 0;
        var fj = 0;
        var ej = Uf(0);
        var T = 0;
        var pk = null;
        var rh = 0;
        var qk = 0;
        var rk = 0;
        var sk = null;
        var tk = null;
        var fk = 0;
        var Gj = Infinity;
        var uk = null;
        var Oi = false;
        var Pi = null;
        var Ri = null;
        var vk = false;
        var wk = null;
        var xk = 0;
        var yk = 0;
        var zk = null;
        var Ak = -1;
        var Bk = 0;
        function R() {
            return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
        }
        function yi(a) {
            if (0 === (a.mode & 1)) return 1;
            if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
            if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
            a = C;
            if (0 !== a) return a;
            a = window.event;
            a = void 0 === a ? 16 : jd(a.type);
            return a;
        }
        function gi(a, b, c, d) {
            if (50 < yk) throw yk = 0, zk = null, Error(p(185));
            Ac(a, c, d);
            if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
        }
        function Dk(a, b) {
            var c = a.callbackNode;
            wc(a, b);
            var d = uc(a, a === Q ? Z : 0);
            if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
            else if (b = d & -d, a.callbackPriority !== b) {
                null != c && bc(c);
                if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
                    0 === (K & 6) && jg();
                }), c = null;
                else {
                    switch(Dc(d)){
                        case 1:
                            c = fc;
                            break;
                        case 4:
                            c = gc;
                            break;
                        case 16:
                            c = hc;
                            break;
                        case 536870912:
                            c = jc;
                            break;
                        default:
                            c = hc;
                    }
                    c = Fk(c, Gk.bind(null, a));
                }
                a.callbackPriority = b;
                a.callbackNode = c;
            }
        }
        function Gk(a, b) {
            Ak = -1;
            Bk = 0;
            if (0 !== (K & 6)) throw Error(p(327));
            var c = a.callbackNode;
            if (Hk() && a.callbackNode !== c) return null;
            var d = uc(a, a === Q ? Z : 0);
            if (0 === d) return null;
            if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
            else {
                b = d;
                var e = K;
                K |= 2;
                var f = Jk();
                if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
                do try {
                    Lk();
                    break;
                } catch (h) {
                    Mk(a, h);
                }
                while (1);
                $g();
                mk.current = f;
                K = e;
                null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
            }
            if (0 !== b) {
                2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
                if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
                if (6 === b) Ck(a, d);
                else {
                    e = a.current.alternate;
                    if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
                    a.finishedWork = e;
                    a.finishedLanes = d;
                    switch(b){
                        case 0:
                        case 1:
                            throw Error(p(345));
                        case 2:
                            Pk(a, tk, uk);
                            break;
                        case 3:
                            Ck(a, d);
                            if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
                                if (0 !== uc(a, 0)) break;
                                e = a.suspendedLanes;
                                if ((e & d) !== d) {
                                    R();
                                    a.pingedLanes |= a.suspendedLanes & e;
                                    break;
                                }
                                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                                break;
                            }
                            Pk(a, tk, uk);
                            break;
                        case 4:
                            Ck(a, d);
                            if ((d & 4194240) === d) break;
                            b = a.eventTimes;
                            for(e = -1; 0 < d;){
                                var g = 31 - oc(d);
                                f = 1 << g;
                                g = b[g];
                                g > e && (e = g);
                                d &= ~f;
                            }
                            d = e;
                            d = B() - d;
                            d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
                            if (10 < d) {
                                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                                break;
                            }
                            Pk(a, tk, uk);
                            break;
                        case 5:
                            Pk(a, tk, uk);
                            break;
                        default:
                            throw Error(p(329));
                    }
                }
            }
            Dk(a, B());
            return a.callbackNode === c ? Gk.bind(null, a) : null;
        }
        function Nk(a, b) {
            var c = sk;
            a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
            a = Ik(a, b);
            2 !== a && (b = tk, tk = c, null !== b && Fj(b));
            return a;
        }
        function Fj(a) {
            null === tk ? tk = a : tk.push.apply(tk, a);
        }
        function Ok(a) {
            for(var b = a;;){
                if (b.flags & 16384) {
                    var c = b.updateQueue;
                    if (null !== c && (c = c.stores, null !== c)) for(var d = 0; d < c.length; d++){
                        var e = c[d], f = e.getSnapshot;
                        e = e.value;
                        try {
                            if (!He(f(), e)) return false;
                        } catch (g) {
                            return false;
                        }
                    }
                }
                c = b.child;
                if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
                else {
                    if (b === a) break;
                    for(; null === b.sibling;){
                        if (null === b.return || b.return === a) return true;
                        b = b.return;
                    }
                    b.sibling.return = b.return;
                    b = b.sibling;
                }
            }
            return true;
        }
        function Ck(a, b) {
            b &= ~rk;
            b &= ~qk;
            a.suspendedLanes |= b;
            a.pingedLanes &= ~b;
            for(a = a.expirationTimes; 0 < b;){
                var c = 31 - oc(b), d = 1 << c;
                a[c] = -1;
                b &= ~d;
            }
        }
        function Ek(a) {
            if (0 !== (K & 6)) throw Error(p(327));
            Hk();
            var b = uc(a, 0);
            if (0 === (b & 1)) return Dk(a, B()), null;
            var c = Ik(a, b);
            if (0 !== a.tag && 2 === c) {
                var d = xc(a);
                0 !== d && (b = d, c = Nk(a, d));
            }
            if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
            if (6 === c) throw Error(p(345));
            a.finishedWork = a.current.alternate;
            a.finishedLanes = b;
            Pk(a, tk, uk);
            Dk(a, B());
            return null;
        }
        function Qk(a, b) {
            var c = K;
            K |= 1;
            try {
                return a(b);
            } finally{
                K = c, 0 === K && (Gj = B() + 500, fg && jg());
            }
        }
        function Rk(a) {
            null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
            var b = K;
            K |= 1;
            var c = ok.transition, d = C;
            try {
                if (ok.transition = null, C = 1, a) return a();
            } finally{
                C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
            }
        }
        function Hj() {
            fj = ej.current;
            E(ej);
        }
        function Kk(a, b) {
            a.finishedWork = null;
            a.finishedLanes = 0;
            var c = a.timeoutHandle;
            -1 !== c && (a.timeoutHandle = -1, Gf(c));
            if (null !== Y) for(c = Y.return; null !== c;){
                var d = c;
                wg(d);
                switch(d.tag){
                    case 1:
                        d = d.type.childContextTypes;
                        null !== d && void 0 !== d && $f();
                        break;
                    case 3:
                        zh();
                        E(Wf);
                        E(H);
                        Eh();
                        break;
                    case 5:
                        Bh(d);
                        break;
                    case 4:
                        zh();
                        break;
                    case 13:
                        E(L);
                        break;
                    case 19:
                        E(L);
                        break;
                    case 10:
                        ah(d.type._context);
                        break;
                    case 22:
                    case 23:
                        Hj();
                }
                c = c.return;
            }
            Q = a;
            Y = a = Pg(a.current, null);
            Z = fj = b;
            T = 0;
            pk = null;
            rk = qk = rh = 0;
            tk = sk = null;
            if (null !== fh) {
                for(b = 0; b < fh.length; b++)if (c = fh[b], d = c.interleaved, null !== d) {
                    c.interleaved = null;
                    var e = d.next, f = c.pending;
                    if (null !== f) {
                        var g = f.next;
                        f.next = e;
                        d.next = g;
                    }
                    c.pending = d;
                }
                fh = null;
            }
            return a;
        }
        function Mk(a, b) {
            do {
                var c = Y;
                try {
                    $g();
                    Fh.current = Rh;
                    if (Ih) {
                        for(var d = M.memoizedState; null !== d;){
                            var e = d.queue;
                            null !== e && (e.pending = null);
                            d = d.next;
                        }
                        Ih = false;
                    }
                    Hh = 0;
                    O = N = M = null;
                    Jh = false;
                    Kh = 0;
                    nk.current = null;
                    if (null === c || null === c.return) {
                        T = 1;
                        pk = b;
                        Y = null;
                        break;
                    }
                    a: {
                        var f = a, g = c.return, h = c, k = b;
                        b = Z;
                        h.flags |= 32768;
                        if (null !== k && "object" === (typeof k === "undefined" ? "undefined" : _type_of(k)) && "function" === typeof k.then) {
                            var l = k, m = h, q = m.tag;
                            if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                                var r = m.alternate;
                                r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                            }
                            var y = Ui(g);
                            if (null !== y) {
                                y.flags &= -257;
                                Vi(y, g, h, f, b);
                                y.mode & 1 && Si(f, l, b);
                                b = y;
                                k = l;
                                var n = b.updateQueue;
                                if (null === n) {
                                    var t = /* @__PURE__ */ new Set();
                                    t.add(k);
                                    b.updateQueue = t;
                                } else n.add(k);
                                break a;
                            } else {
                                if (0 === (b & 1)) {
                                    Si(f, l, b);
                                    tj();
                                    break a;
                                }
                                k = Error(p(426));
                            }
                        } else if (I && h.mode & 1) {
                            var J = Ui(g);
                            if (null !== J) {
                                0 === (J.flags & 65536) && (J.flags |= 256);
                                Vi(J, g, h, f, b);
                                Jg(Ji(k, h));
                                break a;
                            }
                        }
                        f = k = Ji(k, h);
                        4 !== T && (T = 2);
                        null === sk ? sk = [
                            f
                        ] : sk.push(f);
                        f = g;
                        do {
                            switch(f.tag){
                                case 3:
                                    f.flags |= 65536;
                                    b &= -b;
                                    f.lanes |= b;
                                    var x = Ni(f, k, b);
                                    ph(f, x);
                                    break a;
                                case 1:
                                    h = k;
                                    var w = f.type, u = f.stateNode;
                                    if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Ri || !Ri.has(u)))) {
                                        f.flags |= 65536;
                                        b &= -b;
                                        f.lanes |= b;
                                        var F = Qi(f, h, b);
                                        ph(f, F);
                                        break a;
                                    }
                            }
                            f = f.return;
                        }while (null !== f);
                    }
                    Sk(c);
                } catch (na) {
                    b = na;
                    Y === c && null !== c && (Y = c = c.return);
                    continue;
                }
                break;
            }while (1);
        }
        function Jk() {
            var a = mk.current;
            mk.current = Rh;
            return null === a ? Rh : a;
        }
        function tj() {
            if (0 === T || 3 === T || 2 === T) T = 4;
            null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
        }
        function Ik(a, b) {
            var c = K;
            K |= 2;
            var d = Jk();
            if (Q !== a || Z !== b) uk = null, Kk(a, b);
            do try {
                Tk();
                break;
            } catch (e) {
                Mk(a, e);
            }
            while (1);
            $g();
            K = c;
            mk.current = d;
            if (null !== Y) throw Error(p(261));
            Q = null;
            Z = 0;
            return T;
        }
        function Tk() {
            for(; null !== Y;)Uk(Y);
        }
        function Lk() {
            for(; null !== Y && !cc();)Uk(Y);
        }
        function Uk(a) {
            var b = Vk(a.alternate, a, fj);
            a.memoizedProps = a.pendingProps;
            null === b ? Sk(a) : Y = b;
            nk.current = null;
        }
        function Sk(a) {
            var b = a;
            do {
                var c = b.alternate;
                a = b.return;
                if (0 === (b.flags & 32768)) {
                    if (c = Ej(c, b, fj), null !== c) {
                        Y = c;
                        return;
                    }
                } else {
                    c = Ij(c, b);
                    if (null !== c) {
                        c.flags &= 32767;
                        Y = c;
                        return;
                    }
                    if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
                    else {
                        T = 6;
                        Y = null;
                        return;
                    }
                }
                b = b.sibling;
                if (null !== b) {
                    Y = b;
                    return;
                }
                Y = b = a;
            }while (null !== b);
            0 === T && (T = 5);
        }
        function Pk(a, b, c) {
            var d = C, e = ok.transition;
            try {
                ok.transition = null, C = 1, Wk(a, b, c, d);
            } finally{
                ok.transition = e, C = d;
            }
            return null;
        }
        function Wk(a, b, c, d) {
            do Hk();
            while (null !== wk);
            if (0 !== (K & 6)) throw Error(p(327));
            c = a.finishedWork;
            var e = a.finishedLanes;
            if (null === c) return null;
            a.finishedWork = null;
            a.finishedLanes = 0;
            if (c === a.current) throw Error(p(177));
            a.callbackNode = null;
            a.callbackPriority = 0;
            var f = c.lanes | c.childLanes;
            Bc(a, f);
            a === Q && (Y = Q = null, Z = 0);
            0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
                Hk();
                return null;
            }));
            f = 0 !== (c.flags & 15990);
            if (0 !== (c.subtreeFlags & 15990) || f) {
                f = ok.transition;
                ok.transition = null;
                var g = C;
                C = 1;
                var h = K;
                K |= 4;
                nk.current = null;
                Oj(a, c);
                dk(c, a);
                Oe(Df);
                dd = !!Cf;
                Df = Cf = null;
                a.current = c;
                hk(c, a, e);
                dc();
                K = h;
                C = g;
                ok.transition = f;
            } else a.current = c;
            vk && (vk = false, wk = a, xk = e);
            f = a.pendingLanes;
            0 === f && (Ri = null);
            mc(c.stateNode, d);
            Dk(a, B());
            if (null !== b) for(d = a.onRecoverableError, c = 0; c < b.length; c++)e = b[c], d(e.value, {
                componentStack: e.stack,
                digest: e.digest
            });
            if (Oi) throw Oi = false, a = Pi, Pi = null, a;
            0 !== (xk & 1) && 0 !== a.tag && Hk();
            f = a.pendingLanes;
            0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
            jg();
            return null;
        }
        function Hk() {
            if (null !== wk) {
                var a = Dc(xk), b = ok.transition, c = C;
                try {
                    ok.transition = null;
                    C = 16 > a ? 16 : a;
                    if (null === wk) var d = false;
                    else {
                        a = wk;
                        wk = null;
                        xk = 0;
                        if (0 !== (K & 6)) throw Error(p(331));
                        var e = K;
                        K |= 4;
                        for(V = a.current; null !== V;){
                            var f = V, g = f.child;
                            if (0 !== (V.flags & 16)) {
                                var h = f.deletions;
                                if (null !== h) {
                                    for(var k = 0; k < h.length; k++){
                                        var l = h[k];
                                        for(V = l; null !== V;){
                                            var m = V;
                                            switch(m.tag){
                                                case 0:
                                                case 11:
                                                case 15:
                                                    Pj(8, m, f);
                                            }
                                            var q = m.child;
                                            if (null !== q) q.return = m, V = q;
                                            else for(; null !== V;){
                                                m = V;
                                                var r = m.sibling, y = m.return;
                                                Sj(m);
                                                if (m === l) {
                                                    V = null;
                                                    break;
                                                }
                                                if (null !== r) {
                                                    r.return = y;
                                                    V = r;
                                                    break;
                                                }
                                                V = y;
                                            }
                                        }
                                    }
                                    var n = f.alternate;
                                    if (null !== n) {
                                        var t = n.child;
                                        if (null !== t) {
                                            n.child = null;
                                            do {
                                                var J = t.sibling;
                                                t.sibling = null;
                                                t = J;
                                            }while (null !== t);
                                        }
                                    }
                                    V = f;
                                }
                            }
                            if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;
                            else b: for(; null !== V;){
                                f = V;
                                if (0 !== (f.flags & 2048)) switch(f.tag){
                                    case 0:
                                    case 11:
                                    case 15:
                                        Pj(9, f, f.return);
                                }
                                var x = f.sibling;
                                if (null !== x) {
                                    x.return = f.return;
                                    V = x;
                                    break b;
                                }
                                V = f.return;
                            }
                        }
                        var w = a.current;
                        for(V = w; null !== V;){
                            g = V;
                            var u = g.child;
                            if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;
                            else b: for(g = w; null !== V;){
                                h = V;
                                if (0 !== (h.flags & 2048)) try {
                                    switch(h.tag){
                                        case 0:
                                        case 11:
                                        case 15:
                                            Qj(9, h);
                                    }
                                } catch (na) {
                                    W(h, h.return, na);
                                }
                                if (h === g) {
                                    V = null;
                                    break b;
                                }
                                var F = h.sibling;
                                if (null !== F) {
                                    F.return = h.return;
                                    V = F;
                                    break b;
                                }
                                V = h.return;
                            }
                        }
                        K = e;
                        jg();
                        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
                            lc.onPostCommitFiberRoot(kc, a);
                        } catch (na) {}
                        d = true;
                    }
                    return d;
                } finally{
                    C = c, ok.transition = b;
                }
            }
            return false;
        }
        function Xk(a, b, c) {
            b = Ji(c, b);
            b = Ni(a, b, 1);
            a = nh(a, b, 1);
            b = R();
            null !== a && (Ac(a, 1, b), Dk(a, b));
        }
        function W(a, b, c) {
            if (3 === a.tag) Xk(a, a, c);
            else for(; null !== b;){
                if (3 === b.tag) {
                    Xk(b, a, c);
                    break;
                } else if (1 === b.tag) {
                    var d = b.stateNode;
                    if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
                        a = Ji(c, a);
                        a = Qi(b, a, 1);
                        b = nh(b, a, 1);
                        a = R();
                        null !== b && (Ac(b, 1, a), Dk(b, a));
                        break;
                    }
                }
                b = b.return;
            }
        }
        function Ti(a, b, c) {
            var d = a.pingCache;
            null !== d && d.delete(b);
            b = R();
            a.pingedLanes |= a.suspendedLanes & c;
            Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
            Dk(a, b);
        }
        function Yk(a, b) {
            0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
            var c = R();
            a = ih(a, b);
            null !== a && (Ac(a, b, c), Dk(a, c));
        }
        function uj(a) {
            var b = a.memoizedState, c = 0;
            null !== b && (c = b.retryLane);
            Yk(a, c);
        }
        function bk(a, b) {
            var c = 0;
            switch(a.tag){
                case 13:
                    var d = a.stateNode;
                    var e = a.memoizedState;
                    null !== e && (c = e.retryLane);
                    break;
                case 19:
                    d = a.stateNode;
                    break;
                default:
                    throw Error(p(314));
            }
            null !== d && d.delete(b);
            Yk(a, c);
        }
        var Vk;
        Vk = function Vk(a, b, c) {
            if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
            else {
                if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
                dh = 0 !== (a.flags & 131072) ? true : false;
            }
            else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
            b.lanes = 0;
            switch(b.tag){
                case 2:
                    var d = b.type;
                    ij(a, b);
                    a = b.pendingProps;
                    var e = Yf(b, H.current);
                    ch(b, c);
                    e = Nh(null, b, d, a, e, c);
                    var f = Sh();
                    b.flags |= 1;
                    "object" === (typeof e === "undefined" ? "undefined" : _type_of(e)) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
                    return b;
                case 16:
                    d = b.elementType;
                    a: {
                        ij(a, b);
                        a = b.pendingProps;
                        e = d._init;
                        d = e(d._payload);
                        b.type = d;
                        e = b.tag = Zk(d);
                        a = Ci(d, a);
                        switch(e){
                            case 0:
                                b = cj(null, b, d, a, c);
                                break a;
                            case 1:
                                b = hj(null, b, d, a, c);
                                break a;
                            case 11:
                                b = Yi(null, b, d, a, c);
                                break a;
                            case 14:
                                b = $i(null, b, d, Ci(d.type, a), c);
                                break a;
                        }
                        throw Error(p(306, d, ""));
                    }
                    return b;
                case 0:
                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
                case 1:
                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
                case 3:
                    a: {
                        kj(b);
                        if (null === a) throw Error(p(387));
                        d = b.pendingProps;
                        f = b.memoizedState;
                        e = f.element;
                        lh(a, b);
                        qh(b, d, null, c);
                        var g = b.memoizedState;
                        d = g.element;
                        if (f.isDehydrated) if (f = {
                            element: d,
                            isDehydrated: false,
                            cache: g.cache,
                            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                            transitions: g.transitions
                        }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                            e = Ji(Error(p(423)), b);
                            b = lj(a, b, d, c, e);
                            break a;
                        } else if (d !== e) {
                            e = Ji(Error(p(424)), b);
                            b = lj(a, b, d, c, e);
                            break a;
                        } else for(yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c;)c.flags = c.flags & -3 | 4096, c = c.sibling;
                        else {
                            Ig();
                            if (d === e) {
                                b = Zi(a, b, c);
                                break a;
                            }
                            Xi(a, b, d, c);
                        }
                        b = b.child;
                    }
                    return b;
                case 5:
                    return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
                case 6:
                    return null === a && Eg(b), null;
                case 13:
                    return oj(a, b, c);
                case 4:
                    return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
                case 11:
                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
                case 7:
                    return Xi(a, b, b.pendingProps, c), b.child;
                case 8:
                    return Xi(a, b, b.pendingProps.children, c), b.child;
                case 12:
                    return Xi(a, b, b.pendingProps.children, c), b.child;
                case 10:
                    a: {
                        d = b.type._context;
                        e = b.pendingProps;
                        f = b.memoizedProps;
                        g = e.value;
                        G(Wg, d._currentValue);
                        d._currentValue = g;
                        if (null !== f) if (He(f.value, g)) {
                            if (f.children === e.children && !Wf.current) {
                                b = Zi(a, b, c);
                                break a;
                            }
                        } else for(f = b.child, null !== f && (f.return = b); null !== f;){
                            var h = f.dependencies;
                            if (null !== h) {
                                g = f.child;
                                for(var k = h.firstContext; null !== k;){
                                    if (k.context === d) {
                                        if (1 === f.tag) {
                                            k = mh(-1, c & -c);
                                            k.tag = 2;
                                            var l = f.updateQueue;
                                            if (null !== l) {
                                                l = l.shared;
                                                var m = l.pending;
                                                null === m ? k.next = k : (k.next = m.next, m.next = k);
                                                l.pending = k;
                                            }
                                        }
                                        f.lanes |= c;
                                        k = f.alternate;
                                        null !== k && (k.lanes |= c);
                                        bh(f.return, c, b);
                                        h.lanes |= c;
                                        break;
                                    }
                                    k = k.next;
                                }
                            } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                            else if (18 === f.tag) {
                                g = f.return;
                                if (null === g) throw Error(p(341));
                                g.lanes |= c;
                                h = g.alternate;
                                null !== h && (h.lanes |= c);
                                bh(g, c, b);
                                g = f.sibling;
                            } else g = f.child;
                            if (null !== g) g.return = f;
                            else for(g = f; null !== g;){
                                if (g === b) {
                                    g = null;
                                    break;
                                }
                                f = g.sibling;
                                if (null !== f) {
                                    f.return = g.return;
                                    g = f;
                                    break;
                                }
                                g = g.return;
                            }
                            f = g;
                        }
                        Xi(a, b, e.children, c);
                        b = b.child;
                    }
                    return b;
                case 9:
                    return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
                case 14:
                    return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
                case 15:
                    return bj(a, b, b.type, b.pendingProps, c);
                case 17:
                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
                case 19:
                    return xj(a, b, c);
                case 22:
                    return dj(a, b, c);
            }
            throw Error(p(156, b.tag));
        };
        function Fk(a, b) {
            return ac(a, b);
        }
        function $k(a, b, c, d) {
            this.tag = a;
            this.key = c;
            this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = b;
            this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
            this.mode = d;
            this.subtreeFlags = this.flags = 0;
            this.deletions = null;
            this.childLanes = this.lanes = 0;
            this.alternate = null;
        }
        function Bg(a, b, c, d) {
            return new $k(a, b, c, d);
        }
        function aj(a) {
            a = a.prototype;
            return !(!a || !a.isReactComponent);
        }
        function Zk(a) {
            if ("function" === typeof a) return aj(a) ? 1 : 0;
            if (void 0 !== a && null !== a) {
                a = a.$$typeof;
                if (a === Da) return 11;
                if (a === Ga) return 14;
            }
            return 2;
        }
        function Pg(a, b) {
            var c = a.alternate;
            null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
            c.flags = a.flags & 14680064;
            c.childLanes = a.childLanes;
            c.lanes = a.lanes;
            c.child = a.child;
            c.memoizedProps = a.memoizedProps;
            c.memoizedState = a.memoizedState;
            c.updateQueue = a.updateQueue;
            b = a.dependencies;
            c.dependencies = null === b ? null : {
                lanes: b.lanes,
                firstContext: b.firstContext
            };
            c.sibling = a.sibling;
            c.index = a.index;
            c.ref = a.ref;
            return c;
        }
        function Rg(a, b, c, d, e, f) {
            var g = 2;
            d = a;
            if ("function" === typeof a) aj(a) && (g = 1);
            else if ("string" === typeof a) g = 5;
            else a: switch(a){
                case ya:
                    return Tg(c.children, e, f, b);
                case za:
                    g = 8;
                    e |= 8;
                    break;
                case Aa:
                    return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
                case Ea:
                    return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
                case Fa:
                    return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
                case Ia:
                    return pj(c, e, f, b);
                default:
                    if ("object" === (typeof a === "undefined" ? "undefined" : _type_of(a)) && null !== a) switch(a.$$typeof){
                        case Ba:
                            g = 10;
                            break a;
                        case Ca:
                            g = 9;
                            break a;
                        case Da:
                            g = 11;
                            break a;
                        case Ga:
                            g = 14;
                            break a;
                        case Ha:
                            g = 16;
                            d = null;
                            break a;
                    }
                    throw Error(p(130, null == a ? a : typeof a === "undefined" ? "undefined" : _type_of(a), ""));
            }
            b = Bg(g, c, b, e);
            b.elementType = a;
            b.type = d;
            b.lanes = f;
            return b;
        }
        function Tg(a, b, c, d) {
            a = Bg(7, a, d, b);
            a.lanes = c;
            return a;
        }
        function pj(a, b, c, d) {
            a = Bg(22, a, d, b);
            a.elementType = Ia;
            a.lanes = c;
            a.stateNode = {
                isHidden: false
            };
            return a;
        }
        function Qg(a, b, c) {
            a = Bg(6, a, null, b);
            a.lanes = c;
            return a;
        }
        function Sg(a, b, c) {
            b = Bg(4, null !== a.children ? a.children : [], a.key, b);
            b.lanes = c;
            b.stateNode = {
                containerInfo: a.containerInfo,
                pendingChildren: null,
                implementation: a.implementation
            };
            return b;
        }
        function al(a, b, c, d, e) {
            this.tag = b;
            this.containerInfo = a;
            this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
            this.timeoutHandle = -1;
            this.callbackNode = this.pendingContext = this.context = null;
            this.callbackPriority = 0;
            this.eventTimes = zc(0);
            this.expirationTimes = zc(-1);
            this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
            this.entanglements = zc(0);
            this.identifierPrefix = d;
            this.onRecoverableError = e;
            this.mutableSourceEagerHydrationData = null;
        }
        function bl(a, b, c, d, e, f, g, h, k) {
            a = new al(a, b, c, h, k);
            1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
            f = Bg(3, null, null, b);
            a.current = f;
            f.stateNode = a;
            f.memoizedState = {
                element: d,
                isDehydrated: c,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
            };
            kh(f);
            return a;
        }
        function cl(a, b, c) {
            var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
            return {
                $$typeof: wa,
                key: null == d ? null : "" + d,
                children: a,
                containerInfo: b,
                implementation: c
            };
        }
        function dl(a) {
            if (!a) return Vf;
            a = a._reactInternals;
            a: {
                if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
                var b = a;
                do {
                    switch(b.tag){
                        case 3:
                            b = b.stateNode.context;
                            break a;
                        case 1:
                            if (Zf(b.type)) {
                                b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                                break a;
                            }
                    }
                    b = b.return;
                }while (null !== b);
                throw Error(p(171));
            }
            if (1 === a.tag) {
                var c = a.type;
                if (Zf(c)) return bg(a, c, b);
            }
            return b;
        }
        function el(a, b, c, d, e, f, g, h, k) {
            a = bl(c, d, true, a, e, f, g, h, k);
            a.context = dl(null);
            c = a.current;
            d = R();
            e = yi(c);
            f = mh(d, e);
            f.callback = void 0 !== b && null !== b ? b : null;
            nh(c, f, e);
            a.current.lanes = e;
            Ac(a, e, d);
            Dk(a, d);
            return a;
        }
        function fl(a, b, c, d) {
            var e = b.current, f = R(), g = yi(e);
            c = dl(c);
            null === b.context ? b.context = c : b.pendingContext = c;
            b = mh(f, g);
            b.payload = {
                element: a
            };
            d = void 0 === d ? null : d;
            null !== d && (b.callback = d);
            a = nh(e, b, g);
            null !== a && (gi(a, e, g, f), oh(a, e, g));
            return g;
        }
        function gl(a) {
            a = a.current;
            if (!a.child) return null;
            switch(a.child.tag){
                case 5:
                    return a.child.stateNode;
                default:
                    return a.child.stateNode;
            }
        }
        function hl(a, b) {
            a = a.memoizedState;
            if (null !== a && null !== a.dehydrated) {
                var c = a.retryLane;
                a.retryLane = 0 !== c && c < b ? c : b;
            }
        }
        function il(a, b) {
            hl(a, b);
            (a = a.alternate) && hl(a, b);
        }
        function jl() {
            return null;
        }
        var kl = "function" === typeof reportError ? reportError : function kl(a) {
            console.error(a);
        };
        function ll(a) {
            this._internalRoot = a;
        }
        ml.prototype.render = ll.prototype.render = function(a) {
            var b = this._internalRoot;
            if (null === b) throw Error(p(409));
            fl(a, b, null, null);
        };
        ml.prototype.unmount = ll.prototype.unmount = function() {
            var a = this._internalRoot;
            if (null !== a) {
                this._internalRoot = null;
                var b = a.containerInfo;
                Rk(function() {
                    fl(null, a, null, null);
                });
                b[uf] = null;
            }
        };
        function ml(a) {
            this._internalRoot = a;
        }
        ml.prototype.unstable_scheduleHydration = function(a) {
            if (a) {
                var b = Hc();
                a = {
                    blockedOn: null,
                    target: a,
                    priority: b
                };
                for(var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
                Qc.splice(c, 0, a);
                0 === c && Vc(a);
            }
        };
        function nl(a) {
            return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
        }
        function ol(a) {
            return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
        }
        function pl() {}
        function ql(a, b, c, d, e) {
            if (e) {
                if ("function" === typeof d) {
                    var f = d;
                    d = function d() {
                        var a2 = gl(g);
                        f.call(a2);
                    };
                }
                var g = el(b, d, a, 0, null, false, false, "", pl);
                a._reactRootContainer = g;
                a[uf] = g.current;
                sf(8 === a.nodeType ? a.parentNode : a);
                Rk();
                return g;
            }
            for(; e = a.lastChild;)a.removeChild(e);
            if ("function" === typeof d) {
                var h = d;
                d = function d() {
                    var a2 = gl(k);
                    h.call(a2);
                };
            }
            var k = bl(a, 0, false, null, null, false, false, "", pl);
            a._reactRootContainer = k;
            a[uf] = k.current;
            sf(8 === a.nodeType ? a.parentNode : a);
            Rk(function() {
                fl(b, k, c, d);
            });
            return k;
        }
        function rl(a, b, c, d, e) {
            var f = c._reactRootContainer;
            if (f) {
                var g = f;
                if ("function" === typeof e) {
                    var h = e;
                    e = function e() {
                        var a2 = gl(g);
                        h.call(a2);
                    };
                }
                fl(b, g, a, e);
            } else g = ql(c, b, a, e, d);
            return gl(g);
        }
        Ec = function Ec(a) {
            switch(a.tag){
                case 3:
                    var b = a.stateNode;
                    if (b.current.memoizedState.isDehydrated) {
                        var c = tc(b.pendingLanes);
                        0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
                    }
                    break;
                case 13:
                    Rk(function() {
                        var b2 = ih(a, 1);
                        if (null !== b2) {
                            var c2 = R();
                            gi(b2, a, 1, c2);
                        }
                    }), il(a, 1);
            }
        };
        Fc = function Fc(a) {
            if (13 === a.tag) {
                var b = ih(a, 134217728);
                if (null !== b) {
                    var c = R();
                    gi(b, a, 134217728, c);
                }
                il(a, 134217728);
            }
        };
        Gc = function Gc(a) {
            if (13 === a.tag) {
                var b = yi(a), c = ih(a, b);
                if (null !== c) {
                    var d = R();
                    gi(c, a, b, d);
                }
                il(a, b);
            }
        };
        Hc = function Hc() {
            return C;
        };
        Ic = function Ic(a, b) {
            var c = C;
            try {
                return C = a, b();
            } finally{
                C = c;
            }
        };
        yb = function yb(a, b, c) {
            switch(b){
                case "input":
                    bb(a, c);
                    b = c.name;
                    if ("radio" === c.type && null != b) {
                        for(c = a; c.parentNode;)c = c.parentNode;
                        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                        for(b = 0; b < c.length; b++){
                            var d = c[b];
                            if (d !== a && d.form === a.form) {
                                var e = Db(d);
                                if (!e) throw Error(p(90));
                                Wa(d);
                                bb(d, e);
                            }
                        }
                    }
                    break;
                case "textarea":
                    ib(a, c);
                    break;
                case "select":
                    b = c.value, null != b && fb(a, !!c.multiple, b, false);
            }
        };
        Gb = Qk;
        Hb = Rk;
        var sl = {
            usingClientEntryPoint: false,
            Events: [
                Cb,
                ue,
                Db,
                Eb,
                Fb,
                Qk
            ]
        };
        var tl = {
            findFiberByHostInstance: Wc,
            bundleType: 0,
            version: "18.3.1",
            rendererPackageName: "react-dom"
        };
        var ul = {
            bundleType: tl.bundleType,
            version: tl.version,
            rendererPackageName: tl.rendererPackageName,
            rendererConfig: tl.rendererConfig,
            overrideHookState: null,
            overrideHookStateDeletePath: null,
            overrideHookStateRenamePath: null,
            overrideProps: null,
            overridePropsDeletePath: null,
            overridePropsRenamePath: null,
            setErrorHandler: null,
            setSuspenseHandler: null,
            scheduleUpdate: null,
            currentDispatcherRef: ua.ReactCurrentDispatcher,
            findHostInstanceByFiber: function findHostInstanceByFiber(a) {
                a = Zb(a);
                return null === a ? null : a.stateNode;
            },
            findFiberByHostInstance: tl.findFiberByHostInstance || jl,
            findHostInstancesForRefresh: null,
            scheduleRefresh: null,
            scheduleRoot: null,
            setRefreshHandler: null,
            getCurrentFiber: null,
            reconcilerVersion: "18.3.1-next-f1338f8080-20240426"
        };
        if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
            vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (!vl.isDisabled && vl.supportsFiber) try {
                kc = vl.inject(ul), lc = vl;
            } catch (a) {}
        }
        var vl;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
        exports2.createPortal = function(a, b) {
            var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
            if (!nl(b)) throw Error(p(200));
            return cl(a, b, null, c);
        };
        exports2.createRoot = function(a, b) {
            if (!nl(a)) throw Error(p(299));
            var c = false, d = "", e = kl;
            null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
            b = bl(a, 1, false, null, null, c, false, d, e);
            a[uf] = b.current;
            sf(8 === a.nodeType ? a.parentNode : a);
            return new ll(b);
        };
        exports2.findDOMNode = function(a) {
            if (null == a) return null;
            if (1 === a.nodeType) return a;
            var b = a._reactInternals;
            if (void 0 === b) {
                if ("function" === typeof a.render) throw Error(p(188));
                a = Object.keys(a).join(",");
                throw Error(p(268, a));
            }
            a = Zb(b);
            a = null === a ? null : a.stateNode;
            return a;
        };
        exports2.flushSync = function(a) {
            return Rk(a);
        };
        exports2.hydrate = function(a, b, c) {
            if (!ol(b)) throw Error(p(200));
            return rl(null, a, b, true, c);
        };
        exports2.hydrateRoot = function(a, b, c) {
            if (!nl(a)) throw Error(p(405));
            var d = null != c && c.hydratedSources || null, e = false, f = "", g = kl;
            null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
            b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
            a[uf] = b.current;
            sf(a);
            if (d) for(a = 0; a < d.length; a++)c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [
                c,
                e
            ] : b.mutableSourceEagerHydrationData.push(c, e);
            return new ml(b);
        };
        exports2.render = function(a, b, c) {
            if (!ol(b)) throw Error(p(200));
            return rl(null, a, b, false, c);
        };
        exports2.unmountComponentAtNode = function(a) {
            if (!ol(a)) throw Error(p(40));
            return a._reactRootContainer ? (Rk(function() {
                rl(null, null, a, false, function() {
                    a._reactRootContainer = null;
                    a[uf] = null;
                });
            }), true) : false;
        };
        exports2.unstable_batchedUpdates = Qk;
        exports2.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
            if (!ol(c)) throw Error(p(200));
            if (null == a || void 0 === a._reactInternals) throw Error(p(38));
            return rl(a, b, c, false, d);
        };
        exports2.version = "18.3.1-next-f1338f8080-20240426";
    }
});
// ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js": function(exports2) {
        "use strict";
        if (process.env.NODE_ENV !== "production") {
            (function() {
                "use strict";
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
                }
                var React61 = require("react");
                var Scheduler = require_scheduler();
                var ReactSharedInternals = React61.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                var suppressWarning = false;
                function setSuppressWarning(newSuppressWarning) {
                    {
                        suppressWarning = newSuppressWarning;
                    }
                }
                function warn(format) {
                    {
                        if (!suppressWarning) {
                            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                                args[_key - 1] = arguments[_key];
                            }
                            printWarning("warn", format, args);
                        }
                    }
                }
                function error(format) {
                    {
                        if (!suppressWarning) {
                            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                                args[_key2 - 1] = arguments[_key2];
                            }
                            printWarning("error", format, args);
                        }
                    }
                }
                function printWarning(level, format, args) {
                    {
                        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                        var stack = ReactDebugCurrentFrame2.getStackAddendum();
                        if (stack !== "") {
                            format += "%s";
                            args = args.concat([
                                stack
                            ]);
                        }
                        var argsWithFormat = args.map(function(item) {
                            return String(item);
                        });
                        argsWithFormat.unshift("Warning: " + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                    }
                }
                var FunctionComponent = 0;
                var ClassComponent = 1;
                var IndeterminateComponent = 2;
                var HostRoot = 3;
                var HostPortal = 4;
                var HostComponent = 5;
                var HostText = 6;
                var Fragment4 = 7;
                var Mode = 8;
                var ContextConsumer = 9;
                var ContextProvider = 10;
                var ForwardRef2 = 11;
                var Profiler = 12;
                var SuspenseComponent = 13;
                var MemoComponent = 14;
                var SimpleMemoComponent = 15;
                var LazyComponent = 16;
                var IncompleteClassComponent = 17;
                var DehydratedFragment = 18;
                var SuspenseListComponent = 19;
                var ScopeComponent = 21;
                var OffscreenComponent = 22;
                var LegacyHiddenComponent = 23;
                var CacheComponent = 24;
                var TracingMarkerComponent = 25;
                var enableClientRenderFallbackOnTextMismatch = true;
                var enableNewReconciler = false;
                var enableLazyContextPropagation = false;
                var enableLegacyHidden = false;
                var enableSuspenseAvoidThisFallback = false;
                var disableCommentsAsDOMContainers = true;
                var enableCustomElementPropertySupport = false;
                var warnAboutStringRefs = true;
                var enableSchedulingProfiler = true;
                var enableProfilerTimer = true;
                var enableProfilerCommitHooks = true;
                var allNativeEvents = /* @__PURE__ */ new Set();
                var registrationNameDependencies = {};
                var possibleRegistrationNames = {};
                function registerTwoPhaseEvent(registrationName, dependencies) {
                    registerDirectEvent(registrationName, dependencies);
                    registerDirectEvent(registrationName + "Capture", dependencies);
                }
                function registerDirectEvent(registrationName, dependencies) {
                    {
                        if (registrationNameDependencies[registrationName]) {
                            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
                        }
                    }
                    registrationNameDependencies[registrationName] = dependencies;
                    {
                        var lowerCasedName = registrationName.toLowerCase();
                        possibleRegistrationNames[lowerCasedName] = registrationName;
                        if (registrationName === "onDoubleClick") {
                            possibleRegistrationNames.ondblclick = registrationName;
                        }
                    }
                    for(var i = 0; i < dependencies.length; i++){
                        allNativeEvents.add(dependencies[i]);
                    }
                }
                var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                function typeName(value) {
                    {
                        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                        return type;
                    }
                }
                function willCoercionThrow(value) {
                    {
                        try {
                            testStringCoercion(value);
                            return false;
                        } catch (e) {
                            return true;
                        }
                    }
                }
                function testStringCoercion(value) {
                    return "" + value;
                }
                function checkAttributeStringCoercion(value, attributeName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkKeyStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkPropStringCoercion(value, propName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkCSSPropertyStringCoercion(value, propName) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkHtmlStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                function checkFormFieldValueStringCoercion(value) {
                    {
                        if (willCoercionThrow(value)) {
                            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                            return testStringCoercion(value);
                        }
                    }
                }
                var RESERVED = 0;
                var STRING = 1;
                var BOOLEANISH_STRING = 2;
                var BOOLEAN = 3;
                var OVERLOADED_BOOLEAN = 4;
                var NUMERIC = 5;
                var POSITIVE_NUMERIC = 6;
                var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
                var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
                var illegalAttributeNameCache = {};
                var validatedAttributeNameCache = {};
                function isAttributeNameSafe(attributeName) {
                    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                        return true;
                    }
                    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                        return false;
                    }
                    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                        validatedAttributeNameCache[attributeName] = true;
                        return true;
                    }
                    illegalAttributeNameCache[attributeName] = true;
                    {
                        error("Invalid attribute name: `%s`", attributeName);
                    }
                    return false;
                }
                function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
                    if (propertyInfo !== null) {
                        return propertyInfo.type === RESERVED;
                    }
                    if (isCustomComponentTag) {
                        return false;
                    }
                    if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
                        return true;
                    }
                    return false;
                }
                function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
                    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                        return false;
                    }
                    switch(typeof value === "undefined" ? "undefined" : _type_of(value)){
                        case "function":
                        // $FlowIssue symbol is perfectly valid here
                        case "symbol":
                            return true;
                        case "boolean":
                            {
                                if (isCustomComponentTag) {
                                    return false;
                                }
                                if (propertyInfo !== null) {
                                    return !propertyInfo.acceptsBooleans;
                                } else {
                                    var prefix2 = name.toLowerCase().slice(0, 5);
                                    return prefix2 !== "data-" && prefix2 !== "aria-";
                                }
                            }
                        default:
                            return false;
                    }
                }
                function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
                    if (value === null || typeof value === "undefined") {
                        return true;
                    }
                    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
                        return true;
                    }
                    if (isCustomComponentTag) {
                        return false;
                    }
                    if (propertyInfo !== null) {
                        switch(propertyInfo.type){
                            case BOOLEAN:
                                return !value;
                            case OVERLOADED_BOOLEAN:
                                return value === false;
                            case NUMERIC:
                                return isNaN(value);
                            case POSITIVE_NUMERIC:
                                return isNaN(value) || value < 1;
                        }
                    }
                    return false;
                }
                function getPropertyInfo(name) {
                    return properties.hasOwnProperty(name) ? properties[name] : null;
                }
                function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
                    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
                    this.attributeName = attributeName;
                    this.attributeNamespace = attributeNamespace;
                    this.mustUseProperty = mustUseProperty;
                    this.propertyName = name;
                    this.type = type;
                    this.sanitizeURL = sanitizeURL2;
                    this.removeEmptyString = removeEmptyString;
                }
                var properties = {};
                var reservedProps = [
                    "children",
                    "dangerouslySetInnerHTML",
                    // TODO: This prevents the assignment of defaultValue to regular
                    // elements (not just inputs). Now that ReactDOMInput assigns to the
                    // defaultValue property -- do we need this?
                    "defaultValue",
                    "defaultChecked",
                    "innerHTML",
                    "suppressContentEditableWarning",
                    "suppressHydrationWarning",
                    "style"
                ];
                reservedProps.forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
                    name, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    [
                        "acceptCharset",
                        "accept-charset"
                    ],
                    [
                        "className",
                        "class"
                    ],
                    [
                        "htmlFor",
                        "for"
                    ],
                    [
                        "httpEquiv",
                        "http-equiv"
                    ]
                ].forEach(function(_ref) {
                    var name = _ref[0], attributeName = _ref[1];
                    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                    attributeName, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "contentEditable",
                    "draggable",
                    "spellCheck",
                    "value"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "autoReverse",
                    "externalResourcesRequired",
                    "focusable",
                    "preserveAlpha"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
                    name, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "allowFullScreen",
                    "async",
                    // Note: there is a special case that prevents it from being written to the DOM
                    // on the client side because the browsers are inconsistent. Instead we call focus().
                    "autoFocus",
                    "autoPlay",
                    "controls",
                    "default",
                    "defer",
                    "disabled",
                    "disablePictureInPicture",
                    "disableRemotePlayback",
                    "formNoValidate",
                    "hidden",
                    "loop",
                    "noModule",
                    "noValidate",
                    "open",
                    "playsInline",
                    "readOnly",
                    "required",
                    "reversed",
                    "scoped",
                    "seamless",
                    // Microdata
                    "itemScope"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "checked",
                    // Note: `option.selected` is not updated if `select.multiple` is
                    // disabled with `removeAttribute`. We have special logic for handling this.
                    "multiple",
                    "muted",
                    "selected"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
                    name, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "capture",
                    "download"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
                    name, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "cols",
                    "rows",
                    "size",
                    "span"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
                    name, // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "rowSpan",
                    "start"
                ].forEach(function(name) {
                    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                var CAMELIZE = /[\-\:]([a-z])/g;
                var capitalize = function capitalize(token2) {
                    return token2[1].toUpperCase();
                };
                [
                    "accent-height",
                    "alignment-baseline",
                    "arabic-form",
                    "baseline-shift",
                    "cap-height",
                    "clip-path",
                    "clip-rule",
                    "color-interpolation",
                    "color-interpolation-filters",
                    "color-profile",
                    "color-rendering",
                    "dominant-baseline",
                    "enable-background",
                    "fill-opacity",
                    "fill-rule",
                    "flood-color",
                    "flood-opacity",
                    "font-family",
                    "font-size",
                    "font-size-adjust",
                    "font-stretch",
                    "font-style",
                    "font-variant",
                    "font-weight",
                    "glyph-name",
                    "glyph-orientation-horizontal",
                    "glyph-orientation-vertical",
                    "horiz-adv-x",
                    "horiz-origin-x",
                    "image-rendering",
                    "letter-spacing",
                    "lighting-color",
                    "marker-end",
                    "marker-mid",
                    "marker-start",
                    "overline-position",
                    "overline-thickness",
                    "paint-order",
                    "panose-1",
                    "pointer-events",
                    "rendering-intent",
                    "shape-rendering",
                    "stop-color",
                    "stop-opacity",
                    "strikethrough-position",
                    "strikethrough-thickness",
                    "stroke-dasharray",
                    "stroke-dashoffset",
                    "stroke-linecap",
                    "stroke-linejoin",
                    "stroke-miterlimit",
                    "stroke-opacity",
                    "stroke-width",
                    "text-anchor",
                    "text-decoration",
                    "text-rendering",
                    "underline-position",
                    "underline-thickness",
                    "unicode-bidi",
                    "unicode-range",
                    "units-per-em",
                    "v-alphabetic",
                    "v-hanging",
                    "v-ideographic",
                    "v-mathematical",
                    "vector-effect",
                    "vert-adv-y",
                    "vert-origin-x",
                    "vert-origin-y",
                    "word-spacing",
                    "writing-mode",
                    "xmlns:xlink",
                    "x-height"
                ].forEach(function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                    attributeName, null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                [
                    "xlink:actuate",
                    "xlink:arcrole",
                    "xlink:role",
                    "xlink:show",
                    "xlink:title",
                    "xlink:type"
                ].forEach(function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                    attributeName, "http://www.w3.org/1999/xlink", false, // sanitizeURL
                    false);
                });
                [
                    "xml:base",
                    "xml:lang",
                    "xml:space"
                ].forEach(function(attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
                    attributeName, "http://www.w3.org/XML/1998/namespace", false, // sanitizeURL
                    false);
                });
                [
                    "tabIndex",
                    "crossOrigin"
                ].forEach(function(attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
                    attributeName.toLowerCase(), // attributeName
                    null, // attributeNamespace
                    false, // sanitizeURL
                    false);
                });
                var xlinkHref = "xlinkHref";
                properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, // mustUseProperty
                "xlink:href", "http://www.w3.org/1999/xlink", true, // sanitizeURL
                false);
                [
                    "src",
                    "href",
                    "action",
                    "formAction"
                ].forEach(function(attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
                    attributeName.toLowerCase(), // attributeName
                    null, // attributeNamespace
                    true, // sanitizeURL
                    true);
                });
                var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
                var didWarn = false;
                function sanitizeURL(url) {
                    {
                        if (!didWarn && isJavaScriptProtocol.test(url)) {
                            didWarn = true;
                            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
                        }
                    }
                }
                function getValueForProperty(node2, name, expected, propertyInfo) {
                    {
                        if (propertyInfo.mustUseProperty) {
                            var propertyName = propertyInfo.propertyName;
                            return node2[propertyName];
                        } else {
                            {
                                checkAttributeStringCoercion(expected, name);
                            }
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL("" + expected);
                            }
                            var attributeName = propertyInfo.attributeName;
                            var stringValue = null;
                            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                                if (node2.hasAttribute(attributeName)) {
                                    var value = node2.getAttribute(attributeName);
                                    if (value === "") {
                                        return true;
                                    }
                                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                        return value;
                                    }
                                    if (value === "" + expected) {
                                        return expected;
                                    }
                                    return value;
                                }
                            } else if (node2.hasAttribute(attributeName)) {
                                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                    return node2.getAttribute(attributeName);
                                }
                                if (propertyInfo.type === BOOLEAN) {
                                    return expected;
                                }
                                stringValue = node2.getAttribute(attributeName);
                            }
                            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                return stringValue === null ? expected : stringValue;
                            } else if (stringValue === "" + expected) {
                                return expected;
                            } else {
                                return stringValue;
                            }
                        }
                    }
                }
                function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
                    {
                        if (!isAttributeNameSafe(name)) {
                            return;
                        }
                        if (!node2.hasAttribute(name)) {
                            return expected === void 0 ? void 0 : null;
                        }
                        var value = node2.getAttribute(name);
                        {
                            checkAttributeStringCoercion(expected, name);
                        }
                        if (value === "" + expected) {
                            return expected;
                        }
                        return value;
                    }
                }
                function setValueForProperty(node2, name, value, isCustomComponentTag) {
                    var propertyInfo = getPropertyInfo(name);
                    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                        return;
                    }
                    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                        value = null;
                    }
                    if (isCustomComponentTag || propertyInfo === null) {
                        if (isAttributeNameSafe(name)) {
                            var _attributeName = name;
                            if (value === null) {
                                node2.removeAttribute(_attributeName);
                            } else {
                                {
                                    checkAttributeStringCoercion(value, name);
                                }
                                node2.setAttribute(_attributeName, "" + value);
                            }
                        }
                        return;
                    }
                    var mustUseProperty = propertyInfo.mustUseProperty;
                    if (mustUseProperty) {
                        var propertyName = propertyInfo.propertyName;
                        if (value === null) {
                            var type = propertyInfo.type;
                            node2[propertyName] = type === BOOLEAN ? false : "";
                        } else {
                            node2[propertyName] = value;
                        }
                        return;
                    }
                    var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
                    if (value === null) {
                        node2.removeAttribute(attributeName);
                    } else {
                        var _type = propertyInfo.type;
                        var attributeValue;
                        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                            attributeValue = "";
                        } else {
                            {
                                {
                                    checkAttributeStringCoercion(value, attributeName);
                                }
                                attributeValue = "" + value;
                            }
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL(attributeValue.toString());
                            }
                        }
                        if (attributeNamespace) {
                            node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                        } else {
                            node2.setAttribute(attributeName, attributeValue);
                        }
                    }
                }
                var REACT_ELEMENT_TYPE = Symbol.for("react.element");
                var REACT_PORTAL_TYPE = Symbol.for("react.portal");
                var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
                var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
                var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
                var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
                var REACT_CONTEXT_TYPE = Symbol.for("react.context");
                var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
                var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
                var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
                var REACT_MEMO_TYPE = Symbol.for("react.memo");
                var REACT_LAZY_TYPE = Symbol.for("react.lazy");
                var REACT_SCOPE_TYPE = Symbol.for("react.scope");
                var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
                var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
                var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
                var REACT_CACHE_TYPE = Symbol.for("react.cache");
                var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
                var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = "@@iterator";
                function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || (typeof maybeIterable === "undefined" ? "undefined" : _type_of(maybeIterable)) !== "object") {
                        return null;
                    }
                    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof maybeIterator === "function") {
                        return maybeIterator;
                    }
                    return null;
                }
                var assign2 = Object.assign;
                var disabledDepth = 0;
                var prevLog;
                var prevInfo;
                var prevWarn;
                var prevError;
                var prevGroup;
                var prevGroupCollapsed;
                var prevGroupEnd;
                function disabledLog() {}
                disabledLog.__reactDisabledLog = true;
                function disableLogs() {
                    {
                        if (disabledDepth === 0) {
                            prevLog = console.log;
                            prevInfo = console.info;
                            prevWarn = console.warn;
                            prevError = console.error;
                            prevGroup = console.group;
                            prevGroupCollapsed = console.groupCollapsed;
                            prevGroupEnd = console.groupEnd;
                            var props = {
                                configurable: true,
                                enumerable: true,
                                value: disabledLog,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                info: props,
                                log: props,
                                warn: props,
                                error: props,
                                group: props,
                                groupCollapsed: props,
                                groupEnd: props
                            });
                        }
                        disabledDepth++;
                    }
                }
                function reenableLogs() {
                    {
                        disabledDepth--;
                        if (disabledDepth === 0) {
                            var props = {
                                configurable: true,
                                enumerable: true,
                                writable: true
                            };
                            Object.defineProperties(console, {
                                log: assign2({}, props, {
                                    value: prevLog
                                }),
                                info: assign2({}, props, {
                                    value: prevInfo
                                }),
                                warn: assign2({}, props, {
                                    value: prevWarn
                                }),
                                error: assign2({}, props, {
                                    value: prevError
                                }),
                                group: assign2({}, props, {
                                    value: prevGroup
                                }),
                                groupCollapsed: assign2({}, props, {
                                    value: prevGroupCollapsed
                                }),
                                groupEnd: assign2({}, props, {
                                    value: prevGroupEnd
                                })
                            });
                        }
                        if (disabledDepth < 0) {
                            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
                        }
                    }
                }
                var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                var prefix;
                function describeBuiltInComponentFrame(name, source, ownerFn) {
                    {
                        if (prefix === void 0) {
                            try {
                                throw Error();
                            } catch (x) {
                                var match = x.stack.trim().match(/\n( *(at )?)/);
                                prefix = match && match[1] || "";
                            }
                        }
                        return "\n" + prefix + name;
                    }
                }
                var reentry = false;
                var componentFrameCache;
                {
                    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
                    componentFrameCache = new PossiblyWeakMap();
                }
                function describeNativeComponentFrame(fn, construct) {
                    if (!fn || reentry) {
                        return "";
                    }
                    {
                        var frame = componentFrameCache.get(fn);
                        if (frame !== void 0) {
                            return frame;
                        }
                    }
                    var control;
                    reentry = true;
                    var previousPrepareStackTrace = Error.prepareStackTrace;
                    Error.prepareStackTrace = void 0;
                    var previousDispatcher;
                    {
                        previousDispatcher = ReactCurrentDispatcher.current;
                        ReactCurrentDispatcher.current = null;
                        disableLogs();
                    }
                    try {
                        if (construct) {
                            var Fake = function Fake() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function set() {
                                    throw Error();
                                }
                            });
                            if ((typeof Reflect === "undefined" ? "undefined" : _type_of(Reflect)) === "object" && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x) {
                                    control = x;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x) {
                                control = x;
                            }
                            fn();
                        }
                    } catch (sample) {
                        if (sample && control && typeof sample.stack === "string") {
                            var sampleLines = sample.stack.split("\n");
                            var controlLines = control.stack.split("\n");
                            var s = sampleLines.length - 1;
                            var c = controlLines.length - 1;
                            while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){
                                c--;
                            }
                            for(; s >= 1 && c >= 0; s--, c--){
                                if (sampleLines[s] !== controlLines[c]) {
                                    if (s !== 1 || c !== 1) {
                                        do {
                                            s--;
                                            c--;
                                            if (c < 0 || sampleLines[s] !== controlLines[c]) {
                                                var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                                                if (fn.displayName && _frame.includes("<anonymous>")) {
                                                    _frame = _frame.replace("<anonymous>", fn.displayName);
                                                }
                                                {
                                                    if (typeof fn === "function") {
                                                        componentFrameCache.set(fn, _frame);
                                                    }
                                                }
                                                return _frame;
                                            }
                                        }while (s >= 1 && c >= 0);
                                    }
                                    break;
                                }
                            }
                        }
                    } finally{
                        reentry = false;
                        {
                            ReactCurrentDispatcher.current = previousDispatcher;
                            reenableLogs();
                        }
                        Error.prepareStackTrace = previousPrepareStackTrace;
                    }
                    var name = fn ? fn.displayName || fn.name : "";
                    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
                    {
                        if (typeof fn === "function") {
                            componentFrameCache.set(fn, syntheticFrame);
                        }
                    }
                    return syntheticFrame;
                }
                function describeClassComponentFrame(ctor, source, ownerFn) {
                    {
                        return describeNativeComponentFrame(ctor, true);
                    }
                }
                function describeFunctionComponentFrame(fn, source, ownerFn) {
                    {
                        return describeNativeComponentFrame(fn, false);
                    }
                }
                function shouldConstruct(Component3) {
                    var prototype = Component3.prototype;
                    return !!(prototype && prototype.isReactComponent);
                }
                function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                    if (type == null) {
                        return "";
                    }
                    if (typeof type === "function") {
                        {
                            return describeNativeComponentFrame(type, shouldConstruct(type));
                        }
                    }
                    if (typeof type === "string") {
                        return describeBuiltInComponentFrame(type);
                    }
                    switch(type){
                        case REACT_SUSPENSE_TYPE:
                            return describeBuiltInComponentFrame("Suspense");
                        case REACT_SUSPENSE_LIST_TYPE:
                            return describeBuiltInComponentFrame("SuspenseList");
                    }
                    if ((typeof type === "undefined" ? "undefined" : _type_of(type)) === "object") {
                        switch(type.$$typeof){
                            case REACT_FORWARD_REF_TYPE:
                                return describeFunctionComponentFrame(type.render);
                            case REACT_MEMO_TYPE:
                                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                            case REACT_LAZY_TYPE:
                                {
                                    var lazyComponent = type;
                                    var payload = lazyComponent._payload;
                                    var init = lazyComponent._init;
                                    try {
                                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                                    } catch (x) {}
                                }
                        }
                    }
                    return "";
                }
                function describeFiber(fiber) {
                    var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
                    var source = fiber._debugSource;
                    switch(fiber.tag){
                        case HostComponent:
                            return describeBuiltInComponentFrame(fiber.type);
                        case LazyComponent:
                            return describeBuiltInComponentFrame("Lazy");
                        case SuspenseComponent:
                            return describeBuiltInComponentFrame("Suspense");
                        case SuspenseListComponent:
                            return describeBuiltInComponentFrame("SuspenseList");
                        case FunctionComponent:
                        case IndeterminateComponent:
                        case SimpleMemoComponent:
                            return describeFunctionComponentFrame(fiber.type);
                        case ForwardRef2:
                            return describeFunctionComponentFrame(fiber.type.render);
                        case ClassComponent:
                            return describeClassComponentFrame(fiber.type);
                        default:
                            return "";
                    }
                }
                function getStackByFiberInDevAndProd(workInProgress2) {
                    try {
                        var info = "";
                        var node2 = workInProgress2;
                        do {
                            info += describeFiber(node2);
                            node2 = node2.return;
                        }while (node2);
                        return info;
                    } catch (x) {
                        return "\nError generating stack: " + x.message + "\n" + x.stack;
                    }
                }
                function getWrappedName(outerType, innerType, wrapperName) {
                    var displayName = outerType.displayName;
                    if (displayName) {
                        return displayName;
                    }
                    var functionName = innerType.displayName || innerType.name || "";
                    return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
                }
                function getContextName(type) {
                    return type.displayName || "Context";
                }
                function getComponentNameFromType(type) {
                    if (type == null) {
                        return null;
                    }
                    {
                        if (typeof type.tag === "number") {
                            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
                        }
                    }
                    if (typeof type === "function") {
                        return type.displayName || type.name || null;
                    }
                    if (typeof type === "string") {
                        return type;
                    }
                    switch(type){
                        case REACT_FRAGMENT_TYPE2:
                            return "Fragment";
                        case REACT_PORTAL_TYPE:
                            return "Portal";
                        case REACT_PROFILER_TYPE:
                            return "Profiler";
                        case REACT_STRICT_MODE_TYPE:
                            return "StrictMode";
                        case REACT_SUSPENSE_TYPE:
                            return "Suspense";
                        case REACT_SUSPENSE_LIST_TYPE:
                            return "SuspenseList";
                    }
                    if ((typeof type === "undefined" ? "undefined" : _type_of(type)) === "object") {
                        switch(type.$$typeof){
                            case REACT_CONTEXT_TYPE:
                                var context = type;
                                return getContextName(context) + ".Consumer";
                            case REACT_PROVIDER_TYPE:
                                var provider = type;
                                return getContextName(provider._context) + ".Provider";
                            case REACT_FORWARD_REF_TYPE:
                                return getWrappedName(type, type.render, "ForwardRef");
                            case REACT_MEMO_TYPE:
                                var outerName = type.displayName || null;
                                if (outerName !== null) {
                                    return outerName;
                                }
                                return getComponentNameFromType(type.type) || "Memo";
                            case REACT_LAZY_TYPE:
                                {
                                    var lazyComponent = type;
                                    var payload = lazyComponent._payload;
                                    var init = lazyComponent._init;
                                    try {
                                        return getComponentNameFromType(init(payload));
                                    } catch (x) {
                                        return null;
                                    }
                                }
                        }
                    }
                    return null;
                }
                function getWrappedName$1(outerType, innerType, wrapperName) {
                    var functionName = innerType.displayName || innerType.name || "";
                    return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
                }
                function getContextName$1(type) {
                    return type.displayName || "Context";
                }
                function getComponentNameFromFiber(fiber) {
                    var tag = fiber.tag, type = fiber.type;
                    switch(tag){
                        case CacheComponent:
                            return "Cache";
                        case ContextConsumer:
                            var context = type;
                            return getContextName$1(context) + ".Consumer";
                        case ContextProvider:
                            var provider = type;
                            return getContextName$1(provider._context) + ".Provider";
                        case DehydratedFragment:
                            return "DehydratedFragment";
                        case ForwardRef2:
                            return getWrappedName$1(type, type.render, "ForwardRef");
                        case Fragment4:
                            return "Fragment";
                        case HostComponent:
                            return type;
                        case HostPortal:
                            return "Portal";
                        case HostRoot:
                            return "Root";
                        case HostText:
                            return "Text";
                        case LazyComponent:
                            return getComponentNameFromType(type);
                        case Mode:
                            if (type === REACT_STRICT_MODE_TYPE) {
                                return "StrictMode";
                            }
                            return "Mode";
                        case OffscreenComponent:
                            return "Offscreen";
                        case Profiler:
                            return "Profiler";
                        case ScopeComponent:
                            return "Scope";
                        case SuspenseComponent:
                            return "Suspense";
                        case SuspenseListComponent:
                            return "SuspenseList";
                        case TracingMarkerComponent:
                            return "TracingMarker";
                        // The display name for this tags come from the user-provided type:
                        case ClassComponent:
                        case FunctionComponent:
                        case IncompleteClassComponent:
                        case IndeterminateComponent:
                        case MemoComponent:
                        case SimpleMemoComponent:
                            if (typeof type === "function") {
                                return type.displayName || type.name || null;
                            }
                            if (typeof type === "string") {
                                return type;
                            }
                            break;
                    }
                    return null;
                }
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var current = null;
                var isRendering = false;
                function getCurrentFiberOwnerNameInDevOrNull() {
                    {
                        if (current === null) {
                            return null;
                        }
                        var owner = current._debugOwner;
                        if (owner !== null && typeof owner !== "undefined") {
                            return getComponentNameFromFiber(owner);
                        }
                    }
                    return null;
                }
                function getCurrentFiberStackInDev() {
                    {
                        if (current === null) {
                            return "";
                        }
                        return getStackByFiberInDevAndProd(current);
                    }
                }
                function resetCurrentFiber() {
                    {
                        ReactDebugCurrentFrame.getCurrentStack = null;
                        current = null;
                        isRendering = false;
                    }
                }
                function setCurrentFiber(fiber) {
                    {
                        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
                        current = fiber;
                        isRendering = false;
                    }
                }
                function getCurrentFiber() {
                    {
                        return current;
                    }
                }
                function setIsRendering(rendering) {
                    {
                        isRendering = rendering;
                    }
                }
                function toString(value) {
                    return "" + value;
                }
                function getToStringValue(value) {
                    switch(typeof value === "undefined" ? "undefined" : _type_of(value)){
                        case "boolean":
                        case "number":
                        case "string":
                        case "undefined":
                            return value;
                        case "object":
                            {
                                checkFormFieldValueStringCoercion(value);
                            }
                            return value;
                        default:
                            return "";
                    }
                }
                var hasReadOnlyValue = {
                    button: true,
                    checkbox: true,
                    image: true,
                    hidden: true,
                    radio: true,
                    reset: true,
                    submit: true
                };
                function checkControlledValueProps(tagName, props) {
                    {
                        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
                        }
                        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
                        }
                    }
                }
                function isCheckable(elem) {
                    var type = elem.type;
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
                }
                function getTracker(node2) {
                    return node2._valueTracker;
                }
                function detachTracker(node2) {
                    node2._valueTracker = null;
                }
                function getValueFromNode(node2) {
                    var value = "";
                    if (!node2) {
                        return value;
                    }
                    if (isCheckable(node2)) {
                        value = node2.checked ? "true" : "false";
                    } else {
                        value = node2.value;
                    }
                    return value;
                }
                function trackValueOnNode(node2) {
                    var valueField = isCheckable(node2) ? "checked" : "value";
                    var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
                    {
                        checkFormFieldValueStringCoercion(node2[valueField]);
                    }
                    var currentValue = "" + node2[valueField];
                    if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
                        return;
                    }
                    var get3 = descriptor.get, set3 = descriptor.set;
                    Object.defineProperty(node2, valueField, {
                        configurable: true,
                        get: function get() {
                            return get3.call(this);
                        },
                        set: function set(value) {
                            {
                                checkFormFieldValueStringCoercion(value);
                            }
                            currentValue = "" + value;
                            set3.call(this, value);
                        }
                    });
                    Object.defineProperty(node2, valueField, {
                        enumerable: descriptor.enumerable
                    });
                    var tracker = {
                        getValue: function getValue() {
                            return currentValue;
                        },
                        setValue: function setValue(value) {
                            {
                                checkFormFieldValueStringCoercion(value);
                            }
                            currentValue = "" + value;
                        },
                        stopTracking: function stopTracking() {
                            detachTracker(node2);
                            delete node2[valueField];
                        }
                    };
                    return tracker;
                }
                function track(node2) {
                    if (getTracker(node2)) {
                        return;
                    }
                    node2._valueTracker = trackValueOnNode(node2);
                }
                function updateValueIfChanged(node2) {
                    if (!node2) {
                        return false;
                    }
                    var tracker = getTracker(node2);
                    if (!tracker) {
                        return true;
                    }
                    var lastValue = tracker.getValue();
                    var nextValue = getValueFromNode(node2);
                    if (nextValue !== lastValue) {
                        tracker.setValue(nextValue);
                        return true;
                    }
                    return false;
                }
                function getActiveElement(doc) {
                    doc = doc || (typeof document !== "undefined" ? document : void 0);
                    if (typeof doc === "undefined") {
                        return null;
                    }
                    try {
                        return doc.activeElement || doc.body;
                    } catch (e) {
                        return doc.body;
                    }
                }
                var didWarnValueDefaultValue = false;
                var didWarnCheckedDefaultChecked = false;
                var didWarnControlledToUncontrolled = false;
                var didWarnUncontrolledToControlled = false;
                function isControlled(props) {
                    var usesChecked = props.type === "checkbox" || props.type === "radio";
                    return usesChecked ? props.checked != null : props.value != null;
                }
                function getHostProps(element, props) {
                    var node2 = element;
                    var checked = props.checked;
                    var hostProps = assign2({}, props, {
                        defaultChecked: void 0,
                        defaultValue: void 0,
                        value: void 0,
                        checked: checked != null ? checked : node2._wrapperState.initialChecked
                    });
                    return hostProps;
                }
                function initWrapperState(element, props) {
                    {
                        checkControlledValueProps("input", props);
                        if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                            didWarnCheckedDefaultChecked = true;
                        }
                        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                            didWarnValueDefaultValue = true;
                        }
                    }
                    var node2 = element;
                    var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
                    node2._wrapperState = {
                        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
                        controlled: isControlled(props)
                    };
                }
                function updateChecked(element, props) {
                    var node2 = element;
                    var checked = props.checked;
                    if (checked != null) {
                        setValueForProperty(node2, "checked", checked, false);
                    }
                }
                function updateWrapper(element, props) {
                    var node2 = element;
                    {
                        var controlled = isControlled(props);
                        if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                            didWarnUncontrolledToControlled = true;
                        }
                        if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                            didWarnControlledToUncontrolled = true;
                        }
                    }
                    updateChecked(element, props);
                    var value = getToStringValue(props.value);
                    var type = props.type;
                    if (value != null) {
                        if (type === "number") {
                            if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                            // eslint-disable-next-line
                            node2.value != value) {
                                node2.value = toString(value);
                            }
                        } else if (node2.value !== toString(value)) {
                            node2.value = toString(value);
                        }
                    } else if (type === "submit" || type === "reset") {
                        node2.removeAttribute("value");
                        return;
                    }
                    {
                        if (props.hasOwnProperty("value")) {
                            setDefaultValue(node2, props.type, value);
                        } else if (props.hasOwnProperty("defaultValue")) {
                            setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
                        }
                    }
                    {
                        if (props.checked == null && props.defaultChecked != null) {
                            node2.defaultChecked = !!props.defaultChecked;
                        }
                    }
                }
                function postMountWrapper(element, props, isHydrating2) {
                    var node2 = element;
                    if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
                        var type = props.type;
                        var isButton = type === "submit" || type === "reset";
                        if (isButton && (props.value === void 0 || props.value === null)) {
                            return;
                        }
                        var initialValue = toString(node2._wrapperState.initialValue);
                        if (!isHydrating2) {
                            {
                                if (initialValue !== node2.value) {
                                    node2.value = initialValue;
                                }
                            }
                        }
                        {
                            node2.defaultValue = initialValue;
                        }
                    }
                    var name = node2.name;
                    if (name !== "") {
                        node2.name = "";
                    }
                    {
                        node2.defaultChecked = !node2.defaultChecked;
                        node2.defaultChecked = !!node2._wrapperState.initialChecked;
                    }
                    if (name !== "") {
                        node2.name = name;
                    }
                }
                function restoreControlledState(element, props) {
                    var node2 = element;
                    updateWrapper(node2, props);
                    updateNamedCousins(node2, props);
                }
                function updateNamedCousins(rootNode, props) {
                    var name = props.name;
                    if (props.type === "radio" && name != null) {
                        var queryRoot = rootNode;
                        while(queryRoot.parentNode){
                            queryRoot = queryRoot.parentNode;
                        }
                        {
                            checkAttributeStringCoercion(name, "name");
                        }
                        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
                        for(var i = 0; i < group.length; i++){
                            var otherNode = group[i];
                            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                                continue;
                            }
                            var otherProps = getFiberCurrentPropsFromNode(otherNode);
                            if (!otherProps) {
                                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                            }
                            updateValueIfChanged(otherNode);
                            updateWrapper(otherNode, otherProps);
                        }
                    }
                }
                function setDefaultValue(node2, type, value) {
                    if (// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
                    type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
                        if (value == null) {
                            node2.defaultValue = toString(node2._wrapperState.initialValue);
                        } else if (node2.defaultValue !== toString(value)) {
                            node2.defaultValue = toString(value);
                        }
                    }
                }
                var didWarnSelectedSetOnOption = false;
                var didWarnInvalidChild = false;
                var didWarnInvalidInnerHTML = false;
                function validateProps(element, props) {
                    {
                        if (props.value == null) {
                            if (_type_of(props.children) === "object" && props.children !== null) {
                                React61.Children.forEach(props.children, function(child) {
                                    if (child == null) {
                                        return;
                                    }
                                    if (typeof child === "string" || typeof child === "number") {
                                        return;
                                    }
                                    if (!didWarnInvalidChild) {
                                        didWarnInvalidChild = true;
                                        error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                                    }
                                });
                            } else if (props.dangerouslySetInnerHTML != null) {
                                if (!didWarnInvalidInnerHTML) {
                                    didWarnInvalidInnerHTML = true;
                                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                                }
                            }
                        }
                        if (props.selected != null && !didWarnSelectedSetOnOption) {
                            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                            didWarnSelectedSetOnOption = true;
                        }
                    }
                }
                function postMountWrapper$1(element, props) {
                    if (props.value != null) {
                        element.setAttribute("value", toString(getToStringValue(props.value)));
                    }
                }
                var isArrayImpl = Array.isArray;
                function isArray(a) {
                    return isArrayImpl(a);
                }
                var didWarnValueDefaultValue$1;
                {
                    didWarnValueDefaultValue$1 = false;
                }
                function getDeclarationErrorAddendum() {
                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                    if (ownerName) {
                        return "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                    return "";
                }
                var valuePropNames = [
                    "value",
                    "defaultValue"
                ];
                function checkSelectPropTypes(props) {
                    {
                        checkControlledValueProps("select", props);
                        for(var i = 0; i < valuePropNames.length; i++){
                            var propName = valuePropNames[i];
                            if (props[propName] == null) {
                                continue;
                            }
                            var propNameIsArray = isArray(props[propName]);
                            if (props.multiple && !propNameIsArray) {
                                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                            } else if (!props.multiple && propNameIsArray) {
                                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                            }
                        }
                    }
                }
                function updateOptions(node2, multiple, propValue, setDefaultSelected) {
                    var options2 = node2.options;
                    if (multiple) {
                        var selectedValues = propValue;
                        var selectedValue = {};
                        for(var i = 0; i < selectedValues.length; i++){
                            selectedValue["$" + selectedValues[i]] = true;
                        }
                        for(var _i = 0; _i < options2.length; _i++){
                            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                            if (options2[_i].selected !== selected) {
                                options2[_i].selected = selected;
                            }
                            if (selected && setDefaultSelected) {
                                options2[_i].defaultSelected = true;
                            }
                        }
                    } else {
                        var _selectedValue = toString(getToStringValue(propValue));
                        var defaultSelected = null;
                        for(var _i2 = 0; _i2 < options2.length; _i2++){
                            if (options2[_i2].value === _selectedValue) {
                                options2[_i2].selected = true;
                                if (setDefaultSelected) {
                                    options2[_i2].defaultSelected = true;
                                }
                                return;
                            }
                            if (defaultSelected === null && !options2[_i2].disabled) {
                                defaultSelected = options2[_i2];
                            }
                        }
                        if (defaultSelected !== null) {
                            defaultSelected.selected = true;
                        }
                    }
                }
                function getHostProps$1(element, props) {
                    return assign2({}, props, {
                        value: void 0
                    });
                }
                function initWrapperState$1(element, props) {
                    var node2 = element;
                    {
                        checkSelectPropTypes(props);
                    }
                    node2._wrapperState = {
                        wasMultiple: !!props.multiple
                    };
                    {
                        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                            didWarnValueDefaultValue$1 = true;
                        }
                    }
                }
                function postMountWrapper$2(element, props) {
                    var node2 = element;
                    node2.multiple = !!props.multiple;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node2, !!props.multiple, value, false);
                    } else if (props.defaultValue != null) {
                        updateOptions(node2, !!props.multiple, props.defaultValue, true);
                    }
                }
                function postUpdateWrapper(element, props) {
                    var node2 = element;
                    var wasMultiple = node2._wrapperState.wasMultiple;
                    node2._wrapperState.wasMultiple = !!props.multiple;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node2, !!props.multiple, value, false);
                    } else if (wasMultiple !== !!props.multiple) {
                        if (props.defaultValue != null) {
                            updateOptions(node2, !!props.multiple, props.defaultValue, true);
                        } else {
                            updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
                        }
                    }
                }
                function restoreControlledState$1(element, props) {
                    var node2 = element;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node2, !!props.multiple, value, false);
                    }
                }
                var didWarnValDefaultVal = false;
                function getHostProps$2(element, props) {
                    var node2 = element;
                    if (props.dangerouslySetInnerHTML != null) {
                        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    }
                    var hostProps = assign2({}, props, {
                        value: void 0,
                        defaultValue: void 0,
                        children: toString(node2._wrapperState.initialValue)
                    });
                    return hostProps;
                }
                function initWrapperState$2(element, props) {
                    var node2 = element;
                    {
                        checkControlledValueProps("textarea", props);
                        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                            didWarnValDefaultVal = true;
                        }
                    }
                    var initialValue = props.value;
                    if (initialValue == null) {
                        var children = props.children, defaultValue = props.defaultValue;
                        if (children != null) {
                            {
                                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                            }
                            {
                                if (defaultValue != null) {
                                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                                }
                                if (isArray(children)) {
                                    if (children.length > 1) {
                                        throw new Error("<textarea> can only have at most one child.");
                                    }
                                    children = children[0];
                                }
                                defaultValue = children;
                            }
                        }
                        if (defaultValue == null) {
                            defaultValue = "";
                        }
                        initialValue = defaultValue;
                    }
                    node2._wrapperState = {
                        initialValue: getToStringValue(initialValue)
                    };
                }
                function updateWrapper$1(element, props) {
                    var node2 = element;
                    var value = getToStringValue(props.value);
                    var defaultValue = getToStringValue(props.defaultValue);
                    if (value != null) {
                        var newValue = toString(value);
                        if (newValue !== node2.value) {
                            node2.value = newValue;
                        }
                        if (props.defaultValue == null && node2.defaultValue !== newValue) {
                            node2.defaultValue = newValue;
                        }
                    }
                    if (defaultValue != null) {
                        node2.defaultValue = toString(defaultValue);
                    }
                }
                function postMountWrapper$3(element, props) {
                    var node2 = element;
                    var textContent = node2.textContent;
                    if (textContent === node2._wrapperState.initialValue) {
                        if (textContent !== "" && textContent !== null) {
                            node2.value = textContent;
                        }
                    }
                }
                function restoreControlledState$2(element, props) {
                    updateWrapper$1(element, props);
                }
                var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
                var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
                var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
                function getIntrinsicNamespace(type) {
                    switch(type){
                        case "svg":
                            return SVG_NAMESPACE;
                        case "math":
                            return MATH_NAMESPACE;
                        default:
                            return HTML_NAMESPACE;
                    }
                }
                function getChildNamespace(parentNamespace, type) {
                    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                        return getIntrinsicNamespace(type);
                    }
                    if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
                        return HTML_NAMESPACE;
                    }
                    return parentNamespace;
                }
                var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
                    if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
                        return function(arg0, arg1, arg2, arg3) {
                            MSApp.execUnsafeLocalFunction(function() {
                                return func(arg0, arg1, arg2, arg3);
                            });
                        };
                    } else {
                        return func;
                    }
                };
                var reusableSVGContainer;
                var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
                    if (node2.namespaceURI === SVG_NAMESPACE) {
                        if (!("innerHTML" in node2)) {
                            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                            var svgNode = reusableSVGContainer.firstChild;
                            while(node2.firstChild){
                                node2.removeChild(node2.firstChild);
                            }
                            while(svgNode.firstChild){
                                node2.appendChild(svgNode.firstChild);
                            }
                            return;
                        }
                    }
                    node2.innerHTML = html;
                });
                var ELEMENT_NODE = 1;
                var TEXT_NODE = 3;
                var COMMENT_NODE = 8;
                var DOCUMENT_NODE = 9;
                var DOCUMENT_FRAGMENT_NODE = 11;
                var setTextContent = function setTextContent(node2, text) {
                    if (text) {
                        var firstChild = node2.firstChild;
                        if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                            firstChild.nodeValue = text;
                            return;
                        }
                    }
                    node2.textContent = text;
                };
                var shorthandToLonghand = {
                    animation: [
                        "animationDelay",
                        "animationDirection",
                        "animationDuration",
                        "animationFillMode",
                        "animationIterationCount",
                        "animationName",
                        "animationPlayState",
                        "animationTimingFunction"
                    ],
                    background: [
                        "backgroundAttachment",
                        "backgroundClip",
                        "backgroundColor",
                        "backgroundImage",
                        "backgroundOrigin",
                        "backgroundPositionX",
                        "backgroundPositionY",
                        "backgroundRepeat",
                        "backgroundSize"
                    ],
                    backgroundPosition: [
                        "backgroundPositionX",
                        "backgroundPositionY"
                    ],
                    border: [
                        "borderBottomColor",
                        "borderBottomStyle",
                        "borderBottomWidth",
                        "borderImageOutset",
                        "borderImageRepeat",
                        "borderImageSlice",
                        "borderImageSource",
                        "borderImageWidth",
                        "borderLeftColor",
                        "borderLeftStyle",
                        "borderLeftWidth",
                        "borderRightColor",
                        "borderRightStyle",
                        "borderRightWidth",
                        "borderTopColor",
                        "borderTopStyle",
                        "borderTopWidth"
                    ],
                    borderBlockEnd: [
                        "borderBlockEndColor",
                        "borderBlockEndStyle",
                        "borderBlockEndWidth"
                    ],
                    borderBlockStart: [
                        "borderBlockStartColor",
                        "borderBlockStartStyle",
                        "borderBlockStartWidth"
                    ],
                    borderBottom: [
                        "borderBottomColor",
                        "borderBottomStyle",
                        "borderBottomWidth"
                    ],
                    borderColor: [
                        "borderBottomColor",
                        "borderLeftColor",
                        "borderRightColor",
                        "borderTopColor"
                    ],
                    borderImage: [
                        "borderImageOutset",
                        "borderImageRepeat",
                        "borderImageSlice",
                        "borderImageSource",
                        "borderImageWidth"
                    ],
                    borderInlineEnd: [
                        "borderInlineEndColor",
                        "borderInlineEndStyle",
                        "borderInlineEndWidth"
                    ],
                    borderInlineStart: [
                        "borderInlineStartColor",
                        "borderInlineStartStyle",
                        "borderInlineStartWidth"
                    ],
                    borderLeft: [
                        "borderLeftColor",
                        "borderLeftStyle",
                        "borderLeftWidth"
                    ],
                    borderRadius: [
                        "borderBottomLeftRadius",
                        "borderBottomRightRadius",
                        "borderTopLeftRadius",
                        "borderTopRightRadius"
                    ],
                    borderRight: [
                        "borderRightColor",
                        "borderRightStyle",
                        "borderRightWidth"
                    ],
                    borderStyle: [
                        "borderBottomStyle",
                        "borderLeftStyle",
                        "borderRightStyle",
                        "borderTopStyle"
                    ],
                    borderTop: [
                        "borderTopColor",
                        "borderTopStyle",
                        "borderTopWidth"
                    ],
                    borderWidth: [
                        "borderBottomWidth",
                        "borderLeftWidth",
                        "borderRightWidth",
                        "borderTopWidth"
                    ],
                    columnRule: [
                        "columnRuleColor",
                        "columnRuleStyle",
                        "columnRuleWidth"
                    ],
                    columns: [
                        "columnCount",
                        "columnWidth"
                    ],
                    flex: [
                        "flexBasis",
                        "flexGrow",
                        "flexShrink"
                    ],
                    flexFlow: [
                        "flexDirection",
                        "flexWrap"
                    ],
                    font: [
                        "fontFamily",
                        "fontFeatureSettings",
                        "fontKerning",
                        "fontLanguageOverride",
                        "fontSize",
                        "fontSizeAdjust",
                        "fontStretch",
                        "fontStyle",
                        "fontVariant",
                        "fontVariantAlternates",
                        "fontVariantCaps",
                        "fontVariantEastAsian",
                        "fontVariantLigatures",
                        "fontVariantNumeric",
                        "fontVariantPosition",
                        "fontWeight",
                        "lineHeight"
                    ],
                    fontVariant: [
                        "fontVariantAlternates",
                        "fontVariantCaps",
                        "fontVariantEastAsian",
                        "fontVariantLigatures",
                        "fontVariantNumeric",
                        "fontVariantPosition"
                    ],
                    gap: [
                        "columnGap",
                        "rowGap"
                    ],
                    grid: [
                        "gridAutoColumns",
                        "gridAutoFlow",
                        "gridAutoRows",
                        "gridTemplateAreas",
                        "gridTemplateColumns",
                        "gridTemplateRows"
                    ],
                    gridArea: [
                        "gridColumnEnd",
                        "gridColumnStart",
                        "gridRowEnd",
                        "gridRowStart"
                    ],
                    gridColumn: [
                        "gridColumnEnd",
                        "gridColumnStart"
                    ],
                    gridColumnGap: [
                        "columnGap"
                    ],
                    gridGap: [
                        "columnGap",
                        "rowGap"
                    ],
                    gridRow: [
                        "gridRowEnd",
                        "gridRowStart"
                    ],
                    gridRowGap: [
                        "rowGap"
                    ],
                    gridTemplate: [
                        "gridTemplateAreas",
                        "gridTemplateColumns",
                        "gridTemplateRows"
                    ],
                    listStyle: [
                        "listStyleImage",
                        "listStylePosition",
                        "listStyleType"
                    ],
                    margin: [
                        "marginBottom",
                        "marginLeft",
                        "marginRight",
                        "marginTop"
                    ],
                    marker: [
                        "markerEnd",
                        "markerMid",
                        "markerStart"
                    ],
                    mask: [
                        "maskClip",
                        "maskComposite",
                        "maskImage",
                        "maskMode",
                        "maskOrigin",
                        "maskPositionX",
                        "maskPositionY",
                        "maskRepeat",
                        "maskSize"
                    ],
                    maskPosition: [
                        "maskPositionX",
                        "maskPositionY"
                    ],
                    outline: [
                        "outlineColor",
                        "outlineStyle",
                        "outlineWidth"
                    ],
                    overflow: [
                        "overflowX",
                        "overflowY"
                    ],
                    padding: [
                        "paddingBottom",
                        "paddingLeft",
                        "paddingRight",
                        "paddingTop"
                    ],
                    placeContent: [
                        "alignContent",
                        "justifyContent"
                    ],
                    placeItems: [
                        "alignItems",
                        "justifyItems"
                    ],
                    placeSelf: [
                        "alignSelf",
                        "justifySelf"
                    ],
                    textDecoration: [
                        "textDecorationColor",
                        "textDecorationLine",
                        "textDecorationStyle"
                    ],
                    textEmphasis: [
                        "textEmphasisColor",
                        "textEmphasisStyle"
                    ],
                    transition: [
                        "transitionDelay",
                        "transitionDuration",
                        "transitionProperty",
                        "transitionTimingFunction"
                    ],
                    wordWrap: [
                        "overflowWrap"
                    ]
                };
                var isUnitlessNumber = {
                    animationIterationCount: true,
                    aspectRatio: true,
                    borderImageOutset: true,
                    borderImageSlice: true,
                    borderImageWidth: true,
                    boxFlex: true,
                    boxFlexGroup: true,
                    boxOrdinalGroup: true,
                    columnCount: true,
                    columns: true,
                    flex: true,
                    flexGrow: true,
                    flexPositive: true,
                    flexShrink: true,
                    flexNegative: true,
                    flexOrder: true,
                    gridArea: true,
                    gridRow: true,
                    gridRowEnd: true,
                    gridRowSpan: true,
                    gridRowStart: true,
                    gridColumn: true,
                    gridColumnEnd: true,
                    gridColumnSpan: true,
                    gridColumnStart: true,
                    fontWeight: true,
                    lineClamp: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    tabSize: true,
                    widows: true,
                    zIndex: true,
                    zoom: true,
                    // SVG-related properties
                    fillOpacity: true,
                    floodOpacity: true,
                    stopOpacity: true,
                    strokeDasharray: true,
                    strokeDashoffset: true,
                    strokeMiterlimit: true,
                    strokeOpacity: true,
                    strokeWidth: true
                };
                function prefixKey(prefix2, key) {
                    return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
                }
                var prefixes = [
                    "Webkit",
                    "ms",
                    "Moz",
                    "O"
                ];
                Object.keys(isUnitlessNumber).forEach(function(prop) {
                    prefixes.forEach(function(prefix2) {
                        isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
                    });
                });
                function dangerousStyleValue(name, value, isCustomProperty) {
                    var isEmpty = value == null || typeof value === "boolean" || value === "";
                    if (isEmpty) {
                        return "";
                    }
                    if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                        return value + "px";
                    }
                    {
                        checkCSSPropertyStringCoercion(value, name);
                    }
                    return ("" + value).trim();
                }
                var uppercasePattern = /([A-Z])/g;
                var msPattern = /^ms-/;
                function hyphenateStyleName(name) {
                    return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
                }
                var warnValidStyle = function warnValidStyle() {};
                {
                    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
                    var msPattern$1 = /^-ms-/;
                    var hyphenPattern = /-(.)/g;
                    var badStyleValueWithSemicolonPattern = /;\s*$/;
                    var warnedStyleNames = {};
                    var warnedStyleValues = {};
                    var warnedForNaNValue = false;
                    var warnedForInfinityValue = false;
                    var camelize = function camelize(string) {
                        return string.replace(hyphenPattern, function(_, character2) {
                            return character2.toUpperCase();
                        });
                    };
                    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        error("Unsupported style property %s. Did you mean %s?", name, // As Andi Smith suggests
                        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                        // is converted to lowercase `ms`.
                        camelize(name.replace(msPattern$1, "ms-")));
                    };
                    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
                    };
                    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
                        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                            return;
                        }
                        warnedStyleValues[value] = true;
                        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
                    };
                    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value) {
                        if (warnedForNaNValue) {
                            return;
                        }
                        warnedForNaNValue = true;
                        error("`NaN` is an invalid value for the `%s` css style property.", name);
                    };
                    var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value) {
                        if (warnedForInfinityValue) {
                            return;
                        }
                        warnedForInfinityValue = true;
                        error("`Infinity` is an invalid value for the `%s` css style property.", name);
                    };
                    warnValidStyle = function warnValidStyle(name, value) {
                        if (name.indexOf("-") > -1) {
                            warnHyphenatedStyleName(name);
                        } else if (badVendoredStyleNamePattern.test(name)) {
                            warnBadVendoredStyleName(name);
                        } else if (badStyleValueWithSemicolonPattern.test(value)) {
                            warnStyleValueWithSemicolon(name, value);
                        }
                        if (typeof value === "number") {
                            if (isNaN(value)) {
                                warnStyleValueIsNaN(name, value);
                            } else if (!isFinite(value)) {
                                warnStyleValueIsInfinity(name, value);
                            }
                        }
                    };
                }
                var warnValidStyle$1 = warnValidStyle;
                function createDangerousStringForStyles(styles) {
                    {
                        var serialized = "";
                        var delimiter2 = "";
                        for(var styleName in styles){
                            if (!styles.hasOwnProperty(styleName)) {
                                continue;
                            }
                            var styleValue = styles[styleName];
                            if (styleValue != null) {
                                var isCustomProperty = styleName.indexOf("--") === 0;
                                serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                                delimiter2 = ";";
                            }
                        }
                        return serialized || null;
                    }
                }
                function setValueForStyles(node2, styles) {
                    var style3 = node2.style;
                    for(var styleName in styles){
                        if (!styles.hasOwnProperty(styleName)) {
                            continue;
                        }
                        var isCustomProperty = styleName.indexOf("--") === 0;
                        {
                            if (!isCustomProperty) {
                                warnValidStyle$1(styleName, styles[styleName]);
                            }
                        }
                        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
                        if (styleName === "float") {
                            styleName = "cssFloat";
                        }
                        if (isCustomProperty) {
                            style3.setProperty(styleName, styleValue);
                        } else {
                            style3[styleName] = styleValue;
                        }
                    }
                }
                function isValueEmpty(value) {
                    return value == null || typeof value === "boolean" || value === "";
                }
                function expandShorthandMap(styles) {
                    var expanded = {};
                    for(var key in styles){
                        var longhands = shorthandToLonghand[key] || [
                            key
                        ];
                        for(var i = 0; i < longhands.length; i++){
                            expanded[longhands[i]] = key;
                        }
                    }
                    return expanded;
                }
                function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
                    {
                        if (!nextStyles) {
                            return;
                        }
                        var expandedUpdates = expandShorthandMap(styleUpdates);
                        var expandedStyles = expandShorthandMap(nextStyles);
                        var warnedAbout = {};
                        for(var key in expandedUpdates){
                            var originalKey = expandedUpdates[key];
                            var correctOriginalKey = expandedStyles[key];
                            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                                var warningKey = originalKey + "," + correctOriginalKey;
                                if (warnedAbout[warningKey]) {
                                    continue;
                                }
                                warnedAbout[warningKey] = true;
                                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                            }
                        }
                    }
                }
                var omittedCloseTags = {
                    area: true,
                    base: true,
                    br: true,
                    col: true,
                    embed: true,
                    hr: true,
                    img: true,
                    input: true,
                    keygen: true,
                    link: true,
                    meta: true,
                    param: true,
                    source: true,
                    track: true,
                    wbr: true
                };
                var voidElementTags = assign2({
                    menuitem: true
                }, omittedCloseTags);
                var HTML = "__html";
                function assertValidProps(tag, props) {
                    if (!props) {
                        return;
                    }
                    if (voidElementTags[tag]) {
                        if (props.children != null || props.dangerouslySetInnerHTML != null) {
                            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                        }
                    }
                    if (props.dangerouslySetInnerHTML != null) {
                        if (props.children != null) {
                            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                        }
                        if (_type_of(props.dangerouslySetInnerHTML) !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                        }
                    }
                    {
                        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
                        }
                    }
                    if (props.style != null && _type_of(props.style) !== "object") {
                        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
                    }
                }
                function isCustomComponent(tagName, props) {
                    if (tagName.indexOf("-") === -1) {
                        return typeof props.is === "string";
                    }
                    switch(tagName){
                        // These are reserved SVG and MathML elements.
                        // We don't mind this list too much because we expect it to never grow.
                        // The alternative is to track the namespace in a few places which is convoluted.
                        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                        case "annotation-xml":
                        case "color-profile":
                        case "font-face":
                        case "font-face-src":
                        case "font-face-uri":
                        case "font-face-format":
                        case "font-face-name":
                        case "missing-glyph":
                            return false;
                        default:
                            return true;
                    }
                }
                var possibleStandardNames = {
                    // HTML
                    accept: "accept",
                    acceptcharset: "acceptCharset",
                    "accept-charset": "acceptCharset",
                    accesskey: "accessKey",
                    action: "action",
                    allowfullscreen: "allowFullScreen",
                    alt: "alt",
                    as: "as",
                    async: "async",
                    autocapitalize: "autoCapitalize",
                    autocomplete: "autoComplete",
                    autocorrect: "autoCorrect",
                    autofocus: "autoFocus",
                    autoplay: "autoPlay",
                    autosave: "autoSave",
                    capture: "capture",
                    cellpadding: "cellPadding",
                    cellspacing: "cellSpacing",
                    challenge: "challenge",
                    charset: "charSet",
                    checked: "checked",
                    children: "children",
                    cite: "cite",
                    class: "className",
                    classid: "classID",
                    classname: "className",
                    cols: "cols",
                    colspan: "colSpan",
                    content: "content",
                    contenteditable: "contentEditable",
                    contextmenu: "contextMenu",
                    controls: "controls",
                    controlslist: "controlsList",
                    coords: "coords",
                    crossorigin: "crossOrigin",
                    dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
                    data: "data",
                    datetime: "dateTime",
                    default: "default",
                    defaultchecked: "defaultChecked",
                    defaultvalue: "defaultValue",
                    defer: "defer",
                    dir: "dir",
                    disabled: "disabled",
                    disablepictureinpicture: "disablePictureInPicture",
                    disableremoteplayback: "disableRemotePlayback",
                    download: "download",
                    draggable: "draggable",
                    enctype: "encType",
                    enterkeyhint: "enterKeyHint",
                    for: "htmlFor",
                    form: "form",
                    formmethod: "formMethod",
                    formaction: "formAction",
                    formenctype: "formEncType",
                    formnovalidate: "formNoValidate",
                    formtarget: "formTarget",
                    frameborder: "frameBorder",
                    headers: "headers",
                    height: "height",
                    hidden: "hidden",
                    high: "high",
                    href: "href",
                    hreflang: "hrefLang",
                    htmlfor: "htmlFor",
                    httpequiv: "httpEquiv",
                    "http-equiv": "httpEquiv",
                    icon: "icon",
                    id: "id",
                    imagesizes: "imageSizes",
                    imagesrcset: "imageSrcSet",
                    innerhtml: "innerHTML",
                    inputmode: "inputMode",
                    integrity: "integrity",
                    is: "is",
                    itemid: "itemID",
                    itemprop: "itemProp",
                    itemref: "itemRef",
                    itemscope: "itemScope",
                    itemtype: "itemType",
                    keyparams: "keyParams",
                    keytype: "keyType",
                    kind: "kind",
                    label: "label",
                    lang: "lang",
                    list: "list",
                    loop: "loop",
                    low: "low",
                    manifest: "manifest",
                    marginwidth: "marginWidth",
                    marginheight: "marginHeight",
                    max: "max",
                    maxlength: "maxLength",
                    media: "media",
                    mediagroup: "mediaGroup",
                    method: "method",
                    min: "min",
                    minlength: "minLength",
                    multiple: "multiple",
                    muted: "muted",
                    name: "name",
                    nomodule: "noModule",
                    nonce: "nonce",
                    novalidate: "noValidate",
                    open: "open",
                    optimum: "optimum",
                    pattern: "pattern",
                    placeholder: "placeholder",
                    playsinline: "playsInline",
                    poster: "poster",
                    preload: "preload",
                    profile: "profile",
                    radiogroup: "radioGroup",
                    readonly: "readOnly",
                    referrerpolicy: "referrerPolicy",
                    rel: "rel",
                    required: "required",
                    reversed: "reversed",
                    role: "role",
                    rows: "rows",
                    rowspan: "rowSpan",
                    sandbox: "sandbox",
                    scope: "scope",
                    scoped: "scoped",
                    scrolling: "scrolling",
                    seamless: "seamless",
                    selected: "selected",
                    shape: "shape",
                    size: "size",
                    sizes: "sizes",
                    span: "span",
                    spellcheck: "spellCheck",
                    src: "src",
                    srcdoc: "srcDoc",
                    srclang: "srcLang",
                    srcset: "srcSet",
                    start: "start",
                    step: "step",
                    style: "style",
                    summary: "summary",
                    tabindex: "tabIndex",
                    target: "target",
                    title: "title",
                    type: "type",
                    usemap: "useMap",
                    value: "value",
                    width: "width",
                    wmode: "wmode",
                    wrap: "wrap",
                    // SVG
                    about: "about",
                    accentheight: "accentHeight",
                    "accent-height": "accentHeight",
                    accumulate: "accumulate",
                    additive: "additive",
                    alignmentbaseline: "alignmentBaseline",
                    "alignment-baseline": "alignmentBaseline",
                    allowreorder: "allowReorder",
                    alphabetic: "alphabetic",
                    amplitude: "amplitude",
                    arabicform: "arabicForm",
                    "arabic-form": "arabicForm",
                    ascent: "ascent",
                    attributename: "attributeName",
                    attributetype: "attributeType",
                    autoreverse: "autoReverse",
                    azimuth: "azimuth",
                    basefrequency: "baseFrequency",
                    baselineshift: "baselineShift",
                    "baseline-shift": "baselineShift",
                    baseprofile: "baseProfile",
                    bbox: "bbox",
                    begin: "begin",
                    bias: "bias",
                    by: "by",
                    calcmode: "calcMode",
                    capheight: "capHeight",
                    "cap-height": "capHeight",
                    clip: "clip",
                    clippath: "clipPath",
                    "clip-path": "clipPath",
                    clippathunits: "clipPathUnits",
                    cliprule: "clipRule",
                    "clip-rule": "clipRule",
                    color: "color",
                    colorinterpolation: "colorInterpolation",
                    "color-interpolation": "colorInterpolation",
                    colorinterpolationfilters: "colorInterpolationFilters",
                    "color-interpolation-filters": "colorInterpolationFilters",
                    colorprofile: "colorProfile",
                    "color-profile": "colorProfile",
                    colorrendering: "colorRendering",
                    "color-rendering": "colorRendering",
                    contentscripttype: "contentScriptType",
                    contentstyletype: "contentStyleType",
                    cursor: "cursor",
                    cx: "cx",
                    cy: "cy",
                    d: "d",
                    datatype: "datatype",
                    decelerate: "decelerate",
                    descent: "descent",
                    diffuseconstant: "diffuseConstant",
                    direction: "direction",
                    display: "display",
                    divisor: "divisor",
                    dominantbaseline: "dominantBaseline",
                    "dominant-baseline": "dominantBaseline",
                    dur: "dur",
                    dx: "dx",
                    dy: "dy",
                    edgemode: "edgeMode",
                    elevation: "elevation",
                    enablebackground: "enableBackground",
                    "enable-background": "enableBackground",
                    end: "end",
                    exponent: "exponent",
                    externalresourcesrequired: "externalResourcesRequired",
                    fill: "fill",
                    fillopacity: "fillOpacity",
                    "fill-opacity": "fillOpacity",
                    fillrule: "fillRule",
                    "fill-rule": "fillRule",
                    filter: "filter",
                    filterres: "filterRes",
                    filterunits: "filterUnits",
                    floodopacity: "floodOpacity",
                    "flood-opacity": "floodOpacity",
                    floodcolor: "floodColor",
                    "flood-color": "floodColor",
                    focusable: "focusable",
                    fontfamily: "fontFamily",
                    "font-family": "fontFamily",
                    fontsize: "fontSize",
                    "font-size": "fontSize",
                    fontsizeadjust: "fontSizeAdjust",
                    "font-size-adjust": "fontSizeAdjust",
                    fontstretch: "fontStretch",
                    "font-stretch": "fontStretch",
                    fontstyle: "fontStyle",
                    "font-style": "fontStyle",
                    fontvariant: "fontVariant",
                    "font-variant": "fontVariant",
                    fontweight: "fontWeight",
                    "font-weight": "fontWeight",
                    format: "format",
                    from: "from",
                    fx: "fx",
                    fy: "fy",
                    g1: "g1",
                    g2: "g2",
                    glyphname: "glyphName",
                    "glyph-name": "glyphName",
                    glyphorientationhorizontal: "glyphOrientationHorizontal",
                    "glyph-orientation-horizontal": "glyphOrientationHorizontal",
                    glyphorientationvertical: "glyphOrientationVertical",
                    "glyph-orientation-vertical": "glyphOrientationVertical",
                    glyphref: "glyphRef",
                    gradienttransform: "gradientTransform",
                    gradientunits: "gradientUnits",
                    hanging: "hanging",
                    horizadvx: "horizAdvX",
                    "horiz-adv-x": "horizAdvX",
                    horizoriginx: "horizOriginX",
                    "horiz-origin-x": "horizOriginX",
                    ideographic: "ideographic",
                    imagerendering: "imageRendering",
                    "image-rendering": "imageRendering",
                    in2: "in2",
                    in: "in",
                    inlist: "inlist",
                    intercept: "intercept",
                    k1: "k1",
                    k2: "k2",
                    k3: "k3",
                    k4: "k4",
                    k: "k",
                    kernelmatrix: "kernelMatrix",
                    kernelunitlength: "kernelUnitLength",
                    kerning: "kerning",
                    keypoints: "keyPoints",
                    keysplines: "keySplines",
                    keytimes: "keyTimes",
                    lengthadjust: "lengthAdjust",
                    letterspacing: "letterSpacing",
                    "letter-spacing": "letterSpacing",
                    lightingcolor: "lightingColor",
                    "lighting-color": "lightingColor",
                    limitingconeangle: "limitingConeAngle",
                    local: "local",
                    markerend: "markerEnd",
                    "marker-end": "markerEnd",
                    markerheight: "markerHeight",
                    markermid: "markerMid",
                    "marker-mid": "markerMid",
                    markerstart: "markerStart",
                    "marker-start": "markerStart",
                    markerunits: "markerUnits",
                    markerwidth: "markerWidth",
                    mask: "mask",
                    maskcontentunits: "maskContentUnits",
                    maskunits: "maskUnits",
                    mathematical: "mathematical",
                    mode: "mode",
                    numoctaves: "numOctaves",
                    offset: "offset",
                    opacity: "opacity",
                    operator: "operator",
                    order: "order",
                    orient: "orient",
                    orientation: "orientation",
                    origin: "origin",
                    overflow: "overflow",
                    overlineposition: "overlinePosition",
                    "overline-position": "overlinePosition",
                    overlinethickness: "overlineThickness",
                    "overline-thickness": "overlineThickness",
                    paintorder: "paintOrder",
                    "paint-order": "paintOrder",
                    panose1: "panose1",
                    "panose-1": "panose1",
                    pathlength: "pathLength",
                    patterncontentunits: "patternContentUnits",
                    patterntransform: "patternTransform",
                    patternunits: "patternUnits",
                    pointerevents: "pointerEvents",
                    "pointer-events": "pointerEvents",
                    points: "points",
                    pointsatx: "pointsAtX",
                    pointsaty: "pointsAtY",
                    pointsatz: "pointsAtZ",
                    prefix: "prefix",
                    preservealpha: "preserveAlpha",
                    preserveaspectratio: "preserveAspectRatio",
                    primitiveunits: "primitiveUnits",
                    property: "property",
                    r: "r",
                    radius: "radius",
                    refx: "refX",
                    refy: "refY",
                    renderingintent: "renderingIntent",
                    "rendering-intent": "renderingIntent",
                    repeatcount: "repeatCount",
                    repeatdur: "repeatDur",
                    requiredextensions: "requiredExtensions",
                    requiredfeatures: "requiredFeatures",
                    resource: "resource",
                    restart: "restart",
                    result: "result",
                    results: "results",
                    rotate: "rotate",
                    rx: "rx",
                    ry: "ry",
                    scale: "scale",
                    security: "security",
                    seed: "seed",
                    shaperendering: "shapeRendering",
                    "shape-rendering": "shapeRendering",
                    slope: "slope",
                    spacing: "spacing",
                    specularconstant: "specularConstant",
                    specularexponent: "specularExponent",
                    speed: "speed",
                    spreadmethod: "spreadMethod",
                    startoffset: "startOffset",
                    stddeviation: "stdDeviation",
                    stemh: "stemh",
                    stemv: "stemv",
                    stitchtiles: "stitchTiles",
                    stopcolor: "stopColor",
                    "stop-color": "stopColor",
                    stopopacity: "stopOpacity",
                    "stop-opacity": "stopOpacity",
                    strikethroughposition: "strikethroughPosition",
                    "strikethrough-position": "strikethroughPosition",
                    strikethroughthickness: "strikethroughThickness",
                    "strikethrough-thickness": "strikethroughThickness",
                    string: "string",
                    stroke: "stroke",
                    strokedasharray: "strokeDasharray",
                    "stroke-dasharray": "strokeDasharray",
                    strokedashoffset: "strokeDashoffset",
                    "stroke-dashoffset": "strokeDashoffset",
                    strokelinecap: "strokeLinecap",
                    "stroke-linecap": "strokeLinecap",
                    strokelinejoin: "strokeLinejoin",
                    "stroke-linejoin": "strokeLinejoin",
                    strokemiterlimit: "strokeMiterlimit",
                    "stroke-miterlimit": "strokeMiterlimit",
                    strokewidth: "strokeWidth",
                    "stroke-width": "strokeWidth",
                    strokeopacity: "strokeOpacity",
                    "stroke-opacity": "strokeOpacity",
                    suppresscontenteditablewarning: "suppressContentEditableWarning",
                    suppresshydrationwarning: "suppressHydrationWarning",
                    surfacescale: "surfaceScale",
                    systemlanguage: "systemLanguage",
                    tablevalues: "tableValues",
                    targetx: "targetX",
                    targety: "targetY",
                    textanchor: "textAnchor",
                    "text-anchor": "textAnchor",
                    textdecoration: "textDecoration",
                    "text-decoration": "textDecoration",
                    textlength: "textLength",
                    textrendering: "textRendering",
                    "text-rendering": "textRendering",
                    to: "to",
                    transform: "transform",
                    typeof: "typeof",
                    u1: "u1",
                    u2: "u2",
                    underlineposition: "underlinePosition",
                    "underline-position": "underlinePosition",
                    underlinethickness: "underlineThickness",
                    "underline-thickness": "underlineThickness",
                    unicode: "unicode",
                    unicodebidi: "unicodeBidi",
                    "unicode-bidi": "unicodeBidi",
                    unicoderange: "unicodeRange",
                    "unicode-range": "unicodeRange",
                    unitsperem: "unitsPerEm",
                    "units-per-em": "unitsPerEm",
                    unselectable: "unselectable",
                    valphabetic: "vAlphabetic",
                    "v-alphabetic": "vAlphabetic",
                    values: "values",
                    vectoreffect: "vectorEffect",
                    "vector-effect": "vectorEffect",
                    version: "version",
                    vertadvy: "vertAdvY",
                    "vert-adv-y": "vertAdvY",
                    vertoriginx: "vertOriginX",
                    "vert-origin-x": "vertOriginX",
                    vertoriginy: "vertOriginY",
                    "vert-origin-y": "vertOriginY",
                    vhanging: "vHanging",
                    "v-hanging": "vHanging",
                    videographic: "vIdeographic",
                    "v-ideographic": "vIdeographic",
                    viewbox: "viewBox",
                    viewtarget: "viewTarget",
                    visibility: "visibility",
                    vmathematical: "vMathematical",
                    "v-mathematical": "vMathematical",
                    vocab: "vocab",
                    widths: "widths",
                    wordspacing: "wordSpacing",
                    "word-spacing": "wordSpacing",
                    writingmode: "writingMode",
                    "writing-mode": "writingMode",
                    x1: "x1",
                    x2: "x2",
                    x: "x",
                    xchannelselector: "xChannelSelector",
                    xheight: "xHeight",
                    "x-height": "xHeight",
                    xlinkactuate: "xlinkActuate",
                    "xlink:actuate": "xlinkActuate",
                    xlinkarcrole: "xlinkArcrole",
                    "xlink:arcrole": "xlinkArcrole",
                    xlinkhref: "xlinkHref",
                    "xlink:href": "xlinkHref",
                    xlinkrole: "xlinkRole",
                    "xlink:role": "xlinkRole",
                    xlinkshow: "xlinkShow",
                    "xlink:show": "xlinkShow",
                    xlinktitle: "xlinkTitle",
                    "xlink:title": "xlinkTitle",
                    xlinktype: "xlinkType",
                    "xlink:type": "xlinkType",
                    xmlbase: "xmlBase",
                    "xml:base": "xmlBase",
                    xmllang: "xmlLang",
                    "xml:lang": "xmlLang",
                    xmlns: "xmlns",
                    "xml:space": "xmlSpace",
                    xmlnsxlink: "xmlnsXlink",
                    "xmlns:xlink": "xmlnsXlink",
                    xmlspace: "xmlSpace",
                    y1: "y1",
                    y2: "y2",
                    y: "y",
                    ychannelselector: "yChannelSelector",
                    z: "z",
                    zoomandpan: "zoomAndPan"
                };
                var ariaProperties = {
                    "aria-current": 0,
                    // state
                    "aria-description": 0,
                    "aria-details": 0,
                    "aria-disabled": 0,
                    // state
                    "aria-hidden": 0,
                    // state
                    "aria-invalid": 0,
                    // state
                    "aria-keyshortcuts": 0,
                    "aria-label": 0,
                    "aria-roledescription": 0,
                    // Widget Attributes
                    "aria-autocomplete": 0,
                    "aria-checked": 0,
                    "aria-expanded": 0,
                    "aria-haspopup": 0,
                    "aria-level": 0,
                    "aria-modal": 0,
                    "aria-multiline": 0,
                    "aria-multiselectable": 0,
                    "aria-orientation": 0,
                    "aria-placeholder": 0,
                    "aria-pressed": 0,
                    "aria-readonly": 0,
                    "aria-required": 0,
                    "aria-selected": 0,
                    "aria-sort": 0,
                    "aria-valuemax": 0,
                    "aria-valuemin": 0,
                    "aria-valuenow": 0,
                    "aria-valuetext": 0,
                    // Live Region Attributes
                    "aria-atomic": 0,
                    "aria-busy": 0,
                    "aria-live": 0,
                    "aria-relevant": 0,
                    // Drag-and-Drop Attributes
                    "aria-dropeffect": 0,
                    "aria-grabbed": 0,
                    // Relationship Attributes
                    "aria-activedescendant": 0,
                    "aria-colcount": 0,
                    "aria-colindex": 0,
                    "aria-colspan": 0,
                    "aria-controls": 0,
                    "aria-describedby": 0,
                    "aria-errormessage": 0,
                    "aria-flowto": 0,
                    "aria-labelledby": 0,
                    "aria-owns": 0,
                    "aria-posinset": 0,
                    "aria-rowcount": 0,
                    "aria-rowindex": 0,
                    "aria-rowspan": 0,
                    "aria-setsize": 0
                };
                var warnedProperties = {};
                var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
                var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
                function validateProperty(tagName, name) {
                    {
                        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                            return true;
                        }
                        if (rARIACamel.test(name)) {
                            var ariaName = "aria-" + name.slice(4).toLowerCase();
                            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                            if (correctName == null) {
                                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                                warnedProperties[name] = true;
                                return true;
                            }
                            if (name !== correctName) {
                                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                        if (rARIA.test(name)) {
                            var lowerCasedName = name.toLowerCase();
                            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                            if (standardName == null) {
                                warnedProperties[name] = true;
                                return false;
                            }
                            if (name !== standardName) {
                                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                    }
                    return true;
                }
                function warnInvalidARIAProps(type, props) {
                    {
                        var invalidProps = [];
                        for(var key in props){
                            var isValid = validateProperty(type, key);
                            if (!isValid) {
                                invalidProps.push(key);
                            }
                        }
                        var unknownPropString = invalidProps.map(function(prop) {
                            return "`" + prop + "`";
                        }).join(", ");
                        if (invalidProps.length === 1) {
                            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
                        } else if (invalidProps.length > 1) {
                            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
                        }
                    }
                }
                function validateProperties(type, props) {
                    if (isCustomComponent(type, props)) {
                        return;
                    }
                    warnInvalidARIAProps(type, props);
                }
                var didWarnValueNull = false;
                function validateProperties$1(type, props) {
                    {
                        if (type !== "input" && type !== "textarea" && type !== "select") {
                            return;
                        }
                        if (props != null && props.value === null && !didWarnValueNull) {
                            didWarnValueNull = true;
                            if (type === "select" && props.multiple) {
                                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                            } else {
                                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                            }
                        }
                    }
                }
                var validateProperty$1 = function validateProperty$1() {};
                {
                    var warnedProperties$1 = {};
                    var EVENT_NAME_REGEX = /^on./;
                    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
                    var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
                    var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
                    validateProperty$1 = function validateProperty$1(tagName, name, value, eventRegistry) {
                        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                            return true;
                        }
                        var lowerCasedName = name.toLowerCase();
                        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (eventRegistry != null) {
                            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                            if (registrationNameDependencies2.hasOwnProperty(name)) {
                                return true;
                            }
                            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                            if (registrationName != null) {
                                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                            if (EVENT_NAME_REGEX.test(name)) {
                                error("Unknown event handler property `%s`. It will be ignored.", name);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        } else if (EVENT_NAME_REGEX.test(name)) {
                            if (INVALID_EVENT_NAME_REGEX.test(name)) {
                                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                            return true;
                        }
                        if (lowerCasedName === "innerhtml") {
                            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === "aria") {
                            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value === "undefined" ? "undefined" : _type_of(value));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === "number" && isNaN(value)) {
                            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        var propertyInfo = getPropertyInfo(name);
                        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
                        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            var standardName = possibleStandardNames[lowerCasedName];
                            if (standardName !== name) {
                                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        } else if (!isReserved && name !== lowerCasedName) {
                            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            if (value) {
                                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                            } else {
                                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (isReserved) {
                            return true;
                        }
                        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            warnedProperties$1[name] = true;
                            return false;
                        }
                        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        return true;
                    };
                }
                var warnUnknownProperties = function warnUnknownProperties(type, props, eventRegistry) {
                    {
                        var unknownProps = [];
                        for(var key in props){
                            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                            if (!isValid) {
                                unknownProps.push(key);
                            }
                        }
                        var unknownPropString = unknownProps.map(function(prop) {
                            return "`" + prop + "`";
                        }).join(", ");
                        if (unknownProps.length === 1) {
                            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
                        } else if (unknownProps.length > 1) {
                            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
                        }
                    }
                };
                function validateProperties$2(type, props, eventRegistry) {
                    if (isCustomComponent(type, props)) {
                        return;
                    }
                    warnUnknownProperties(type, props, eventRegistry);
                }
                var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
                var IS_NON_DELEGATED = 1 << 1;
                var IS_CAPTURE_PHASE = 1 << 2;
                var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
                var currentReplayingEvent = null;
                function setReplayingEvent(event) {
                    {
                        if (currentReplayingEvent !== null) {
                            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    currentReplayingEvent = event;
                }
                function resetReplayingEvent() {
                    {
                        if (currentReplayingEvent === null) {
                            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    currentReplayingEvent = null;
                }
                function isReplayingEvent(event) {
                    return event === currentReplayingEvent;
                }
                function getEventTarget(nativeEvent) {
                    var target = nativeEvent.target || nativeEvent.srcElement || window;
                    if (target.correspondingUseElement) {
                        target = target.correspondingUseElement;
                    }
                    return target.nodeType === TEXT_NODE ? target.parentNode : target;
                }
                var restoreImpl = null;
                var restoreTarget = null;
                var restoreQueue = null;
                function restoreStateOfTarget(target) {
                    var internalInstance = getInstanceFromNode(target);
                    if (!internalInstance) {
                        return;
                    }
                    if (typeof restoreImpl !== "function") {
                        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var stateNode = internalInstance.stateNode;
                    if (stateNode) {
                        var _props = getFiberCurrentPropsFromNode(stateNode);
                        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
                    }
                }
                function setRestoreImplementation(impl) {
                    restoreImpl = impl;
                }
                function enqueueStateRestore(target) {
                    if (restoreTarget) {
                        if (restoreQueue) {
                            restoreQueue.push(target);
                        } else {
                            restoreQueue = [
                                target
                            ];
                        }
                    } else {
                        restoreTarget = target;
                    }
                }
                function needsStateRestore() {
                    return restoreTarget !== null || restoreQueue !== null;
                }
                function restoreStateIfNeeded() {
                    if (!restoreTarget) {
                        return;
                    }
                    var target = restoreTarget;
                    var queuedTargets = restoreQueue;
                    restoreTarget = null;
                    restoreQueue = null;
                    restoreStateOfTarget(target);
                    if (queuedTargets) {
                        for(var i = 0; i < queuedTargets.length; i++){
                            restoreStateOfTarget(queuedTargets[i]);
                        }
                    }
                }
                var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
                    return fn(bookkeeping);
                };
                var flushSyncImpl = function flushSyncImpl() {};
                var isInsideEventHandler = false;
                function finishEventHandler() {
                    var controlledComponentsHavePendingUpdates = needsStateRestore();
                    if (controlledComponentsHavePendingUpdates) {
                        flushSyncImpl();
                        restoreStateIfNeeded();
                    }
                }
                function batchedUpdates(fn, a, b) {
                    if (isInsideEventHandler) {
                        return fn(a, b);
                    }
                    isInsideEventHandler = true;
                    try {
                        return batchedUpdatesImpl(fn, a, b);
                    } finally{
                        isInsideEventHandler = false;
                        finishEventHandler();
                    }
                }
                function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
                    batchedUpdatesImpl = _batchedUpdatesImpl;
                    flushSyncImpl = _flushSyncImpl;
                }
                function isInteractive(tag) {
                    return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
                }
                function shouldPreventMouseEvent(name, type, props) {
                    switch(name){
                        case "onClick":
                        case "onClickCapture":
                        case "onDoubleClick":
                        case "onDoubleClickCapture":
                        case "onMouseDown":
                        case "onMouseDownCapture":
                        case "onMouseMove":
                        case "onMouseMoveCapture":
                        case "onMouseUp":
                        case "onMouseUpCapture":
                        case "onMouseEnter":
                            return !!(props.disabled && isInteractive(type));
                        default:
                            return false;
                    }
                }
                function getListener(inst, registrationName) {
                    var stateNode = inst.stateNode;
                    if (stateNode === null) {
                        return null;
                    }
                    var props = getFiberCurrentPropsFromNode(stateNode);
                    if (props === null) {
                        return null;
                    }
                    var listener = props[registrationName];
                    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                        return null;
                    }
                    if (listener && typeof listener !== "function") {
                        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + (typeof listener === "undefined" ? "undefined" : _type_of(listener)) + "` type.");
                    }
                    return listener;
                }
                var passiveBrowserEventsSupported = false;
                if (canUseDOM) {
                    try {
                        var options = {};
                        Object.defineProperty(options, "passive", {
                            get: function get() {
                                passiveBrowserEventsSupported = true;
                            }
                        });
                        window.addEventListener("test", options, options);
                        window.removeEventListener("test", options, options);
                    } catch (e) {
                        passiveBrowserEventsSupported = false;
                    }
                }
                function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
                    var funcArgs = Array.prototype.slice.call(arguments, 3);
                    try {
                        func.apply(context, funcArgs);
                    } catch (error2) {
                        this.onError(error2);
                    }
                }
                var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
                {
                    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
                        var fakeNode = document.createElement("react");
                        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                            if (typeof document === "undefined" || document === null) {
                                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                            }
                            var evt = document.createEvent("Event");
                            var didCall = false;
                            var didError = true;
                            var windowEvent = window.event;
                            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                            function restoreAfterDispatch() {
                                fakeNode.removeEventListener(evtType, callCallback2, false);
                                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                                    window.event = windowEvent;
                                }
                            }
                            var funcArgs = Array.prototype.slice.call(arguments, 3);
                            function callCallback2() {
                                didCall = true;
                                restoreAfterDispatch();
                                func.apply(context, funcArgs);
                                didError = false;
                            }
                            var error2;
                            var didSetError = false;
                            var isCrossOriginError = false;
                            function handleWindowError(event) {
                                error2 = event.error;
                                didSetError = true;
                                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                                    isCrossOriginError = true;
                                }
                                if (event.defaultPrevented) {
                                    if (error2 != null && (typeof error2 === "undefined" ? "undefined" : _type_of(error2)) === "object") {
                                        try {
                                            error2._suppressLogging = true;
                                        } catch (inner) {}
                                    }
                                }
                            }
                            var evtType = "react-" + (name ? name : "invokeguardedcallback");
                            window.addEventListener("error", handleWindowError);
                            fakeNode.addEventListener(evtType, callCallback2, false);
                            evt.initEvent(evtType, false, false);
                            fakeNode.dispatchEvent(evt);
                            if (windowEventDescriptor) {
                                Object.defineProperty(window, "event", windowEventDescriptor);
                            }
                            if (didCall && didError) {
                                if (!didSetError) {
                                    error2 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                                } else if (isCrossOriginError) {
                                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                                }
                                this.onError(error2);
                            }
                            window.removeEventListener("error", handleWindowError);
                            if (!didCall) {
                                restoreAfterDispatch();
                                return invokeGuardedCallbackProd.apply(this, arguments);
                            }
                        };
                    }
                }
                var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
                var hasError = false;
                var caughtError = null;
                var hasRethrowError = false;
                var rethrowError = null;
                var reporter = {
                    onError: function onError(error2) {
                        hasError = true;
                        caughtError = error2;
                    }
                };
                function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
                    hasError = false;
                    caughtError = null;
                    invokeGuardedCallbackImpl$1.apply(reporter, arguments);
                }
                function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
                    invokeGuardedCallback.apply(this, arguments);
                    if (hasError) {
                        var error2 = clearCaughtError();
                        if (!hasRethrowError) {
                            hasRethrowError = true;
                            rethrowError = error2;
                        }
                    }
                }
                function rethrowCaughtError() {
                    if (hasRethrowError) {
                        var error2 = rethrowError;
                        hasRethrowError = false;
                        rethrowError = null;
                        throw error2;
                    }
                }
                function hasCaughtError() {
                    return hasError;
                }
                function clearCaughtError() {
                    if (hasError) {
                        var error2 = caughtError;
                        hasError = false;
                        caughtError = null;
                        return error2;
                    } else {
                        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                function get2(key) {
                    return key._reactInternals;
                }
                function has(key) {
                    return key._reactInternals !== void 0;
                }
                function set2(key, value) {
                    key._reactInternals = value;
                }
                var NoFlags = /*                      */ 0;
                var PerformedWork = /*                */ 1;
                var Placement = /*                    */ 2;
                var Update = /*                       */ 4;
                var ChildDeletion = /*                */ 16;
                var ContentReset = /*                 */ 32;
                var Callback = /*                     */ 64;
                var DidCapture = /*                   */ 128;
                var ForceClientRender = /*            */ 256;
                var Ref = /*                          */ 512;
                var Snapshot = /*                     */ 1024;
                var Passive = /*                      */ 2048;
                var Hydrating = /*                    */ 4096;
                var Visibility = /*                   */ 8192;
                var StoreConsistency = /*             */ 16384;
                var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
                var HostEffectMask = /*               */ 32767;
                var Incomplete = /*                   */ 32768;
                var ShouldCapture = /*                */ 65536;
                var ForceUpdateForLegacySuspense = /* */ 131072;
                var Forked = /*                       */ 1048576;
                var RefStatic = /*                    */ 2097152;
                var LayoutStatic = /*                 */ 4194304;
                var PassiveStatic = /*                */ 8388608;
                var MountLayoutDev = /*               */ 16777216;
                var MountPassiveDev = /*              */ 33554432;
                var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
                // flag logic (see #20043)
                Update | Snapshot | 0;
                var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
                var LayoutMask = Update | Callback | Ref | Visibility;
                var PassiveMask = Passive | ChildDeletion;
                var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                function getNearestMountedFiber(fiber) {
                    var node2 = fiber;
                    var nearestMounted = fiber;
                    if (!fiber.alternate) {
                        var nextNode = node2;
                        do {
                            node2 = nextNode;
                            if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                                nearestMounted = node2.return;
                            }
                            nextNode = node2.return;
                        }while (nextNode);
                    } else {
                        while(node2.return){
                            node2 = node2.return;
                        }
                    }
                    if (node2.tag === HostRoot) {
                        return nearestMounted;
                    }
                    return null;
                }
                function getSuspenseInstanceFromFiber(fiber) {
                    if (fiber.tag === SuspenseComponent) {
                        var suspenseState = fiber.memoizedState;
                        if (suspenseState === null) {
                            var current2 = fiber.alternate;
                            if (current2 !== null) {
                                suspenseState = current2.memoizedState;
                            }
                        }
                        if (suspenseState !== null) {
                            return suspenseState.dehydrated;
                        }
                    }
                    return null;
                }
                function getContainerFromFiber(fiber) {
                    return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
                }
                function isFiberMounted(fiber) {
                    return getNearestMountedFiber(fiber) === fiber;
                }
                function isMounted(component) {
                    {
                        var owner = ReactCurrentOwner.current;
                        if (owner !== null && owner.tag === ClassComponent) {
                            var ownerFiber = owner;
                            var instance = ownerFiber.stateNode;
                            if (!instance._warnedAboutRefsInRender) {
                                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                            }
                            instance._warnedAboutRefsInRender = true;
                        }
                    }
                    var fiber = get2(component);
                    if (!fiber) {
                        return false;
                    }
                    return getNearestMountedFiber(fiber) === fiber;
                }
                function assertIsMounted(fiber) {
                    if (getNearestMountedFiber(fiber) !== fiber) {
                        throw new Error("Unable to find node on an unmounted component.");
                    }
                }
                function findCurrentFiberUsingSlowPath(fiber) {
                    var alternate = fiber.alternate;
                    if (!alternate) {
                        var nearestMounted = getNearestMountedFiber(fiber);
                        if (nearestMounted === null) {
                            throw new Error("Unable to find node on an unmounted component.");
                        }
                        if (nearestMounted !== fiber) {
                            return null;
                        }
                        return fiber;
                    }
                    var a = fiber;
                    var b = alternate;
                    while(true){
                        var parentA = a.return;
                        if (parentA === null) {
                            break;
                        }
                        var parentB = parentA.alternate;
                        if (parentB === null) {
                            var nextParent = parentA.return;
                            if (nextParent !== null) {
                                a = b = nextParent;
                                continue;
                            }
                            break;
                        }
                        if (parentA.child === parentB.child) {
                            var child = parentA.child;
                            while(child){
                                if (child === a) {
                                    assertIsMounted(parentA);
                                    return fiber;
                                }
                                if (child === b) {
                                    assertIsMounted(parentA);
                                    return alternate;
                                }
                                child = child.sibling;
                            }
                            throw new Error("Unable to find node on an unmounted component.");
                        }
                        if (a.return !== b.return) {
                            a = parentA;
                            b = parentB;
                        } else {
                            var didFindChild = false;
                            var _child = parentA.child;
                            while(_child){
                                if (_child === a) {
                                    didFindChild = true;
                                    a = parentA;
                                    b = parentB;
                                    break;
                                }
                                if (_child === b) {
                                    didFindChild = true;
                                    b = parentA;
                                    a = parentB;
                                    break;
                                }
                                _child = _child.sibling;
                            }
                            if (!didFindChild) {
                                _child = parentB.child;
                                while(_child){
                                    if (_child === a) {
                                        didFindChild = true;
                                        a = parentB;
                                        b = parentA;
                                        break;
                                    }
                                    if (_child === b) {
                                        didFindChild = true;
                                        b = parentB;
                                        a = parentA;
                                        break;
                                    }
                                    _child = _child.sibling;
                                }
                                if (!didFindChild) {
                                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                                }
                            }
                        }
                        if (a.alternate !== b) {
                            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    if (a.tag !== HostRoot) {
                        throw new Error("Unable to find node on an unmounted component.");
                    }
                    if (a.stateNode.current === a) {
                        return fiber;
                    }
                    return alternate;
                }
                function findCurrentHostFiber(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
                }
                function findCurrentHostFiberImpl(node2) {
                    if (node2.tag === HostComponent || node2.tag === HostText) {
                        return node2;
                    }
                    var child = node2.child;
                    while(child !== null){
                        var match = findCurrentHostFiberImpl(child);
                        if (match !== null) {
                            return match;
                        }
                        child = child.sibling;
                    }
                    return null;
                }
                function findCurrentHostFiberWithNoPortals(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
                }
                function findCurrentHostFiberWithNoPortalsImpl(node2) {
                    if (node2.tag === HostComponent || node2.tag === HostText) {
                        return node2;
                    }
                    var child = node2.child;
                    while(child !== null){
                        if (child.tag !== HostPortal) {
                            var match = findCurrentHostFiberWithNoPortalsImpl(child);
                            if (match !== null) {
                                return match;
                            }
                        }
                        child = child.sibling;
                    }
                    return null;
                }
                var scheduleCallback = Scheduler.unstable_scheduleCallback;
                var cancelCallback = Scheduler.unstable_cancelCallback;
                var shouldYield = Scheduler.unstable_shouldYield;
                var requestPaint = Scheduler.unstable_requestPaint;
                var now = Scheduler.unstable_now;
                var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
                var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
                var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
                var NormalPriority = Scheduler.unstable_NormalPriority;
                var LowPriority = Scheduler.unstable_LowPriority;
                var IdlePriority = Scheduler.unstable_IdlePriority;
                var unstable_yieldValue = Scheduler.unstable_yieldValue;
                var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
                var rendererID = null;
                var injectedHook = null;
                var injectedProfilingHooks = null;
                var hasLoggedError = false;
                var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
                function injectInternals(internals) {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
                        return false;
                    }
                    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                    if (hook.isDisabled) {
                        return true;
                    }
                    if (!hook.supportsFiber) {
                        {
                            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
                        }
                        return true;
                    }
                    try {
                        if (enableSchedulingProfiler) {
                            internals = assign2({}, internals, {
                                getLaneLabelMap: getLaneLabelMap,
                                injectProfilingHooks: injectProfilingHooks
                            });
                        }
                        rendererID = hook.inject(internals);
                        injectedHook = hook;
                    } catch (err) {
                        {
                            error("React instrumentation encountered an error: %s.", err);
                        }
                    }
                    if (hook.checkDCE) {
                        return true;
                    } else {
                        return false;
                    }
                }
                function onScheduleRoot(root2, children) {
                    {
                        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                            try {
                                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                            } catch (err) {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onCommitRoot(root2, eventPriority) {
                    if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
                        try {
                            var didError = (root2.current.flags & DidCapture) === DidCapture;
                            if (enableProfilerTimer) {
                                var schedulerPriority;
                                switch(eventPriority){
                                    case DiscreteEventPriority:
                                        schedulerPriority = ImmediatePriority;
                                        break;
                                    case ContinuousEventPriority:
                                        schedulerPriority = UserBlockingPriority;
                                        break;
                                    case DefaultEventPriority:
                                        schedulerPriority = NormalPriority;
                                        break;
                                    case IdleEventPriority:
                                        schedulerPriority = IdlePriority;
                                        break;
                                    default:
                                        schedulerPriority = NormalPriority;
                                        break;
                                }
                                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                            } else {
                                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                            }
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onPostCommitRoot(root2) {
                    if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
                        try {
                            injectedHook.onPostCommitFiberRoot(rendererID, root2);
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function onCommitUnmount(fiber) {
                    if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
                        try {
                            injectedHook.onCommitFiberUnmount(rendererID, fiber);
                        } catch (err) {
                            {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error("React instrumentation encountered an error: %s", err);
                                }
                            }
                        }
                    }
                }
                function setIsStrictModeForDevtools(newIsStrictMode) {
                    {
                        if (typeof unstable_yieldValue === "function") {
                            unstable_setDisableYieldValue(newIsStrictMode);
                            setSuppressWarning(newIsStrictMode);
                        }
                        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                            try {
                                injectedHook.setStrictMode(rendererID, newIsStrictMode);
                            } catch (err) {
                                {
                                    if (!hasLoggedError) {
                                        hasLoggedError = true;
                                        error("React instrumentation encountered an error: %s", err);
                                    }
                                }
                            }
                        }
                    }
                }
                function injectProfilingHooks(profilingHooks) {
                    injectedProfilingHooks = profilingHooks;
                }
                function getLaneLabelMap() {
                    {
                        var map = /* @__PURE__ */ new Map();
                        var lane = 1;
                        for(var index2 = 0; index2 < TotalLanes; index2++){
                            var label = getLabelForLane(lane);
                            map.set(lane, label);
                            lane *= 2;
                        }
                        return map;
                    }
                }
                function markCommitStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                            injectedProfilingHooks.markCommitStarted(lanes);
                        }
                    }
                }
                function markCommitStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                            injectedProfilingHooks.markCommitStopped();
                        }
                    }
                }
                function markComponentRenderStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                            injectedProfilingHooks.markComponentRenderStarted(fiber);
                        }
                    }
                }
                function markComponentRenderStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                            injectedProfilingHooks.markComponentRenderStopped();
                        }
                    }
                }
                function markComponentPassiveEffectMountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
                        }
                    }
                }
                function markComponentPassiveEffectMountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
                        }
                    }
                }
                function markComponentPassiveEffectUnmountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
                        }
                    }
                }
                function markComponentPassiveEffectUnmountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
                        }
                    }
                }
                function markComponentLayoutEffectMountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
                        }
                    }
                }
                function markComponentLayoutEffectMountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
                        }
                    }
                }
                function markComponentLayoutEffectUnmountStarted(fiber) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
                        }
                    }
                }
                function markComponentLayoutEffectUnmountStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
                        }
                    }
                }
                function markComponentErrored(fiber, thrownValue, lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
                        }
                    }
                }
                function markComponentSuspended(fiber, wakeable, lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
                        }
                    }
                }
                function markLayoutEffectsStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
                        }
                    }
                }
                function markLayoutEffectsStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                            injectedProfilingHooks.markLayoutEffectsStopped();
                        }
                    }
                }
                function markPassiveEffectsStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
                        }
                    }
                }
                function markPassiveEffectsStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                            injectedProfilingHooks.markPassiveEffectsStopped();
                        }
                    }
                }
                function markRenderStarted(lanes) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                            injectedProfilingHooks.markRenderStarted(lanes);
                        }
                    }
                }
                function markRenderYielded() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                            injectedProfilingHooks.markRenderYielded();
                        }
                    }
                }
                function markRenderStopped() {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                            injectedProfilingHooks.markRenderStopped();
                        }
                    }
                }
                function markRenderScheduled(lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                            injectedProfilingHooks.markRenderScheduled(lane);
                        }
                    }
                }
                function markForceUpdateScheduled(fiber, lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
                        }
                    }
                }
                function markStateUpdateScheduled(fiber, lane) {
                    {
                        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
                        }
                    }
                }
                var NoMode = /*                         */ 0;
                var ConcurrentMode = /*                 */ 1;
                var ProfileMode = /*                    */ 2;
                var StrictLegacyMode = /*               */ 8;
                var StrictEffectsMode = /*              */ 16;
                var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
                var log = Math.log;
                var LN2 = Math.LN2;
                function clz32Fallback(x) {
                    var asUint = x >>> 0;
                    if (asUint === 0) {
                        return 32;
                    }
                    return 31 - (log(asUint) / LN2 | 0) | 0;
                }
                var TotalLanes = 31;
                var NoLanes = /*                        */ 0;
                var NoLane = /*                          */ 0;
                var SyncLane = /*                        */ 1;
                var InputContinuousHydrationLane = /*    */ 2;
                var InputContinuousLane = /*             */ 4;
                var DefaultHydrationLane = /*            */ 8;
                var DefaultLane = /*                     */ 16;
                var TransitionHydrationLane = /*                */ 32;
                var TransitionLanes = /*                       */ 4194240;
                var TransitionLane1 = /*                        */ 64;
                var TransitionLane2 = /*                        */ 128;
                var TransitionLane3 = /*                        */ 256;
                var TransitionLane4 = /*                        */ 512;
                var TransitionLane5 = /*                        */ 1024;
                var TransitionLane6 = /*                        */ 2048;
                var TransitionLane7 = /*                        */ 4096;
                var TransitionLane8 = /*                        */ 8192;
                var TransitionLane9 = /*                        */ 16384;
                var TransitionLane10 = /*                       */ 32768;
                var TransitionLane11 = /*                       */ 65536;
                var TransitionLane12 = /*                       */ 131072;
                var TransitionLane13 = /*                       */ 262144;
                var TransitionLane14 = /*                       */ 524288;
                var TransitionLane15 = /*                       */ 1048576;
                var TransitionLane16 = /*                       */ 2097152;
                var RetryLanes = /*                            */ 130023424;
                var RetryLane1 = /*                             */ 4194304;
                var RetryLane2 = /*                             */ 8388608;
                var RetryLane3 = /*                             */ 16777216;
                var RetryLane4 = /*                             */ 33554432;
                var RetryLane5 = /*                             */ 67108864;
                var SomeRetryLane = RetryLane1;
                var SelectiveHydrationLane = /*          */ 134217728;
                var NonIdleLanes = /*                          */ 268435455;
                var IdleHydrationLane = /*               */ 268435456;
                var IdleLane = /*                        */ 536870912;
                var OffscreenLane = /*                   */ 1073741824;
                function getLabelForLane(lane) {
                    {
                        if (lane & SyncLane) {
                            return "Sync";
                        }
                        if (lane & InputContinuousHydrationLane) {
                            return "InputContinuousHydration";
                        }
                        if (lane & InputContinuousLane) {
                            return "InputContinuous";
                        }
                        if (lane & DefaultHydrationLane) {
                            return "DefaultHydration";
                        }
                        if (lane & DefaultLane) {
                            return "Default";
                        }
                        if (lane & TransitionHydrationLane) {
                            return "TransitionHydration";
                        }
                        if (lane & TransitionLanes) {
                            return "Transition";
                        }
                        if (lane & RetryLanes) {
                            return "Retry";
                        }
                        if (lane & SelectiveHydrationLane) {
                            return "SelectiveHydration";
                        }
                        if (lane & IdleHydrationLane) {
                            return "IdleHydration";
                        }
                        if (lane & IdleLane) {
                            return "Idle";
                        }
                        if (lane & OffscreenLane) {
                            return "Offscreen";
                        }
                    }
                }
                var NoTimestamp = -1;
                var nextTransitionLane = TransitionLane1;
                var nextRetryLane = RetryLane1;
                function getHighestPriorityLanes(lanes) {
                    switch(getHighestPriorityLane(lanes)){
                        case SyncLane:
                            return SyncLane;
                        case InputContinuousHydrationLane:
                            return InputContinuousHydrationLane;
                        case InputContinuousLane:
                            return InputContinuousLane;
                        case DefaultHydrationLane:
                            return DefaultHydrationLane;
                        case DefaultLane:
                            return DefaultLane;
                        case TransitionHydrationLane:
                            return TransitionHydrationLane;
                        case TransitionLane1:
                        case TransitionLane2:
                        case TransitionLane3:
                        case TransitionLane4:
                        case TransitionLane5:
                        case TransitionLane6:
                        case TransitionLane7:
                        case TransitionLane8:
                        case TransitionLane9:
                        case TransitionLane10:
                        case TransitionLane11:
                        case TransitionLane12:
                        case TransitionLane13:
                        case TransitionLane14:
                        case TransitionLane15:
                        case TransitionLane16:
                            return lanes & TransitionLanes;
                        case RetryLane1:
                        case RetryLane2:
                        case RetryLane3:
                        case RetryLane4:
                        case RetryLane5:
                            return lanes & RetryLanes;
                        case SelectiveHydrationLane:
                            return SelectiveHydrationLane;
                        case IdleHydrationLane:
                            return IdleHydrationLane;
                        case IdleLane:
                            return IdleLane;
                        case OffscreenLane:
                            return OffscreenLane;
                        default:
                            {
                                error("Should have found matching lanes. This is a bug in React.");
                            }
                            return lanes;
                    }
                }
                function getNextLanes(root2, wipLanes) {
                    var pendingLanes = root2.pendingLanes;
                    if (pendingLanes === NoLanes) {
                        return NoLanes;
                    }
                    var nextLanes = NoLanes;
                    var suspendedLanes = root2.suspendedLanes;
                    var pingedLanes = root2.pingedLanes;
                    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
                    if (nonIdlePendingLanes !== NoLanes) {
                        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                        if (nonIdleUnblockedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                        } else {
                            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                            if (nonIdlePingedLanes !== NoLanes) {
                                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                            }
                        }
                    } else {
                        var unblockedLanes = pendingLanes & ~suspendedLanes;
                        if (unblockedLanes !== NoLanes) {
                            nextLanes = getHighestPriorityLanes(unblockedLanes);
                        } else {
                            if (pingedLanes !== NoLanes) {
                                nextLanes = getHighestPriorityLanes(pingedLanes);
                            }
                        }
                    }
                    if (nextLanes === NoLanes) {
                        return NoLanes;
                    }
                    if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
                    // bother waiting until the root is complete.
                    (wipLanes & suspendedLanes) === NoLanes) {
                        var nextLane = getHighestPriorityLane(nextLanes);
                        var wipLane = getHighestPriorityLane(wipLanes);
                        if (// Tests whether the next lane is equal or lower priority than the wip
                        // one. This works because the bits decrease in priority as you go left.
                        nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                        // only difference between default updates and transition updates is that
                        // default updates do not support refresh transitions.
                        nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                            return wipLanes;
                        }
                    }
                    if ((nextLanes & InputContinuousLane) !== NoLanes) {
                        nextLanes |= pendingLanes & DefaultLane;
                    }
                    var entangledLanes = root2.entangledLanes;
                    if (entangledLanes !== NoLanes) {
                        var entanglements = root2.entanglements;
                        var lanes = nextLanes & entangledLanes;
                        while(lanes > 0){
                            var index2 = pickArbitraryLaneIndex(lanes);
                            var lane = 1 << index2;
                            nextLanes |= entanglements[index2];
                            lanes &= ~lane;
                        }
                    }
                    return nextLanes;
                }
                function getMostRecentEventTime(root2, lanes) {
                    var eventTimes = root2.eventTimes;
                    var mostRecentEventTime = NoTimestamp;
                    while(lanes > 0){
                        var index2 = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index2;
                        var eventTime = eventTimes[index2];
                        if (eventTime > mostRecentEventTime) {
                            mostRecentEventTime = eventTime;
                        }
                        lanes &= ~lane;
                    }
                    return mostRecentEventTime;
                }
                function computeExpirationTime(lane, currentTime) {
                    switch(lane){
                        case SyncLane:
                        case InputContinuousHydrationLane:
                        case InputContinuousLane:
                            return currentTime + 250;
                        case DefaultHydrationLane:
                        case DefaultLane:
                        case TransitionHydrationLane:
                        case TransitionLane1:
                        case TransitionLane2:
                        case TransitionLane3:
                        case TransitionLane4:
                        case TransitionLane5:
                        case TransitionLane6:
                        case TransitionLane7:
                        case TransitionLane8:
                        case TransitionLane9:
                        case TransitionLane10:
                        case TransitionLane11:
                        case TransitionLane12:
                        case TransitionLane13:
                        case TransitionLane14:
                        case TransitionLane15:
                        case TransitionLane16:
                            return currentTime + 5e3;
                        case RetryLane1:
                        case RetryLane2:
                        case RetryLane3:
                        case RetryLane4:
                        case RetryLane5:
                            return NoTimestamp;
                        case SelectiveHydrationLane:
                        case IdleHydrationLane:
                        case IdleLane:
                        case OffscreenLane:
                            return NoTimestamp;
                        default:
                            {
                                error("Should have found matching lanes. This is a bug in React.");
                            }
                            return NoTimestamp;
                    }
                }
                function markStarvedLanesAsExpired(root2, currentTime) {
                    var pendingLanes = root2.pendingLanes;
                    var suspendedLanes = root2.suspendedLanes;
                    var pingedLanes = root2.pingedLanes;
                    var expirationTimes = root2.expirationTimes;
                    var lanes = pendingLanes;
                    while(lanes > 0){
                        var index2 = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index2;
                        var expirationTime = expirationTimes[index2];
                        if (expirationTime === NoTimestamp) {
                            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                            }
                        } else if (expirationTime <= currentTime) {
                            root2.expiredLanes |= lane;
                        }
                        lanes &= ~lane;
                    }
                }
                function getHighestPriorityPendingLanes(root2) {
                    return getHighestPriorityLanes(root2.pendingLanes);
                }
                function getLanesToRetrySynchronouslyOnError(root2) {
                    var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
                    if (everythingButOffscreen !== NoLanes) {
                        return everythingButOffscreen;
                    }
                    if (everythingButOffscreen & OffscreenLane) {
                        return OffscreenLane;
                    }
                    return NoLanes;
                }
                function includesSyncLane(lanes) {
                    return (lanes & SyncLane) !== NoLanes;
                }
                function includesNonIdleWork(lanes) {
                    return (lanes & NonIdleLanes) !== NoLanes;
                }
                function includesOnlyRetries(lanes) {
                    return (lanes & RetryLanes) === lanes;
                }
                function includesOnlyNonUrgentLanes(lanes) {
                    var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
                    return (lanes & UrgentLanes) === NoLanes;
                }
                function includesOnlyTransitions(lanes) {
                    return (lanes & TransitionLanes) === lanes;
                }
                function includesBlockingLane(root2, lanes) {
                    var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
                    return (lanes & SyncDefaultLanes) !== NoLanes;
                }
                function includesExpiredLane(root2, lanes) {
                    return (lanes & root2.expiredLanes) !== NoLanes;
                }
                function isTransitionLane(lane) {
                    return (lane & TransitionLanes) !== NoLanes;
                }
                function claimNextTransitionLane() {
                    var lane = nextTransitionLane;
                    nextTransitionLane <<= 1;
                    if ((nextTransitionLane & TransitionLanes) === NoLanes) {
                        nextTransitionLane = TransitionLane1;
                    }
                    return lane;
                }
                function claimNextRetryLane() {
                    var lane = nextRetryLane;
                    nextRetryLane <<= 1;
                    if ((nextRetryLane & RetryLanes) === NoLanes) {
                        nextRetryLane = RetryLane1;
                    }
                    return lane;
                }
                function getHighestPriorityLane(lanes) {
                    return lanes & -lanes;
                }
                function pickArbitraryLane(lanes) {
                    return getHighestPriorityLane(lanes);
                }
                function pickArbitraryLaneIndex(lanes) {
                    return 31 - clz32(lanes);
                }
                function laneToIndex(lane) {
                    return pickArbitraryLaneIndex(lane);
                }
                function includesSomeLane(a, b) {
                    return (a & b) !== NoLanes;
                }
                function isSubsetOfLanes(set3, subset) {
                    return (set3 & subset) === subset;
                }
                function mergeLanes(a, b) {
                    return a | b;
                }
                function removeLanes(set3, subset) {
                    return set3 & ~subset;
                }
                function intersectLanes(a, b) {
                    return a & b;
                }
                function laneToLanes(lane) {
                    return lane;
                }
                function higherPriorityLane(a, b) {
                    return a !== NoLane && a < b ? a : b;
                }
                function createLaneMap(initial) {
                    var laneMap = [];
                    for(var i = 0; i < TotalLanes; i++){
                        laneMap.push(initial);
                    }
                    return laneMap;
                }
                function markRootUpdated(root2, updateLane, eventTime) {
                    root2.pendingLanes |= updateLane;
                    if (updateLane !== IdleLane) {
                        root2.suspendedLanes = NoLanes;
                        root2.pingedLanes = NoLanes;
                    }
                    var eventTimes = root2.eventTimes;
                    var index2 = laneToIndex(updateLane);
                    eventTimes[index2] = eventTime;
                }
                function markRootSuspended(root2, suspendedLanes) {
                    root2.suspendedLanes |= suspendedLanes;
                    root2.pingedLanes &= ~suspendedLanes;
                    var expirationTimes = root2.expirationTimes;
                    var lanes = suspendedLanes;
                    while(lanes > 0){
                        var index2 = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index2;
                        expirationTimes[index2] = NoTimestamp;
                        lanes &= ~lane;
                    }
                }
                function markRootPinged(root2, pingedLanes, eventTime) {
                    root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
                }
                function markRootFinished(root2, remainingLanes) {
                    var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
                    root2.pendingLanes = remainingLanes;
                    root2.suspendedLanes = NoLanes;
                    root2.pingedLanes = NoLanes;
                    root2.expiredLanes &= remainingLanes;
                    root2.mutableReadLanes &= remainingLanes;
                    root2.entangledLanes &= remainingLanes;
                    var entanglements = root2.entanglements;
                    var eventTimes = root2.eventTimes;
                    var expirationTimes = root2.expirationTimes;
                    var lanes = noLongerPendingLanes;
                    while(lanes > 0){
                        var index2 = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index2;
                        entanglements[index2] = NoLanes;
                        eventTimes[index2] = NoTimestamp;
                        expirationTimes[index2] = NoTimestamp;
                        lanes &= ~lane;
                    }
                }
                function markRootEntangled(root2, entangledLanes) {
                    var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
                    var entanglements = root2.entanglements;
                    var lanes = rootEntangledLanes;
                    while(lanes){
                        var index2 = pickArbitraryLaneIndex(lanes);
                        var lane = 1 << index2;
                        if (// Is this one of the newly entangled lanes?
                        lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                        entanglements[index2] & entangledLanes) {
                            entanglements[index2] |= entangledLanes;
                        }
                        lanes &= ~lane;
                    }
                }
                function getBumpedLaneForHydration(root2, renderLanes2) {
                    var renderLane = getHighestPriorityLane(renderLanes2);
                    var lane;
                    switch(renderLane){
                        case InputContinuousLane:
                            lane = InputContinuousHydrationLane;
                            break;
                        case DefaultLane:
                            lane = DefaultHydrationLane;
                            break;
                        case TransitionLane1:
                        case TransitionLane2:
                        case TransitionLane3:
                        case TransitionLane4:
                        case TransitionLane5:
                        case TransitionLane6:
                        case TransitionLane7:
                        case TransitionLane8:
                        case TransitionLane9:
                        case TransitionLane10:
                        case TransitionLane11:
                        case TransitionLane12:
                        case TransitionLane13:
                        case TransitionLane14:
                        case TransitionLane15:
                        case TransitionLane16:
                        case RetryLane1:
                        case RetryLane2:
                        case RetryLane3:
                        case RetryLane4:
                        case RetryLane5:
                            lane = TransitionHydrationLane;
                            break;
                        case IdleLane:
                            lane = IdleHydrationLane;
                            break;
                        default:
                            lane = NoLane;
                            break;
                    }
                    if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
                        return NoLane;
                    }
                    return lane;
                }
                function addFiberToLanesMap(root2, fiber, lanes) {
                    if (!isDevToolsPresent) {
                        return;
                    }
                    var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
                    while(lanes > 0){
                        var index2 = laneToIndex(lanes);
                        var lane = 1 << index2;
                        var updaters = pendingUpdatersLaneMap[index2];
                        updaters.add(fiber);
                        lanes &= ~lane;
                    }
                }
                function movePendingFibersToMemoized(root2, lanes) {
                    if (!isDevToolsPresent) {
                        return;
                    }
                    var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
                    var memoizedUpdaters = root2.memoizedUpdaters;
                    while(lanes > 0){
                        var index2 = laneToIndex(lanes);
                        var lane = 1 << index2;
                        var updaters = pendingUpdatersLaneMap[index2];
                        if (updaters.size > 0) {
                            updaters.forEach(function(fiber) {
                                var alternate = fiber.alternate;
                                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                                    memoizedUpdaters.add(fiber);
                                }
                            });
                            updaters.clear();
                        }
                        lanes &= ~lane;
                    }
                }
                function getTransitionsForLanes(root2, lanes) {
                    {
                        return null;
                    }
                }
                var DiscreteEventPriority = SyncLane;
                var ContinuousEventPriority = InputContinuousLane;
                var DefaultEventPriority = DefaultLane;
                var IdleEventPriority = IdleLane;
                var currentUpdatePriority = NoLane;
                function getCurrentUpdatePriority() {
                    return currentUpdatePriority;
                }
                function setCurrentUpdatePriority(newPriority) {
                    currentUpdatePriority = newPriority;
                }
                function runWithPriority(priority, fn) {
                    var previousPriority = currentUpdatePriority;
                    try {
                        currentUpdatePriority = priority;
                        return fn();
                    } finally{
                        currentUpdatePriority = previousPriority;
                    }
                }
                function higherEventPriority(a, b) {
                    return a !== 0 && a < b ? a : b;
                }
                function lowerEventPriority(a, b) {
                    return a === 0 || a > b ? a : b;
                }
                function isHigherEventPriority(a, b) {
                    return a !== 0 && a < b;
                }
                function lanesToEventPriority(lanes) {
                    var lane = getHighestPriorityLane(lanes);
                    if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
                        return DiscreteEventPriority;
                    }
                    if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
                        return ContinuousEventPriority;
                    }
                    if (includesNonIdleWork(lane)) {
                        return DefaultEventPriority;
                    }
                    return IdleEventPriority;
                }
                function isRootDehydrated(root2) {
                    var currentState = root2.current.memoizedState;
                    return currentState.isDehydrated;
                }
                var _attemptSynchronousHydration;
                function setAttemptSynchronousHydration(fn) {
                    _attemptSynchronousHydration = fn;
                }
                function attemptSynchronousHydration(fiber) {
                    _attemptSynchronousHydration(fiber);
                }
                var attemptContinuousHydration;
                function setAttemptContinuousHydration(fn) {
                    attemptContinuousHydration = fn;
                }
                var attemptHydrationAtCurrentPriority;
                function setAttemptHydrationAtCurrentPriority(fn) {
                    attemptHydrationAtCurrentPriority = fn;
                }
                var getCurrentUpdatePriority$1;
                function setGetCurrentUpdatePriority(fn) {
                    getCurrentUpdatePriority$1 = fn;
                }
                var attemptHydrationAtPriority;
                function setAttemptHydrationAtPriority(fn) {
                    attemptHydrationAtPriority = fn;
                }
                var hasScheduledReplayAttempt = false;
                var queuedDiscreteEvents = [];
                var queuedFocus = null;
                var queuedDrag = null;
                var queuedMouse = null;
                var queuedPointers = /* @__PURE__ */ new Map();
                var queuedPointerCaptures = /* @__PURE__ */ new Map();
                var queuedExplicitHydrationTargets = [];
                var discreteReplayableEvents = [
                    "mousedown",
                    "mouseup",
                    "touchcancel",
                    "touchend",
                    "touchstart",
                    "auxclick",
                    "dblclick",
                    "pointercancel",
                    "pointerdown",
                    "pointerup",
                    "dragend",
                    "dragstart",
                    "drop",
                    "compositionend",
                    "compositionstart",
                    "keydown",
                    "keypress",
                    "keyup",
                    "input",
                    "textInput",
                    // Intentionally camelCase
                    "copy",
                    "cut",
                    "paste",
                    "click",
                    "change",
                    "contextmenu",
                    "reset",
                    "submit"
                ];
                function isDiscreteEventThatRequiresHydration(eventType) {
                    return discreteReplayableEvents.indexOf(eventType) > -1;
                }
                function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    return {
                        blockedOn: blockedOn,
                        domEventName: domEventName,
                        eventSystemFlags: eventSystemFlags,
                        nativeEvent: nativeEvent,
                        targetContainers: [
                            targetContainer
                        ]
                    };
                }
                function clearIfContinuousEvent(domEventName, nativeEvent) {
                    switch(domEventName){
                        case "focusin":
                        case "focusout":
                            queuedFocus = null;
                            break;
                        case "dragenter":
                        case "dragleave":
                            queuedDrag = null;
                            break;
                        case "mouseover":
                        case "mouseout":
                            queuedMouse = null;
                            break;
                        case "pointerover":
                        case "pointerout":
                            {
                                var pointerId = nativeEvent.pointerId;
                                queuedPointers.delete(pointerId);
                                break;
                            }
                        case "gotpointercapture":
                        case "lostpointercapture":
                            {
                                var _pointerId = nativeEvent.pointerId;
                                queuedPointerCaptures.delete(_pointerId);
                                break;
                            }
                    }
                }
                function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
                        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                        if (blockedOn !== null) {
                            var _fiber2 = getInstanceFromNode(blockedOn);
                            if (_fiber2 !== null) {
                                attemptContinuousHydration(_fiber2);
                            }
                        }
                        return queuedEvent;
                    }
                    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
                    var targetContainers = existingQueuedEvent.targetContainers;
                    if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
                        targetContainers.push(targetContainer);
                    }
                    return existingQueuedEvent;
                }
                function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    switch(domEventName){
                        case "focusin":
                            {
                                var focusEvent = nativeEvent;
                                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                                return true;
                            }
                        case "dragenter":
                            {
                                var dragEvent = nativeEvent;
                                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                                return true;
                            }
                        case "mouseover":
                            {
                                var mouseEvent = nativeEvent;
                                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                                return true;
                            }
                        case "pointerover":
                            {
                                var pointerEvent = nativeEvent;
                                var pointerId = pointerEvent.pointerId;
                                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                                return true;
                            }
                        case "gotpointercapture":
                            {
                                var _pointerEvent = nativeEvent;
                                var _pointerId2 = _pointerEvent.pointerId;
                                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                                return true;
                            }
                    }
                    return false;
                }
                function attemptExplicitHydrationTarget(queuedTarget) {
                    var targetInst = getClosestInstanceFromNode(queuedTarget.target);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted !== null) {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    queuedTarget.blockedOn = instance;
                                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                                        attemptHydrationAtCurrentPriority(nearestMounted);
                                    });
                                    return;
                                }
                            } else if (tag === HostRoot) {
                                var root2 = nearestMounted.stateNode;
                                if (isRootDehydrated(root2)) {
                                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                                    return;
                                }
                            }
                        }
                    }
                    queuedTarget.blockedOn = null;
                }
                function queueExplicitHydrationTarget(target) {
                    var updatePriority = getCurrentUpdatePriority$1();
                    var queuedTarget = {
                        blockedOn: null,
                        target: target,
                        priority: updatePriority
                    };
                    var i = 0;
                    for(; i < queuedExplicitHydrationTargets.length; i++){
                        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                            break;
                        }
                    }
                    queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
                    if (i === 0) {
                        attemptExplicitHydrationTarget(queuedTarget);
                    }
                }
                function attemptReplayContinuousQueuedEvent(queuedEvent) {
                    if (queuedEvent.blockedOn !== null) {
                        return false;
                    }
                    var targetContainers = queuedEvent.targetContainers;
                    while(targetContainers.length > 0){
                        var targetContainer = targetContainers[0];
                        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
                        if (nextBlockedOn === null) {
                            {
                                var nativeEvent = queuedEvent.nativeEvent;
                                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                                setReplayingEvent(nativeEventClone);
                                nativeEvent.target.dispatchEvent(nativeEventClone);
                                resetReplayingEvent();
                            }
                        } else {
                            var _fiber3 = getInstanceFromNode(nextBlockedOn);
                            if (_fiber3 !== null) {
                                attemptContinuousHydration(_fiber3);
                            }
                            queuedEvent.blockedOn = nextBlockedOn;
                            return false;
                        }
                        targetContainers.shift();
                    }
                    return true;
                }
                function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
                    if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
                        map.delete(key);
                    }
                }
                function replayUnblockedEvents() {
                    hasScheduledReplayAttempt = false;
                    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
                        queuedFocus = null;
                    }
                    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
                        queuedDrag = null;
                    }
                    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
                        queuedMouse = null;
                    }
                    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
                    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
                }
                function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
                    if (queuedEvent.blockedOn === unblocked) {
                        queuedEvent.blockedOn = null;
                        if (!hasScheduledReplayAttempt) {
                            hasScheduledReplayAttempt = true;
                            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
                        }
                    }
                }
                function retryIfBlockedOn(unblocked) {
                    if (queuedDiscreteEvents.length > 0) {
                        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
                        for(var i = 1; i < queuedDiscreteEvents.length; i++){
                            var queuedEvent = queuedDiscreteEvents[i];
                            if (queuedEvent.blockedOn === unblocked) {
                                queuedEvent.blockedOn = null;
                            }
                        }
                    }
                    if (queuedFocus !== null) {
                        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
                    }
                    if (queuedDrag !== null) {
                        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
                    }
                    if (queuedMouse !== null) {
                        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
                    }
                    var unblock = function unblock(queuedEvent2) {
                        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
                    };
                    queuedPointers.forEach(unblock);
                    queuedPointerCaptures.forEach(unblock);
                    for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
                        var queuedTarget = queuedExplicitHydrationTargets[_i];
                        if (queuedTarget.blockedOn === unblocked) {
                            queuedTarget.blockedOn = null;
                        }
                    }
                    while(queuedExplicitHydrationTargets.length > 0){
                        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
                        if (nextExplicitTarget.blockedOn !== null) {
                            break;
                        } else {
                            attemptExplicitHydrationTarget(nextExplicitTarget);
                            if (nextExplicitTarget.blockedOn === null) {
                                queuedExplicitHydrationTargets.shift();
                            }
                        }
                    }
                }
                var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
                var _enabled = true;
                function setEnabled(enabled) {
                    _enabled = !!enabled;
                }
                function isEnabled() {
                    return _enabled;
                }
                function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
                    var eventPriority = getEventPriority(domEventName);
                    var listenerWrapper;
                    switch(eventPriority){
                        case DiscreteEventPriority:
                            listenerWrapper = dispatchDiscreteEvent;
                            break;
                        case ContinuousEventPriority:
                            listenerWrapper = dispatchContinuousEvent;
                            break;
                        case DefaultEventPriority:
                        default:
                            listenerWrapper = dispatchEvent;
                            break;
                    }
                    return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
                }
                function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig.transition;
                    ReactCurrentBatchConfig.transition = null;
                    try {
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
                    } finally{
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig.transition = prevTransition;
                    }
                }
                function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig.transition;
                    ReactCurrentBatchConfig.transition = null;
                    try {
                        setCurrentUpdatePriority(ContinuousEventPriority);
                        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
                    } finally{
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig.transition = prevTransition;
                    }
                }
                function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    if (!_enabled) {
                        return;
                    }
                    {
                        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                    }
                }
                function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                    if (blockedOn === null) {
                        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                        clearIfContinuousEvent(domEventName, nativeEvent);
                        return;
                    }
                    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                        nativeEvent.stopPropagation();
                        return;
                    }
                    clearIfContinuousEvent(domEventName, nativeEvent);
                    if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
                        while(blockedOn !== null){
                            var fiber = getInstanceFromNode(blockedOn);
                            if (fiber !== null) {
                                attemptSynchronousHydration(fiber);
                            }
                            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                            if (nextBlockedOn === null) {
                                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                            }
                            if (nextBlockedOn === blockedOn) {
                                break;
                            }
                            blockedOn = nextBlockedOn;
                        }
                        if (blockedOn !== null) {
                            nativeEvent.stopPropagation();
                        }
                        return;
                    }
                    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
                }
                var return_targetInst = null;
                function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
                    return_targetInst = null;
                    var nativeEventTarget = getEventTarget(nativeEvent);
                    var targetInst = getClosestInstanceFromNode(nativeEventTarget);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted === null) {
                            targetInst = null;
                        } else {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    return instance;
                                }
                                targetInst = null;
                            } else if (tag === HostRoot) {
                                var root2 = nearestMounted.stateNode;
                                if (isRootDehydrated(root2)) {
                                    return getContainerFromFiber(nearestMounted);
                                }
                                targetInst = null;
                            } else if (nearestMounted !== targetInst) {
                                targetInst = null;
                            }
                        }
                    }
                    return_targetInst = targetInst;
                    return null;
                }
                function getEventPriority(domEventName) {
                    switch(domEventName){
                        // Used by SimpleEventPlugin:
                        case "cancel":
                        case "click":
                        case "close":
                        case "contextmenu":
                        case "copy":
                        case "cut":
                        case "auxclick":
                        case "dblclick":
                        case "dragend":
                        case "dragstart":
                        case "drop":
                        case "focusin":
                        case "focusout":
                        case "input":
                        case "invalid":
                        case "keydown":
                        case "keypress":
                        case "keyup":
                        case "mousedown":
                        case "mouseup":
                        case "paste":
                        case "pause":
                        case "play":
                        case "pointercancel":
                        case "pointerdown":
                        case "pointerup":
                        case "ratechange":
                        case "reset":
                        case "resize":
                        case "seeked":
                        case "submit":
                        case "touchcancel":
                        case "touchend":
                        case "touchstart":
                        case "volumechange":
                        // Used by polyfills:
                        // eslint-disable-next-line no-fallthrough
                        case "change":
                        case "selectionchange":
                        case "textInput":
                        case "compositionstart":
                        case "compositionend":
                        case "compositionupdate":
                        // Only enableCreateEventHandleAPI:
                        // eslint-disable-next-line no-fallthrough
                        case "beforeblur":
                        case "afterblur":
                        // Not used by React but could be by user code:
                        // eslint-disable-next-line no-fallthrough
                        case "beforeinput":
                        case "blur":
                        case "fullscreenchange":
                        case "focus":
                        case "hashchange":
                        case "popstate":
                        case "select":
                        case "selectstart":
                            return DiscreteEventPriority;
                        case "drag":
                        case "dragenter":
                        case "dragexit":
                        case "dragleave":
                        case "dragover":
                        case "mousemove":
                        case "mouseout":
                        case "mouseover":
                        case "pointermove":
                        case "pointerout":
                        case "pointerover":
                        case "scroll":
                        case "toggle":
                        case "touchmove":
                        case "wheel":
                        // Not used by React but could be by user code:
                        // eslint-disable-next-line no-fallthrough
                        case "mouseenter":
                        case "mouseleave":
                        case "pointerenter":
                        case "pointerleave":
                            return ContinuousEventPriority;
                        case "message":
                            {
                                var schedulerPriority = getCurrentPriorityLevel();
                                switch(schedulerPriority){
                                    case ImmediatePriority:
                                        return DiscreteEventPriority;
                                    case UserBlockingPriority:
                                        return ContinuousEventPriority;
                                    case NormalPriority:
                                    case LowPriority:
                                        return DefaultEventPriority;
                                    case IdlePriority:
                                        return IdleEventPriority;
                                    default:
                                        return DefaultEventPriority;
                                }
                            }
                        default:
                            return DefaultEventPriority;
                    }
                }
                function addEventBubbleListener(target, eventType, listener) {
                    target.addEventListener(eventType, listener, false);
                    return listener;
                }
                function addEventCaptureListener(target, eventType, listener) {
                    target.addEventListener(eventType, listener, true);
                    return listener;
                }
                function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
                    target.addEventListener(eventType, listener, {
                        capture: true,
                        passive: passive
                    });
                    return listener;
                }
                function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
                    target.addEventListener(eventType, listener, {
                        passive: passive
                    });
                    return listener;
                }
                var root = null;
                var startText = null;
                var fallbackText = null;
                function initialize(nativeEventTarget) {
                    root = nativeEventTarget;
                    startText = getText();
                    return true;
                }
                function reset() {
                    root = null;
                    startText = null;
                    fallbackText = null;
                }
                function getData() {
                    if (fallbackText) {
                        return fallbackText;
                    }
                    var start;
                    var startValue = startText;
                    var startLength = startValue.length;
                    var end;
                    var endValue = getText();
                    var endLength = endValue.length;
                    for(start = 0; start < startLength; start++){
                        if (startValue[start] !== endValue[start]) {
                            break;
                        }
                    }
                    var minEnd = startLength - start;
                    for(end = 1; end <= minEnd; end++){
                        if (startValue[startLength - end] !== endValue[endLength - end]) {
                            break;
                        }
                    }
                    var sliceTail = end > 1 ? 1 - end : void 0;
                    fallbackText = endValue.slice(start, sliceTail);
                    return fallbackText;
                }
                function getText() {
                    if ("value" in root) {
                        return root.value;
                    }
                    return root.textContent;
                }
                function getEventCharCode(nativeEvent) {
                    var charCode;
                    var keyCode = nativeEvent.keyCode;
                    if ("charCode" in nativeEvent) {
                        charCode = nativeEvent.charCode;
                        if (charCode === 0 && keyCode === 13) {
                            charCode = 13;
                        }
                    } else {
                        charCode = keyCode;
                    }
                    if (charCode === 10) {
                        charCode = 13;
                    }
                    if (charCode >= 32 || charCode === 13) {
                        return charCode;
                    }
                    return 0;
                }
                function functionThatReturnsTrue() {
                    return true;
                }
                function functionThatReturnsFalse() {
                    return false;
                }
                function createSyntheticEvent(Interface) {
                    function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
                        this._reactName = reactName;
                        this._targetInst = targetInst;
                        this.type = reactEventType;
                        this.nativeEvent = nativeEvent;
                        this.target = nativeEventTarget;
                        this.currentTarget = null;
                        for(var _propName in Interface){
                            if (!Interface.hasOwnProperty(_propName)) {
                                continue;
                            }
                            var normalize = Interface[_propName];
                            if (normalize) {
                                this[_propName] = normalize(nativeEvent);
                            } else {
                                this[_propName] = nativeEvent[_propName];
                            }
                        }
                        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
                        if (defaultPrevented) {
                            this.isDefaultPrevented = functionThatReturnsTrue;
                        } else {
                            this.isDefaultPrevented = functionThatReturnsFalse;
                        }
                        this.isPropagationStopped = functionThatReturnsFalse;
                        return this;
                    }
                    assign2(SyntheticBaseEvent.prototype, {
                        preventDefault: function preventDefault() {
                            this.defaultPrevented = true;
                            var event = this.nativeEvent;
                            if (!event) {
                                return;
                            }
                            if (event.preventDefault) {
                                event.preventDefault();
                            } else if (_type_of(event.returnValue) !== "unknown") {
                                event.returnValue = false;
                            }
                            this.isDefaultPrevented = functionThatReturnsTrue;
                        },
                        stopPropagation: function stopPropagation() {
                            var event = this.nativeEvent;
                            if (!event) {
                                return;
                            }
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (_type_of(event.cancelBubble) !== "unknown") {
                                event.cancelBubble = true;
                            }
                            this.isPropagationStopped = functionThatReturnsTrue;
                        },
                        /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */ persist: function persist() {},
                        /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */ isPersistent: functionThatReturnsTrue
                    });
                    return SyntheticBaseEvent;
                }
                var EventInterface = {
                    eventPhase: 0,
                    bubbles: 0,
                    cancelable: 0,
                    timeStamp: function timeStamp(event) {
                        return event.timeStamp || Date.now();
                    },
                    defaultPrevented: 0,
                    isTrusted: 0
                };
                var SyntheticEvent = createSyntheticEvent(EventInterface);
                var UIEventInterface = assign2({}, EventInterface, {
                    view: 0,
                    detail: 0
                });
                var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
                var lastMovementX;
                var lastMovementY;
                var lastMouseEvent;
                function updateMouseMovementPolyfillState(event) {
                    if (event !== lastMouseEvent) {
                        if (lastMouseEvent && event.type === "mousemove") {
                            lastMovementX = event.screenX - lastMouseEvent.screenX;
                            lastMovementY = event.screenY - lastMouseEvent.screenY;
                        } else {
                            lastMovementX = 0;
                            lastMovementY = 0;
                        }
                        lastMouseEvent = event;
                    }
                }
                var MouseEventInterface = assign2({}, UIEventInterface, {
                    screenX: 0,
                    screenY: 0,
                    clientX: 0,
                    clientY: 0,
                    pageX: 0,
                    pageY: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    altKey: 0,
                    metaKey: 0,
                    getModifierState: getEventModifierState,
                    button: 0,
                    buttons: 0,
                    relatedTarget: function relatedTarget(event) {
                        if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
                        return event.relatedTarget;
                    },
                    movementX: function movementX(event) {
                        if ("movementX" in event) {
                            return event.movementX;
                        }
                        updateMouseMovementPolyfillState(event);
                        return lastMovementX;
                    },
                    movementY: function movementY(event) {
                        if ("movementY" in event) {
                            return event.movementY;
                        }
                        return lastMovementY;
                    }
                });
                var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
                var DragEventInterface = assign2({}, MouseEventInterface, {
                    dataTransfer: 0
                });
                var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
                var FocusEventInterface = assign2({}, UIEventInterface, {
                    relatedTarget: 0
                });
                var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
                var AnimationEventInterface = assign2({}, EventInterface, {
                    animationName: 0,
                    elapsedTime: 0,
                    pseudoElement: 0
                });
                var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
                var ClipboardEventInterface = assign2({}, EventInterface, {
                    clipboardData: function clipboardData(event) {
                        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
                    }
                });
                var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
                var CompositionEventInterface = assign2({}, EventInterface, {
                    data: 0
                });
                var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
                var SyntheticInputEvent = SyntheticCompositionEvent;
                var normalizeKey = {
                    Esc: "Escape",
                    Spacebar: " ",
                    Left: "ArrowLeft",
                    Up: "ArrowUp",
                    Right: "ArrowRight",
                    Down: "ArrowDown",
                    Del: "Delete",
                    Win: "OS",
                    Menu: "ContextMenu",
                    Apps: "ContextMenu",
                    Scroll: "ScrollLock",
                    MozPrintableKey: "Unidentified"
                };
                var translateToKey = {
                    "8": "Backspace",
                    "9": "Tab",
                    "12": "Clear",
                    "13": "Enter",
                    "16": "Shift",
                    "17": "Control",
                    "18": "Alt",
                    "19": "Pause",
                    "20": "CapsLock",
                    "27": "Escape",
                    "32": " ",
                    "33": "PageUp",
                    "34": "PageDown",
                    "35": "End",
                    "36": "Home",
                    "37": "ArrowLeft",
                    "38": "ArrowUp",
                    "39": "ArrowRight",
                    "40": "ArrowDown",
                    "45": "Insert",
                    "46": "Delete",
                    "112": "F1",
                    "113": "F2",
                    "114": "F3",
                    "115": "F4",
                    "116": "F5",
                    "117": "F6",
                    "118": "F7",
                    "119": "F8",
                    "120": "F9",
                    "121": "F10",
                    "122": "F11",
                    "123": "F12",
                    "144": "NumLock",
                    "145": "ScrollLock",
                    "224": "Meta"
                };
                function getEventKey(nativeEvent) {
                    if (nativeEvent.key) {
                        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                        if (key !== "Unidentified") {
                            return key;
                        }
                    }
                    if (nativeEvent.type === "keypress") {
                        var charCode = getEventCharCode(nativeEvent);
                        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
                    }
                    if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
                        return translateToKey[nativeEvent.keyCode] || "Unidentified";
                    }
                    return "";
                }
                var modifierKeyToProp = {
                    Alt: "altKey",
                    Control: "ctrlKey",
                    Meta: "metaKey",
                    Shift: "shiftKey"
                };
                function modifierStateGetter(keyArg) {
                    var syntheticEvent = this;
                    var nativeEvent = syntheticEvent.nativeEvent;
                    if (nativeEvent.getModifierState) {
                        return nativeEvent.getModifierState(keyArg);
                    }
                    var keyProp = modifierKeyToProp[keyArg];
                    return keyProp ? !!nativeEvent[keyProp] : false;
                }
                function getEventModifierState(nativeEvent) {
                    return modifierStateGetter;
                }
                var KeyboardEventInterface = assign2({}, UIEventInterface, {
                    key: getEventKey,
                    code: 0,
                    location: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    altKey: 0,
                    metaKey: 0,
                    repeat: 0,
                    locale: 0,
                    getModifierState: getEventModifierState,
                    // Legacy Interface
                    charCode: function charCode(event) {
                        if (event.type === "keypress") {
                            return getEventCharCode(event);
                        }
                        return 0;
                    },
                    keyCode: function keyCode(event) {
                        if (event.type === "keydown" || event.type === "keyup") {
                            return event.keyCode;
                        }
                        return 0;
                    },
                    which: function which(event) {
                        if (event.type === "keypress") {
                            return getEventCharCode(event);
                        }
                        if (event.type === "keydown" || event.type === "keyup") {
                            return event.keyCode;
                        }
                        return 0;
                    }
                });
                var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
                var PointerEventInterface = assign2({}, MouseEventInterface, {
                    pointerId: 0,
                    width: 0,
                    height: 0,
                    pressure: 0,
                    tangentialPressure: 0,
                    tiltX: 0,
                    tiltY: 0,
                    twist: 0,
                    pointerType: 0,
                    isPrimary: 0
                });
                var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
                var TouchEventInterface = assign2({}, UIEventInterface, {
                    touches: 0,
                    targetTouches: 0,
                    changedTouches: 0,
                    altKey: 0,
                    metaKey: 0,
                    ctrlKey: 0,
                    shiftKey: 0,
                    getModifierState: getEventModifierState
                });
                var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
                var TransitionEventInterface = assign2({}, EventInterface, {
                    propertyName: 0,
                    elapsedTime: 0,
                    pseudoElement: 0
                });
                var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
                var WheelEventInterface = assign2({}, MouseEventInterface, {
                    deltaX: function deltaX(event) {
                        return "deltaX" in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                        "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
                    },
                    deltaY: function deltaY(event) {
                        return "deltaY" in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                        "wheelDeltaY" in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                        "wheelDelta" in event ? -event.wheelDelta : 0;
                    },
                    deltaZ: 0,
                    // Browsers without "deltaMode" is reporting in raw wheel delta where one
                    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
                    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
                    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
                    deltaMode: 0
                });
                var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
                var END_KEYCODES = [
                    9,
                    13,
                    27,
                    32
                ];
                var START_KEYCODE = 229;
                var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
                var documentMode = null;
                if (canUseDOM && "documentMode" in document) {
                    documentMode = document.documentMode;
                }
                var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
                var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                var SPACEBAR_CODE = 32;
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
                function registerEvents() {
                    registerTwoPhaseEvent("onBeforeInput", [
                        "compositionend",
                        "keypress",
                        "textInput",
                        "paste"
                    ]);
                    registerTwoPhaseEvent("onCompositionEnd", [
                        "compositionend",
                        "focusout",
                        "keydown",
                        "keypress",
                        "keyup",
                        "mousedown"
                    ]);
                    registerTwoPhaseEvent("onCompositionStart", [
                        "compositionstart",
                        "focusout",
                        "keydown",
                        "keypress",
                        "keyup",
                        "mousedown"
                    ]);
                    registerTwoPhaseEvent("onCompositionUpdate", [
                        "compositionupdate",
                        "focusout",
                        "keydown",
                        "keypress",
                        "keyup",
                        "mousedown"
                    ]);
                }
                var hasSpaceKeypress = false;
                function isKeypressCommand(nativeEvent) {
                    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                    !(nativeEvent.ctrlKey && nativeEvent.altKey);
                }
                function getCompositionEventType(domEventName) {
                    switch(domEventName){
                        case "compositionstart":
                            return "onCompositionStart";
                        case "compositionend":
                            return "onCompositionEnd";
                        case "compositionupdate":
                            return "onCompositionUpdate";
                    }
                }
                function isFallbackCompositionStart(domEventName, nativeEvent) {
                    return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
                }
                function isFallbackCompositionEnd(domEventName, nativeEvent) {
                    switch(domEventName){
                        case "keyup":
                            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
                        case "keydown":
                            return nativeEvent.keyCode !== START_KEYCODE;
                        case "keypress":
                        case "mousedown":
                        case "focusout":
                            return true;
                        default:
                            return false;
                    }
                }
                function getDataFromCustomEvent(nativeEvent) {
                    var detail = nativeEvent.detail;
                    if ((typeof detail === "undefined" ? "undefined" : _type_of(detail)) === "object" && "data" in detail) {
                        return detail.data;
                    }
                    return null;
                }
                function isUsingKoreanIME(nativeEvent) {
                    return nativeEvent.locale === "ko";
                }
                var isComposing = false;
                function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                    var eventType;
                    var fallbackData;
                    if (canUseCompositionEvent) {
                        eventType = getCompositionEventType(domEventName);
                    } else if (!isComposing) {
                        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                            eventType = "onCompositionStart";
                        }
                    } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
                        eventType = "onCompositionEnd";
                    }
                    if (!eventType) {
                        return null;
                    }
                    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                        if (!isComposing && eventType === "onCompositionStart") {
                            isComposing = initialize(nativeEventTarget);
                        } else if (eventType === "onCompositionEnd") {
                            if (isComposing) {
                                fallbackData = getData();
                            }
                        }
                    }
                    var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
                    if (listeners.length > 0) {
                        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                        if (fallbackData) {
                            event.data = fallbackData;
                        } else {
                            var customData = getDataFromCustomEvent(nativeEvent);
                            if (customData !== null) {
                                event.data = customData;
                            }
                        }
                    }
                }
                function getNativeBeforeInputChars(domEventName, nativeEvent) {
                    switch(domEventName){
                        case "compositionend":
                            return getDataFromCustomEvent(nativeEvent);
                        case "keypress":
                            var which = nativeEvent.which;
                            if (which !== SPACEBAR_CODE) {
                                return null;
                            }
                            hasSpaceKeypress = true;
                            return SPACEBAR_CHAR;
                        case "textInput":
                            var chars = nativeEvent.data;
                            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                                return null;
                            }
                            return chars;
                        default:
                            return null;
                    }
                }
                function getFallbackBeforeInputChars(domEventName, nativeEvent) {
                    if (isComposing) {
                        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                            var chars = getData();
                            reset();
                            isComposing = false;
                            return chars;
                        }
                        return null;
                    }
                    switch(domEventName){
                        case "paste":
                            return null;
                        case "keypress":
                            if (!isKeypressCommand(nativeEvent)) {
                                if (nativeEvent.char && nativeEvent.char.length > 1) {
                                    return nativeEvent.char;
                                } else if (nativeEvent.which) {
                                    return String.fromCharCode(nativeEvent.which);
                                }
                            }
                            return null;
                        case "compositionend":
                            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
                        default:
                            return null;
                    }
                }
                function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
                    var chars;
                    if (canUseTextInputEvent) {
                        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
                    } else {
                        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
                    }
                    if (!chars) {
                        return null;
                    }
                    var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
                    if (listeners.length > 0) {
                        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                        event.data = chars;
                    }
                }
                function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                }
                var supportedInputTypes = {
                    color: true,
                    date: true,
                    datetime: true,
                    "datetime-local": true,
                    email: true,
                    month: true,
                    number: true,
                    password: true,
                    range: true,
                    search: true,
                    tel: true,
                    text: true,
                    time: true,
                    url: true,
                    week: true
                };
                function isTextInputElement(elem) {
                    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                    if (nodeName === "input") {
                        return !!supportedInputTypes[elem.type];
                    }
                    if (nodeName === "textarea") {
                        return true;
                    }
                    return false;
                }
                function isEventSupported(eventNameSuffix) {
                    if (!canUseDOM) {
                        return false;
                    }
                    var eventName = "on" + eventNameSuffix;
                    var isSupported = eventName in document;
                    if (!isSupported) {
                        var element = document.createElement("div");
                        element.setAttribute(eventName, "return;");
                        isSupported = typeof element[eventName] === "function";
                    }
                    return isSupported;
                }
                function registerEvents$1() {
                    registerTwoPhaseEvent("onChange", [
                        "change",
                        "click",
                        "focusin",
                        "focusout",
                        "input",
                        "keydown",
                        "keyup",
                        "selectionchange"
                    ]);
                }
                function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
                    enqueueStateRestore(target);
                    var listeners = accumulateTwoPhaseListeners(inst, "onChange");
                    if (listeners.length > 0) {
                        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                    }
                }
                var activeElement = null;
                var activeElementInst = null;
                function shouldUseChangeEvent(elem) {
                    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
                    return nodeName === "select" || nodeName === "input" && elem.type === "file";
                }
                function manualDispatchChangeEvent(nativeEvent) {
                    var dispatchQueue = [];
                    createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
                    batchedUpdates(runEventInBatch, dispatchQueue);
                }
                function runEventInBatch(dispatchQueue) {
                    processDispatchQueue(dispatchQueue, 0);
                }
                function getInstIfValueChanged(targetInst) {
                    var targetNode = getNodeFromInstance(targetInst);
                    if (updateValueIfChanged(targetNode)) {
                        return targetInst;
                    }
                }
                function getTargetInstForChangeEvent(domEventName, targetInst) {
                    if (domEventName === "change") {
                        return targetInst;
                    }
                }
                var isInputEventSupported = false;
                if (canUseDOM) {
                    isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
                }
                function startWatchingForValueChange(target, targetInst) {
                    activeElement = target;
                    activeElementInst = targetInst;
                    activeElement.attachEvent("onpropertychange", handlePropertyChange);
                }
                function stopWatchingForValueChange() {
                    if (!activeElement) {
                        return;
                    }
                    activeElement.detachEvent("onpropertychange", handlePropertyChange);
                    activeElement = null;
                    activeElementInst = null;
                }
                function handlePropertyChange(nativeEvent) {
                    if (nativeEvent.propertyName !== "value") {
                        return;
                    }
                    if (getInstIfValueChanged(activeElementInst)) {
                        manualDispatchChangeEvent(nativeEvent);
                    }
                }
                function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
                    if (domEventName === "focusin") {
                        stopWatchingForValueChange();
                        startWatchingForValueChange(target, targetInst);
                    } else if (domEventName === "focusout") {
                        stopWatchingForValueChange();
                    }
                }
                function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
                    if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
                        return getInstIfValueChanged(activeElementInst);
                    }
                }
                function shouldUseClickEvent(elem) {
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
                }
                function getTargetInstForClickEvent(domEventName, targetInst) {
                    if (domEventName === "click") {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
                    if (domEventName === "input" || domEventName === "change") {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function handleControlledInputBlur(node2) {
                    var state = node2._wrapperState;
                    if (!state || !state.controlled || node2.type !== "number") {
                        return;
                    }
                    {
                        setDefaultValue(node2, "number", node2.value);
                    }
                }
                function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
                    var getTargetInstFunc, handleEventFunc;
                    if (shouldUseChangeEvent(targetNode)) {
                        getTargetInstFunc = getTargetInstForChangeEvent;
                    } else if (isTextInputElement(targetNode)) {
                        if (isInputEventSupported) {
                            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                        } else {
                            getTargetInstFunc = getTargetInstForInputEventPolyfill;
                            handleEventFunc = handleEventsForInputEventPolyfill;
                        }
                    } else if (shouldUseClickEvent(targetNode)) {
                        getTargetInstFunc = getTargetInstForClickEvent;
                    }
                    if (getTargetInstFunc) {
                        var inst = getTargetInstFunc(domEventName, targetInst);
                        if (inst) {
                            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                            return;
                        }
                    }
                    if (handleEventFunc) {
                        handleEventFunc(domEventName, targetNode, targetInst);
                    }
                    if (domEventName === "focusout") {
                        handleControlledInputBlur(targetNode);
                    }
                }
                function registerEvents$2() {
                    registerDirectEvent("onMouseEnter", [
                        "mouseout",
                        "mouseover"
                    ]);
                    registerDirectEvent("onMouseLeave", [
                        "mouseout",
                        "mouseover"
                    ]);
                    registerDirectEvent("onPointerEnter", [
                        "pointerout",
                        "pointerover"
                    ]);
                    registerDirectEvent("onPointerLeave", [
                        "pointerout",
                        "pointerover"
                    ]);
                }
                function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
                    var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
                    if (isOverEvent && !isReplayingEvent(nativeEvent)) {
                        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
                        if (related) {
                            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                                return;
                            }
                        }
                    }
                    if (!isOutEvent && !isOverEvent) {
                        return;
                    }
                    var win;
                    if (nativeEventTarget.window === nativeEventTarget) {
                        win = nativeEventTarget;
                    } else {
                        var doc = nativeEventTarget.ownerDocument;
                        if (doc) {
                            win = doc.defaultView || doc.parentWindow;
                        } else {
                            win = window;
                        }
                    }
                    var from2;
                    var to;
                    if (isOutEvent) {
                        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
                        from2 = targetInst;
                        to = _related ? getClosestInstanceFromNode(_related) : null;
                        if (to !== null) {
                            var nearestMounted = getNearestMountedFiber(to);
                            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                                to = null;
                            }
                        }
                    } else {
                        from2 = null;
                        to = targetInst;
                    }
                    if (from2 === to) {
                        return;
                    }
                    var SyntheticEventCtor = SyntheticMouseEvent;
                    var leaveEventType = "onMouseLeave";
                    var enterEventType = "onMouseEnter";
                    var eventTypePrefix = "mouse";
                    if (domEventName === "pointerout" || domEventName === "pointerover") {
                        SyntheticEventCtor = SyntheticPointerEvent;
                        leaveEventType = "onPointerLeave";
                        enterEventType = "onPointerEnter";
                        eventTypePrefix = "pointer";
                    }
                    var fromNode = from2 == null ? win : getNodeFromInstance(from2);
                    var toNode = to == null ? win : getNodeFromInstance(to);
                    var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
                    leave.target = fromNode;
                    leave.relatedTarget = toNode;
                    var enter = null;
                    var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
                    if (nativeTargetInst === targetInst) {
                        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
                        enterEvent.target = toNode;
                        enterEvent.relatedTarget = fromNode;
                        enter = enterEvent;
                    }
                    accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
                }
                function is(x, y) {
                    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
                }
                var objectIs = typeof Object.is === "function" ? Object.is : is;
                function shallowEqual(objA, objB) {
                    if (objectIs(objA, objB)) {
                        return true;
                    }
                    if ((typeof objA === "undefined" ? "undefined" : _type_of(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _type_of(objB)) !== "object" || objB === null) {
                        return false;
                    }
                    var keysA = Object.keys(objA);
                    var keysB = Object.keys(objB);
                    if (keysA.length !== keysB.length) {
                        return false;
                    }
                    for(var i = 0; i < keysA.length; i++){
                        var currentKey = keysA[i];
                        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                            return false;
                        }
                    }
                    return true;
                }
                function getLeafNode(node2) {
                    while(node2 && node2.firstChild){
                        node2 = node2.firstChild;
                    }
                    return node2;
                }
                function getSiblingNode(node2) {
                    while(node2){
                        if (node2.nextSibling) {
                            return node2.nextSibling;
                        }
                        node2 = node2.parentNode;
                    }
                }
                function getNodeForCharacterOffset(root2, offset) {
                    var node2 = getLeafNode(root2);
                    var nodeStart = 0;
                    var nodeEnd = 0;
                    while(node2){
                        if (node2.nodeType === TEXT_NODE) {
                            nodeEnd = nodeStart + node2.textContent.length;
                            if (nodeStart <= offset && nodeEnd >= offset) {
                                return {
                                    node: node2,
                                    offset: offset - nodeStart
                                };
                            }
                            nodeStart = nodeEnd;
                        }
                        node2 = getLeafNode(getSiblingNode(node2));
                    }
                }
                function getOffsets(outerNode) {
                    var ownerDocument = outerNode.ownerDocument;
                    var win = ownerDocument && ownerDocument.defaultView || window;
                    var selection = win.getSelection && win.getSelection();
                    if (!selection || selection.rangeCount === 0) {
                        return null;
                    }
                    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
                    try {
                        anchorNode.nodeType;
                        focusNode.nodeType;
                    } catch (e) {
                        return null;
                    }
                    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
                }
                function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
                    var length2 = 0;
                    var start = -1;
                    var end = -1;
                    var indexWithinAnchor = 0;
                    var indexWithinFocus = 0;
                    var node2 = outerNode;
                    var parentNode = null;
                    outer: while(true){
                        var next2 = null;
                        while(true){
                            if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                                start = length2 + anchorOffset;
                            }
                            if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                                end = length2 + focusOffset;
                            }
                            if (node2.nodeType === TEXT_NODE) {
                                length2 += node2.nodeValue.length;
                            }
                            if ((next2 = node2.firstChild) === null) {
                                break;
                            }
                            parentNode = node2;
                            node2 = next2;
                        }
                        while(true){
                            if (node2 === outerNode) {
                                break outer;
                            }
                            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                                start = length2;
                            }
                            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                                end = length2;
                            }
                            if ((next2 = node2.nextSibling) !== null) {
                                break;
                            }
                            node2 = parentNode;
                            parentNode = node2.parentNode;
                        }
                        node2 = next2;
                    }
                    if (start === -1 || end === -1) {
                        return null;
                    }
                    return {
                        start: start,
                        end: end
                    };
                }
                function setOffsets(node2, offsets) {
                    var doc = node2.ownerDocument || document;
                    var win = doc && doc.defaultView || window;
                    if (!win.getSelection) {
                        return;
                    }
                    var selection = win.getSelection();
                    var length2 = node2.textContent.length;
                    var start = Math.min(offsets.start, length2);
                    var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
                    if (!selection.extend && start > end) {
                        var temp = end;
                        end = start;
                        start = temp;
                    }
                    var startMarker = getNodeForCharacterOffset(node2, start);
                    var endMarker = getNodeForCharacterOffset(node2, end);
                    if (startMarker && endMarker) {
                        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                            return;
                        }
                        var range = doc.createRange();
                        range.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        if (start > end) {
                            selection.addRange(range);
                            selection.extend(endMarker.node, endMarker.offset);
                        } else {
                            range.setEnd(endMarker.node, endMarker.offset);
                            selection.addRange(range);
                        }
                    }
                }
                function isTextNode(node2) {
                    return node2 && node2.nodeType === TEXT_NODE;
                }
                function containsNode(outerNode, innerNode) {
                    if (!outerNode || !innerNode) {
                        return false;
                    } else if (outerNode === innerNode) {
                        return true;
                    } else if (isTextNode(outerNode)) {
                        return false;
                    } else if (isTextNode(innerNode)) {
                        return containsNode(outerNode, innerNode.parentNode);
                    } else if ("contains" in outerNode) {
                        return outerNode.contains(innerNode);
                    } else if (outerNode.compareDocumentPosition) {
                        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
                    } else {
                        return false;
                    }
                }
                function isInDocument(node2) {
                    return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
                }
                function isSameOriginFrame(iframe) {
                    try {
                        return typeof iframe.contentWindow.location.href === "string";
                    } catch (err) {
                        return false;
                    }
                }
                function getActiveElementDeep() {
                    var win = window;
                    var element = getActiveElement();
                    while(_instanceof(element, win.HTMLIFrameElement)){
                        if (isSameOriginFrame(element)) {
                            win = element.contentWindow;
                        } else {
                            return element;
                        }
                        element = getActiveElement(win.document);
                    }
                    return element;
                }
                function hasSelectionCapabilities(elem) {
                    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                    return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
                }
                function getSelectionInformation() {
                    var focusedElem = getActiveElementDeep();
                    return {
                        focusedElem: focusedElem,
                        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
                    };
                }
                function restoreSelection(priorSelectionInformation) {
                    var curFocusedElem = getActiveElementDeep();
                    var priorFocusedElem = priorSelectionInformation.focusedElem;
                    var priorSelectionRange = priorSelectionInformation.selectionRange;
                    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                            setSelection(priorFocusedElem, priorSelectionRange);
                        }
                        var ancestors = [];
                        var ancestor = priorFocusedElem;
                        while(ancestor = ancestor.parentNode){
                            if (ancestor.nodeType === ELEMENT_NODE) {
                                ancestors.push({
                                    element: ancestor,
                                    left: ancestor.scrollLeft,
                                    top: ancestor.scrollTop
                                });
                            }
                        }
                        if (typeof priorFocusedElem.focus === "function") {
                            priorFocusedElem.focus();
                        }
                        for(var i = 0; i < ancestors.length; i++){
                            var info = ancestors[i];
                            info.element.scrollLeft = info.left;
                            info.element.scrollTop = info.top;
                        }
                    }
                }
                function getSelection(input) {
                    var selection;
                    if ("selectionStart" in input) {
                        selection = {
                            start: input.selectionStart,
                            end: input.selectionEnd
                        };
                    } else {
                        selection = getOffsets(input);
                    }
                    return selection || {
                        start: 0,
                        end: 0
                    };
                }
                function setSelection(input, offsets) {
                    var start = offsets.start;
                    var end = offsets.end;
                    if (end === void 0) {
                        end = start;
                    }
                    if ("selectionStart" in input) {
                        input.selectionStart = start;
                        input.selectionEnd = Math.min(end, input.value.length);
                    } else {
                        setOffsets(input, offsets);
                    }
                }
                var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
                function registerEvents$3() {
                    registerTwoPhaseEvent("onSelect", [
                        "focusout",
                        "contextmenu",
                        "dragend",
                        "focusin",
                        "keydown",
                        "keyup",
                        "mousedown",
                        "mouseup",
                        "selectionchange"
                    ]);
                }
                var activeElement$1 = null;
                var activeElementInst$1 = null;
                var lastSelection = null;
                var mouseDown = false;
                function getSelection$1(node2) {
                    if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
                        return {
                            start: node2.selectionStart,
                            end: node2.selectionEnd
                        };
                    } else {
                        var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
                        var selection = win.getSelection();
                        return {
                            anchorNode: selection.anchorNode,
                            anchorOffset: selection.anchorOffset,
                            focusNode: selection.focusNode,
                            focusOffset: selection.focusOffset
                        };
                    }
                }
                function getEventTargetDocument(eventTarget) {
                    return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
                }
                function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
                    var doc = getEventTargetDocument(nativeEventTarget);
                    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
                        return;
                    }
                    var currentSelection = getSelection$1(activeElement$1);
                    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                        lastSelection = currentSelection;
                        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
                        if (listeners.length > 0) {
                            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                            dispatchQueue.push({
                                event: event,
                                listeners: listeners
                            });
                            event.target = activeElement$1;
                        }
                    }
                }
                function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
                    switch(domEventName){
                        // Track the input node that has focus.
                        case "focusin":
                            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                                activeElement$1 = targetNode;
                                activeElementInst$1 = targetInst;
                                lastSelection = null;
                            }
                            break;
                        case "focusout":
                            activeElement$1 = null;
                            activeElementInst$1 = null;
                            lastSelection = null;
                            break;
                        // Don't fire the event while the user is dragging. This matches the
                        // semantics of the native select event.
                        case "mousedown":
                            mouseDown = true;
                            break;
                        case "contextmenu":
                        case "mouseup":
                        case "dragend":
                            mouseDown = false;
                            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                            break;
                        // Chrome and IE fire non-standard event when selection is changed (and
                        // sometimes when it hasn't). IE's event fires out of order with respect
                        // to key and input events on deletion, so we discard it.
                        //
                        // Firefox doesn't support selectionchange, so check selection status
                        // after each key entry. The selection changes after keydown and before
                        // keyup, but we check on keydown as well in the case of holding down a
                        // key, when multiple keydown events are fired but only one keyup is.
                        // This is also our approach for IE handling, for the reason above.
                        case "selectionchange":
                            if (skipSelectionChangeEvent) {
                                break;
                            }
                        // falls through
                        case "keydown":
                        case "keyup":
                            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                    }
                }
                function makePrefixMap2(styleProp, eventName) {
                    var prefixes2 = {};
                    prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
                    prefixes2["Webkit" + styleProp] = "webkit" + eventName;
                    prefixes2["Moz" + styleProp] = "moz" + eventName;
                    return prefixes2;
                }
                var vendorPrefixes2 = {
                    animationend: makePrefixMap2("Animation", "AnimationEnd"),
                    animationiteration: makePrefixMap2("Animation", "AnimationIteration"),
                    animationstart: makePrefixMap2("Animation", "AnimationStart"),
                    transitionend: makePrefixMap2("Transition", "TransitionEnd")
                };
                var prefixedEventNames2 = {};
                var style2 = {};
                if (canUseDOM) {
                    style2 = document.createElement("div").style;
                    if (!("AnimationEvent" in window)) {
                        delete vendorPrefixes2.animationend.animation;
                        delete vendorPrefixes2.animationiteration.animation;
                        delete vendorPrefixes2.animationstart.animation;
                    }
                    if (!("TransitionEvent" in window)) {
                        delete vendorPrefixes2.transitionend.transition;
                    }
                }
                function getVendorPrefixedEventName2(eventName) {
                    if (prefixedEventNames2[eventName]) {
                        return prefixedEventNames2[eventName];
                    } else if (!vendorPrefixes2[eventName]) {
                        return eventName;
                    }
                    var prefixMap = vendorPrefixes2[eventName];
                    for(var styleProp in prefixMap){
                        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                            return prefixedEventNames2[eventName] = prefixMap[styleProp];
                        }
                    }
                    return eventName;
                }
                var ANIMATION_END = getVendorPrefixedEventName2("animationend");
                var ANIMATION_ITERATION = getVendorPrefixedEventName2("animationiteration");
                var ANIMATION_START = getVendorPrefixedEventName2("animationstart");
                var TRANSITION_END = getVendorPrefixedEventName2("transitionend");
                var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
                var simpleEventPluginEvents = [
                    "abort",
                    "auxClick",
                    "cancel",
                    "canPlay",
                    "canPlayThrough",
                    "click",
                    "close",
                    "contextMenu",
                    "copy",
                    "cut",
                    "drag",
                    "dragEnd",
                    "dragEnter",
                    "dragExit",
                    "dragLeave",
                    "dragOver",
                    "dragStart",
                    "drop",
                    "durationChange",
                    "emptied",
                    "encrypted",
                    "ended",
                    "error",
                    "gotPointerCapture",
                    "input",
                    "invalid",
                    "keyDown",
                    "keyPress",
                    "keyUp",
                    "load",
                    "loadedData",
                    "loadedMetadata",
                    "loadStart",
                    "lostPointerCapture",
                    "mouseDown",
                    "mouseMove",
                    "mouseOut",
                    "mouseOver",
                    "mouseUp",
                    "paste",
                    "pause",
                    "play",
                    "playing",
                    "pointerCancel",
                    "pointerDown",
                    "pointerMove",
                    "pointerOut",
                    "pointerOver",
                    "pointerUp",
                    "progress",
                    "rateChange",
                    "reset",
                    "resize",
                    "seeked",
                    "seeking",
                    "stalled",
                    "submit",
                    "suspend",
                    "timeUpdate",
                    "touchCancel",
                    "touchEnd",
                    "touchStart",
                    "volumeChange",
                    "scroll",
                    "toggle",
                    "touchMove",
                    "waiting",
                    "wheel"
                ];
                function registerSimpleEvent(domEventName, reactName) {
                    topLevelEventsToReactNames.set(domEventName, reactName);
                    registerTwoPhaseEvent(reactName, [
                        domEventName
                    ]);
                }
                function registerSimpleEvents() {
                    for(var i = 0; i < simpleEventPluginEvents.length; i++){
                        var eventName = simpleEventPluginEvents[i];
                        var domEventName = eventName.toLowerCase();
                        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
                        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
                    }
                    registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
                    registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
                    registerSimpleEvent(ANIMATION_START, "onAnimationStart");
                    registerSimpleEvent("dblclick", "onDoubleClick");
                    registerSimpleEvent("focusin", "onFocus");
                    registerSimpleEvent("focusout", "onBlur");
                    registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
                }
                function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    var reactName = topLevelEventsToReactNames.get(domEventName);
                    if (reactName === void 0) {
                        return;
                    }
                    var SyntheticEventCtor = SyntheticEvent;
                    var reactEventType = domEventName;
                    switch(domEventName){
                        case "keypress":
                            if (getEventCharCode(nativeEvent) === 0) {
                                return;
                            }
                        /* falls through */ case "keydown":
                        case "keyup":
                            SyntheticEventCtor = SyntheticKeyboardEvent;
                            break;
                        case "focusin":
                            reactEventType = "focus";
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "focusout":
                            reactEventType = "blur";
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "beforeblur":
                        case "afterblur":
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "click":
                            if (nativeEvent.button === 2) {
                                return;
                            }
                        /* falls through */ case "auxclick":
                        case "dblclick":
                        case "mousedown":
                        case "mousemove":
                        case "mouseup":
                        // TODO: Disabled elements should not respond to mouse events
                        /* falls through */ case "mouseout":
                        case "mouseover":
                        case "contextmenu":
                            SyntheticEventCtor = SyntheticMouseEvent;
                            break;
                        case "drag":
                        case "dragend":
                        case "dragenter":
                        case "dragexit":
                        case "dragleave":
                        case "dragover":
                        case "dragstart":
                        case "drop":
                            SyntheticEventCtor = SyntheticDragEvent;
                            break;
                        case "touchcancel":
                        case "touchend":
                        case "touchmove":
                        case "touchstart":
                            SyntheticEventCtor = SyntheticTouchEvent;
                            break;
                        case ANIMATION_END:
                        case ANIMATION_ITERATION:
                        case ANIMATION_START:
                            SyntheticEventCtor = SyntheticAnimationEvent;
                            break;
                        case TRANSITION_END:
                            SyntheticEventCtor = SyntheticTransitionEvent;
                            break;
                        case "scroll":
                            SyntheticEventCtor = SyntheticUIEvent;
                            break;
                        case "wheel":
                            SyntheticEventCtor = SyntheticWheelEvent;
                            break;
                        case "copy":
                        case "cut":
                        case "paste":
                            SyntheticEventCtor = SyntheticClipboardEvent;
                            break;
                        case "gotpointercapture":
                        case "lostpointercapture":
                        case "pointercancel":
                        case "pointerdown":
                        case "pointermove":
                        case "pointerout":
                        case "pointerover":
                        case "pointerup":
                            SyntheticEventCtor = SyntheticPointerEvent;
                            break;
                    }
                    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
                    {
                        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
                        // nonDelegatedEvents list in DOMPluginEventSystem.
                        // Then we can remove this special list.
                        // This is a breaking change that can wait until React 18.
                        domEventName === "scroll";
                        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
                        if (_listeners.length > 0) {
                            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                            dispatchQueue.push({
                                event: _event,
                                listeners: _listeners
                            });
                        }
                    }
                }
                registerSimpleEvents();
                registerEvents$2();
                registerEvents$1();
                registerEvents$3();
                registerEvents();
                function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
                    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                    var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
                    if (shouldProcessPolyfillPlugins) {
                        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                    }
                }
                var mediaEventTypes = [
                    "abort",
                    "canplay",
                    "canplaythrough",
                    "durationchange",
                    "emptied",
                    "encrypted",
                    "ended",
                    "error",
                    "loadeddata",
                    "loadedmetadata",
                    "loadstart",
                    "pause",
                    "play",
                    "playing",
                    "progress",
                    "ratechange",
                    "resize",
                    "seeked",
                    "seeking",
                    "stalled",
                    "suspend",
                    "timeupdate",
                    "volumechange",
                    "waiting"
                ];
                var nonDelegatedEvents = new Set([
                    "cancel",
                    "close",
                    "invalid",
                    "load",
                    "scroll",
                    "toggle"
                ].concat(mediaEventTypes));
                function executeDispatch(event, listener, currentTarget) {
                    var type = event.type || "unknown-event";
                    event.currentTarget = currentTarget;
                    invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
                    event.currentTarget = null;
                }
                function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
                    var previousInstance;
                    if (inCapturePhase) {
                        for(var i = dispatchListeners.length - 1; i >= 0; i--){
                            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                            if (instance !== previousInstance && event.isPropagationStopped()) {
                                return;
                            }
                            executeDispatch(event, listener, currentTarget);
                            previousInstance = instance;
                        }
                    } else {
                        for(var _i = 0; _i < dispatchListeners.length; _i++){
                            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                            if (_instance !== previousInstance && event.isPropagationStopped()) {
                                return;
                            }
                            executeDispatch(event, _listener, _currentTarget);
                            previousInstance = _instance;
                        }
                    }
                }
                function processDispatchQueue(dispatchQueue, eventSystemFlags) {
                    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
                    for(var i = 0; i < dispatchQueue.length; i++){
                        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
                        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
                    }
                    rethrowCaughtError();
                }
                function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                    var nativeEventTarget = getEventTarget(nativeEvent);
                    var dispatchQueue = [];
                    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                    processDispatchQueue(dispatchQueue, eventSystemFlags);
                }
                function listenToNonDelegatedEvent(domEventName, targetElement) {
                    {
                        if (!nonDelegatedEvents.has(domEventName)) {
                            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
                        }
                    }
                    var isCapturePhaseListener = false;
                    var listenerSet = getEventListenerSet(targetElement);
                    var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
                    if (!listenerSet.has(listenerSetKey)) {
                        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
                        listenerSet.add(listenerSetKey);
                    }
                }
                function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
                    {
                        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
                        }
                    }
                    var eventSystemFlags = 0;
                    if (isCapturePhaseListener) {
                        eventSystemFlags |= IS_CAPTURE_PHASE;
                    }
                    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
                }
                var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
                function listenToAllSupportedEvents(rootContainerElement) {
                    if (!rootContainerElement[listeningMarker]) {
                        rootContainerElement[listeningMarker] = true;
                        allNativeEvents.forEach(function(domEventName) {
                            if (domEventName !== "selectionchange") {
                                if (!nonDelegatedEvents.has(domEventName)) {
                                    listenToNativeEvent(domEventName, false, rootContainerElement);
                                }
                                listenToNativeEvent(domEventName, true, rootContainerElement);
                            }
                        });
                        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
                        if (ownerDocument !== null) {
                            if (!ownerDocument[listeningMarker]) {
                                ownerDocument[listeningMarker] = true;
                                listenToNativeEvent("selectionchange", false, ownerDocument);
                            }
                        }
                    }
                }
                function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
                    var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
                    var isPassiveListener = void 0;
                    if (passiveBrowserEventsSupported) {
                        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                            isPassiveListener = true;
                        }
                    }
                    targetContainer = targetContainer;
                    var unsubscribeListener;
                    if (isCapturePhaseListener) {
                        if (isPassiveListener !== void 0) {
                            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                        } else {
                            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
                        }
                    } else {
                        if (isPassiveListener !== void 0) {
                            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                        } else {
                            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
                        }
                    }
                }
                function isMatchingRootContainer(grandContainer, targetContainer) {
                    return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
                }
                function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
                    var ancestorInst = targetInst;
                    if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
                        var targetContainerNode = targetContainer;
                        if (targetInst !== null) {
                            var node2 = targetInst;
                            mainLoop: while(true){
                                if (node2 === null) {
                                    return;
                                }
                                var nodeTag = node2.tag;
                                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                                    var container = node2.stateNode.containerInfo;
                                    if (isMatchingRootContainer(container, targetContainerNode)) {
                                        break;
                                    }
                                    if (nodeTag === HostPortal) {
                                        var grandNode = node2.return;
                                        while(grandNode !== null){
                                            var grandTag = grandNode.tag;
                                            if (grandTag === HostRoot || grandTag === HostPortal) {
                                                var grandContainer = grandNode.stateNode.containerInfo;
                                                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                                                    return;
                                                }
                                            }
                                            grandNode = grandNode.return;
                                        }
                                    }
                                    while(container !== null){
                                        var parentNode = getClosestInstanceFromNode(container);
                                        if (parentNode === null) {
                                            return;
                                        }
                                        var parentTag = parentNode.tag;
                                        if (parentTag === HostComponent || parentTag === HostText) {
                                            node2 = ancestorInst = parentNode;
                                            continue mainLoop;
                                        }
                                        container = container.parentNode;
                                    }
                                }
                                node2 = node2.return;
                            }
                        }
                    }
                    batchedUpdates(function() {
                        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
                    });
                }
                function createDispatchListener(instance, listener, currentTarget) {
                    return {
                        instance: instance,
                        listener: listener,
                        currentTarget: currentTarget
                    };
                }
                function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
                    var captureName = reactName !== null ? reactName + "Capture" : null;
                    var reactEventName = inCapturePhase ? captureName : reactName;
                    var listeners = [];
                    var instance = targetFiber;
                    var lastHostComponent = null;
                    while(instance !== null){
                        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
                        if (tag === HostComponent && stateNode !== null) {
                            lastHostComponent = stateNode;
                            if (reactEventName !== null) {
                                var listener = getListener(instance, reactEventName);
                                if (listener != null) {
                                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                                }
                            }
                        }
                        if (accumulateTargetOnly) {
                            break;
                        }
                        instance = instance.return;
                    }
                    return listeners;
                }
                function accumulateTwoPhaseListeners(targetFiber, reactName) {
                    var captureName = reactName + "Capture";
                    var listeners = [];
                    var instance = targetFiber;
                    while(instance !== null){
                        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
                        if (tag === HostComponent && stateNode !== null) {
                            var currentTarget = stateNode;
                            var captureListener = getListener(instance, captureName);
                            if (captureListener != null) {
                                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                            }
                            var bubbleListener = getListener(instance, reactName);
                            if (bubbleListener != null) {
                                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                            }
                        }
                        instance = instance.return;
                    }
                    return listeners;
                }
                function getParent(inst) {
                    if (inst === null) {
                        return null;
                    }
                    do {
                        inst = inst.return;
                    }while (inst && inst.tag !== HostComponent);
                    if (inst) {
                        return inst;
                    }
                    return null;
                }
                function getLowestCommonAncestor(instA, instB) {
                    var nodeA = instA;
                    var nodeB = instB;
                    var depthA = 0;
                    for(var tempA = nodeA; tempA; tempA = getParent(tempA)){
                        depthA++;
                    }
                    var depthB = 0;
                    for(var tempB = nodeB; tempB; tempB = getParent(tempB)){
                        depthB++;
                    }
                    while(depthA - depthB > 0){
                        nodeA = getParent(nodeA);
                        depthA--;
                    }
                    while(depthB - depthA > 0){
                        nodeB = getParent(nodeB);
                        depthB--;
                    }
                    var depth = depthA;
                    while(depth--){
                        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                            return nodeA;
                        }
                        nodeA = getParent(nodeA);
                        nodeB = getParent(nodeB);
                    }
                    return null;
                }
                function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
                    var registrationName = event._reactName;
                    var listeners = [];
                    var instance = target;
                    while(instance !== null){
                        if (instance === common) {
                            break;
                        }
                        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
                        if (alternate !== null && alternate === common) {
                            break;
                        }
                        if (tag === HostComponent && stateNode !== null) {
                            var currentTarget = stateNode;
                            if (inCapturePhase) {
                                var captureListener = getListener(instance, registrationName);
                                if (captureListener != null) {
                                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                                }
                            } else if (!inCapturePhase) {
                                var bubbleListener = getListener(instance, registrationName);
                                if (bubbleListener != null) {
                                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                                }
                            }
                        }
                        instance = instance.return;
                    }
                    if (listeners.length !== 0) {
                        dispatchQueue.push({
                            event: event,
                            listeners: listeners
                        });
                    }
                }
                function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
                    var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
                    if (from2 !== null) {
                        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
                    }
                    if (to !== null && enterEvent !== null) {
                        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
                    }
                }
                function getListenerSetKey(domEventName, capture) {
                    return domEventName + "__" + (capture ? "capture" : "bubble");
                }
                var didWarnInvalidHydration = false;
                var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
                var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
                var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
                var AUTOFOCUS = "autoFocus";
                var CHILDREN = "children";
                var STYLE = "style";
                var HTML$1 = "__html";
                var warnedUnknownTags;
                var validatePropertiesInDevelopment;
                var warnForPropDifference;
                var warnForExtraAttributes;
                var warnForInvalidEventListener;
                var canDiffStyleForHydrationWarning;
                var normalizeHTML;
                {
                    warnedUnknownTags = {
                        // There are working polyfills for <dialog>. Let people use it.
                        dialog: true,
                        // Electron ships a custom <webview> tag to display external web content in
                        // an isolated frame and process.
                        // This tag is not present in non Electron environments such as JSDom which
                        // is often used for testing purposes.
                        // @see https://electronjs.org/docs/api/webview-tag
                        webview: true
                    };
                    validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {
                        validateProperties(type, props);
                        validateProperties$1(type, props);
                        validateProperties$2(type, props, {
                            registrationNameDependencies: registrationNameDependencies,
                            possibleRegistrationNames: possibleRegistrationNames
                        });
                    };
                    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
                    warnForPropDifference = function warnForPropDifference(propName, serverValue, clientValue) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
                        if (normalizedServerValue === normalizedClientValue) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
                    };
                    warnForExtraAttributes = function warnForExtraAttributes(attributeNames) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        var names = [];
                        attributeNames.forEach(function(name) {
                            names.push(name);
                        });
                        error("Extra attributes from the server: %s", names);
                    };
                    warnForInvalidEventListener = function warnForInvalidEventListener(registrationName, listener) {
                        if (listener === false) {
                            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
                        } else {
                            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener === "undefined" ? "undefined" : _type_of(listener));
                        }
                    };
                    normalizeHTML = function normalizeHTML(parent, html) {
                        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                        testElement.innerHTML = html;
                        return testElement.innerHTML;
                    };
                }
                var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
                var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
                function normalizeMarkupForTextOrAttribute(markup) {
                    {
                        checkHtmlStringCoercion(markup);
                    }
                    var markupString = typeof markup === "string" ? markup : "" + markup;
                    return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
                }
                function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
                    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
                    if (normalizedServerText === normalizedClientText) {
                        return;
                    }
                    if (shouldWarnDev) {
                        {
                            if (!didWarnInvalidHydration) {
                                didWarnInvalidHydration = true;
                                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                            }
                        }
                    }
                    if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
                        throw new Error("Text content does not match server-rendered HTML.");
                    }
                }
                function getOwnerDocumentFromRootContainer(rootContainerElement) {
                    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
                }
                function noop3() {}
                function trapClickOnNonInteractiveElement(node2) {
                    node2.onclick = noop3;
                }
                function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
                    for(var propKey in nextProps){
                        if (!nextProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = nextProps[propKey];
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            setValueForStyles(domElement, nextProp);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                            if (nextHtml != null) {
                                setInnerHTML(domElement, nextHtml);
                            }
                        } else if (propKey === CHILDREN) {
                            if (typeof nextProp === "string") {
                                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                                if (canSetTextContent) {
                                    setTextContent(domElement, nextProp);
                                }
                            } else if (typeof nextProp === "number") {
                                setTextContent(domElement, "" + nextProp);
                            }
                        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
                        else if (propKey === AUTOFOCUS) ;
                        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                        } else if (nextProp != null) {
                            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                        }
                    }
                }
                function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
                    for(var i = 0; i < updatePayload.length; i += 2){
                        var propKey = updatePayload[i];
                        var propValue = updatePayload[i + 1];
                        if (propKey === STYLE) {
                            setValueForStyles(domElement, propValue);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            setInnerHTML(domElement, propValue);
                        } else if (propKey === CHILDREN) {
                            setTextContent(domElement, propValue);
                        } else {
                            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                        }
                    }
                }
                function createElement16(type, props, rootContainerElement, parentNamespace) {
                    var isCustomComponentTag;
                    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
                    var domElement;
                    var namespaceURI = parentNamespace;
                    if (namespaceURI === HTML_NAMESPACE) {
                        namespaceURI = getIntrinsicNamespace(type);
                    }
                    if (namespaceURI === HTML_NAMESPACE) {
                        {
                            isCustomComponentTag = isCustomComponent(type, props);
                            if (!isCustomComponentTag && type !== type.toLowerCase()) {
                                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                            }
                        }
                        if (type === "script") {
                            var div = ownerDocument.createElement("div");
                            div.innerHTML = "<script></script>";
                            var firstChild = div.firstChild;
                            domElement = div.removeChild(firstChild);
                        } else if (typeof props.is === "string") {
                            domElement = ownerDocument.createElement(type, {
                                is: props.is
                            });
                        } else {
                            domElement = ownerDocument.createElement(type);
                            if (type === "select") {
                                var node2 = domElement;
                                if (props.multiple) {
                                    node2.multiple = true;
                                } else if (props.size) {
                                    node2.size = props.size;
                                }
                            }
                        }
                    } else {
                        domElement = ownerDocument.createElementNS(namespaceURI, type);
                    }
                    {
                        if (namespaceURI === HTML_NAMESPACE) {
                            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                                warnedUnknownTags[type] = true;
                                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                            }
                        }
                    }
                    return domElement;
                }
                function createTextNode(text, rootContainerElement) {
                    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
                }
                function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
                    var isCustomComponentTag = isCustomComponent(tag, rawProps);
                    {
                        validatePropertiesInDevelopment(tag, rawProps);
                    }
                    var props;
                    switch(tag){
                        case "dialog":
                            listenToNonDelegatedEvent("cancel", domElement);
                            listenToNonDelegatedEvent("close", domElement);
                            props = rawProps;
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            listenToNonDelegatedEvent("load", domElement);
                            props = rawProps;
                            break;
                        case "video":
                        case "audio":
                            for(var i = 0; i < mediaEventTypes.length; i++){
                                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                            }
                            props = rawProps;
                            break;
                        case "source":
                            listenToNonDelegatedEvent("error", domElement);
                            props = rawProps;
                            break;
                        case "img":
                        case "image":
                        case "link":
                            listenToNonDelegatedEvent("error", domElement);
                            listenToNonDelegatedEvent("load", domElement);
                            props = rawProps;
                            break;
                        case "details":
                            listenToNonDelegatedEvent("toggle", domElement);
                            props = rawProps;
                            break;
                        case "input":
                            initWrapperState(domElement, rawProps);
                            props = getHostProps(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                        case "option":
                            validateProps(domElement, rawProps);
                            props = rawProps;
                            break;
                        case "select":
                            initWrapperState$1(domElement, rawProps);
                            props = getHostProps$1(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                        case "textarea":
                            initWrapperState$2(domElement, rawProps);
                            props = getHostProps$2(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                        default:
                            props = rawProps;
                    }
                    assertValidProps(tag, props);
                    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
                    switch(tag){
                        case "input":
                            track(domElement);
                            postMountWrapper(domElement, rawProps, false);
                            break;
                        case "textarea":
                            track(domElement);
                            postMountWrapper$3(domElement);
                            break;
                        case "option":
                            postMountWrapper$1(domElement, rawProps);
                            break;
                        case "select":
                            postMountWrapper$2(domElement, rawProps);
                            break;
                        default:
                            if (typeof props.onClick === "function") {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                }
                function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
                    {
                        validatePropertiesInDevelopment(tag, nextRawProps);
                    }
                    var updatePayload = null;
                    var lastProps;
                    var nextProps;
                    switch(tag){
                        case "input":
                            lastProps = getHostProps(domElement, lastRawProps);
                            nextProps = getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case "select":
                            lastProps = getHostProps$1(domElement, lastRawProps);
                            nextProps = getHostProps$1(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case "textarea":
                            lastProps = getHostProps$2(domElement, lastRawProps);
                            nextProps = getHostProps$2(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        default:
                            lastProps = lastRawProps;
                            nextProps = nextRawProps;
                            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                    assertValidProps(tag, nextProps);
                    var propKey;
                    var styleName;
                    var styleUpdates = null;
                    for(propKey in lastProps){
                        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            var lastStyle = lastProps[propKey];
                            for(styleName in lastStyle){
                                if (lastStyle.hasOwnProperty(styleName)) {
                                    if (!styleUpdates) {
                                        styleUpdates = {};
                                    }
                                    styleUpdates[styleName] = "";
                                }
                            }
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
                        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
                        else if (propKey === AUTOFOCUS) ;
                        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (!updatePayload) {
                                updatePayload = [];
                            }
                        } else {
                            (updatePayload = updatePayload || []).push(propKey, null);
                        }
                    }
                    for(propKey in nextProps){
                        var nextProp = nextProps[propKey];
                        var lastProp = lastProps != null ? lastProps[propKey] : void 0;
                        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            if (lastProp) {
                                for(styleName in lastProp){
                                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = "";
                                    }
                                }
                                for(styleName in nextProp){
                                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = nextProp[styleName];
                                    }
                                }
                            } else {
                                if (!styleUpdates) {
                                    if (!updatePayload) {
                                        updatePayload = [];
                                    }
                                    updatePayload.push(propKey, styleUpdates);
                                }
                                styleUpdates = nextProp;
                            }
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                            if (nextHtml != null) {
                                if (lastHtml !== nextHtml) {
                                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                                }
                            }
                        } else if (propKey === CHILDREN) {
                            if (typeof nextProp === "string" || typeof nextProp === "number") {
                                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                            }
                        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
                        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                            if (!updatePayload && lastProp !== nextProp) {
                                updatePayload = [];
                            }
                        } else {
                            (updatePayload = updatePayload || []).push(propKey, nextProp);
                        }
                    }
                    if (styleUpdates) {
                        {
                            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
                        }
                        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
                    }
                    return updatePayload;
                }
                function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
                    if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
                        updateChecked(domElement, nextRawProps);
                    }
                    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
                    var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
                    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
                    switch(tag){
                        case "input":
                            updateWrapper(domElement, nextRawProps);
                            break;
                        case "textarea":
                            updateWrapper$1(domElement, nextRawProps);
                            break;
                        case "select":
                            postUpdateWrapper(domElement, nextRawProps);
                            break;
                    }
                }
                function getPossibleStandardName(propName) {
                    {
                        var lowerCasedName = propName.toLowerCase();
                        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            return null;
                        }
                        return possibleStandardNames[lowerCasedName] || null;
                    }
                }
                function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
                    var isCustomComponentTag;
                    var extraAttributeNames;
                    {
                        isCustomComponentTag = isCustomComponent(tag, rawProps);
                        validatePropertiesInDevelopment(tag, rawProps);
                    }
                    switch(tag){
                        case "dialog":
                            listenToNonDelegatedEvent("cancel", domElement);
                            listenToNonDelegatedEvent("close", domElement);
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            listenToNonDelegatedEvent("load", domElement);
                            break;
                        case "video":
                        case "audio":
                            for(var i = 0; i < mediaEventTypes.length; i++){
                                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                            }
                            break;
                        case "source":
                            listenToNonDelegatedEvent("error", domElement);
                            break;
                        case "img":
                        case "image":
                        case "link":
                            listenToNonDelegatedEvent("error", domElement);
                            listenToNonDelegatedEvent("load", domElement);
                            break;
                        case "details":
                            listenToNonDelegatedEvent("toggle", domElement);
                            break;
                        case "input":
                            initWrapperState(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                        case "option":
                            validateProps(domElement, rawProps);
                            break;
                        case "select":
                            initWrapperState$1(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                        case "textarea":
                            initWrapperState$2(domElement, rawProps);
                            listenToNonDelegatedEvent("invalid", domElement);
                            break;
                    }
                    assertValidProps(tag, rawProps);
                    {
                        extraAttributeNames = /* @__PURE__ */ new Set();
                        var attributes = domElement.attributes;
                        for(var _i = 0; _i < attributes.length; _i++){
                            var name = attributes[_i].name.toLowerCase();
                            switch(name){
                                // Controlled attributes are not validated
                                // TODO: Only ignore them on controlled tags.
                                case "value":
                                    break;
                                case "checked":
                                    break;
                                case "selected":
                                    break;
                                default:
                                    extraAttributeNames.add(attributes[_i].name);
                            }
                        }
                    }
                    var updatePayload = null;
                    for(var propKey in rawProps){
                        if (!rawProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = rawProps[propKey];
                        if (propKey === CHILDREN) {
                            if (typeof nextProp === "string") {
                                if (domElement.textContent !== nextProp) {
                                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                        checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                                    }
                                    updatePayload = [
                                        CHILDREN,
                                        nextProp
                                    ];
                                }
                            } else if (typeof nextProp === "number") {
                                if (domElement.textContent !== "" + nextProp) {
                                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                        checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                                    }
                                    updatePayload = [
                                        CHILDREN,
                                        "" + nextProp
                                    ];
                                }
                            }
                        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== "function") {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                if (propKey === "onScroll") {
                                    listenToNonDelegatedEvent("scroll", domElement);
                                }
                            }
                        } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
                        typeof isCustomComponentTag === "boolean") {
                            var serverValue = void 0;
                            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                            // TODO: Only ignore them on controlled tags.
                            propKey === "value" || propKey === "checked" || propKey === "selected") ;
                            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                                var serverHTML = domElement.innerHTML;
                                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                                if (nextHtml != null) {
                                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                                    if (expectedHTML !== serverHTML) {
                                        warnForPropDifference(propKey, serverHTML, expectedHTML);
                                    }
                                }
                            } else if (propKey === STYLE) {
                                extraAttributeNames.delete(propKey);
                                if (canDiffStyleForHydrationWarning) {
                                    var expectedStyle = createDangerousStringForStyles(nextProp);
                                    serverValue = domElement.getAttribute("style");
                                    if (expectedStyle !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, expectedStyle);
                                    }
                                }
                            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                                extraAttributeNames.delete(propKey.toLowerCase());
                                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                if (nextProp !== serverValue) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                                var isMismatchDueToBadCasing = false;
                                if (propertyInfo !== null) {
                                    extraAttributeNames.delete(propertyInfo.attributeName);
                                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                                } else {
                                    var ownNamespace = parentNamespace;
                                    if (ownNamespace === HTML_NAMESPACE) {
                                        ownNamespace = getIntrinsicNamespace(tag);
                                    }
                                    if (ownNamespace === HTML_NAMESPACE) {
                                        extraAttributeNames.delete(propKey.toLowerCase());
                                    } else {
                                        var standardName = getPossibleStandardName(propKey);
                                        if (standardName !== null && standardName !== propKey) {
                                            isMismatchDueToBadCasing = true;
                                            extraAttributeNames.delete(standardName);
                                        }
                                        extraAttributeNames.delete(propKey);
                                    }
                                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                }
                                var dontWarnCustomElement = enableCustomElementPropertySupport;
                                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            }
                        }
                    }
                    {
                        if (shouldWarnDev) {
                            if (// $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                                warnForExtraAttributes(extraAttributeNames);
                            }
                        }
                    }
                    switch(tag){
                        case "input":
                            track(domElement);
                            postMountWrapper(domElement, rawProps, true);
                            break;
                        case "textarea":
                            track(domElement);
                            postMountWrapper$3(domElement);
                            break;
                        case "select":
                        case "option":
                            break;
                        default:
                            if (typeof rawProps.onClick === "function") {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                    return updatePayload;
                }
                function diffHydratedText(textNode, text, isConcurrentMode) {
                    var isDifferent = textNode.nodeValue !== text;
                    return isDifferent;
                }
                function warnForDeletedHydratableElement(parentNode, child) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForDeletedHydratableText(parentNode, child) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForInsertedHydratedElement(parentNode, tag, props) {
                    {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
                    }
                }
                function warnForInsertedHydratedText(parentNode, text) {
                    {
                        if (text === "") {
                            return;
                        }
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
                    }
                }
                function restoreControlledState$3(domElement, tag, props) {
                    switch(tag){
                        case "input":
                            restoreControlledState(domElement, props);
                            return;
                        case "textarea":
                            restoreControlledState$2(domElement, props);
                            return;
                        case "select":
                            restoreControlledState$1(domElement, props);
                            return;
                    }
                }
                var validateDOMNesting = function validateDOMNesting() {};
                var updatedAncestorInfo = function updatedAncestorInfo() {};
                {
                    var specialTags = [
                        "address",
                        "applet",
                        "area",
                        "article",
                        "aside",
                        "base",
                        "basefont",
                        "bgsound",
                        "blockquote",
                        "body",
                        "br",
                        "button",
                        "caption",
                        "center",
                        "col",
                        "colgroup",
                        "dd",
                        "details",
                        "dir",
                        "div",
                        "dl",
                        "dt",
                        "embed",
                        "fieldset",
                        "figcaption",
                        "figure",
                        "footer",
                        "form",
                        "frame",
                        "frameset",
                        "h1",
                        "h2",
                        "h3",
                        "h4",
                        "h5",
                        "h6",
                        "head",
                        "header",
                        "hgroup",
                        "hr",
                        "html",
                        "iframe",
                        "img",
                        "input",
                        "isindex",
                        "li",
                        "link",
                        "listing",
                        "main",
                        "marquee",
                        "menu",
                        "menuitem",
                        "meta",
                        "nav",
                        "noembed",
                        "noframes",
                        "noscript",
                        "object",
                        "ol",
                        "p",
                        "param",
                        "plaintext",
                        "pre",
                        "script",
                        "section",
                        "select",
                        "source",
                        "style",
                        "summary",
                        "table",
                        "tbody",
                        "td",
                        "template",
                        "textarea",
                        "tfoot",
                        "th",
                        "thead",
                        "title",
                        "tr",
                        "track",
                        "ul",
                        "wbr",
                        "xmp"
                    ];
                    var inScopeTags = [
                        "applet",
                        "caption",
                        "html",
                        "table",
                        "td",
                        "th",
                        "marquee",
                        "object",
                        "template",
                        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                        // TODO: Distinguish by namespace here -- for <title>, including it here
                        // errs on the side of fewer warnings
                        "foreignObject",
                        "desc",
                        "title"
                    ];
                    var buttonScopeTags = inScopeTags.concat([
                        "button"
                    ]);
                    var impliedEndTags = [
                        "dd",
                        "dt",
                        "li",
                        "option",
                        "optgroup",
                        "p",
                        "rp",
                        "rt"
                    ];
                    var emptyAncestorInfo = {
                        current: null,
                        formTag: null,
                        aTagInScope: null,
                        buttonTagInScope: null,
                        nobrTagInScope: null,
                        pTagInButtonScope: null,
                        listItemTagAutoclosing: null,
                        dlItemTagAutoclosing: null
                    };
                    updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag) {
                        var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
                        var info = {
                            tag: tag
                        };
                        if (inScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.aTagInScope = null;
                            ancestorInfo.buttonTagInScope = null;
                            ancestorInfo.nobrTagInScope = null;
                        }
                        if (buttonScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.pTagInButtonScope = null;
                        }
                        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                            ancestorInfo.listItemTagAutoclosing = null;
                            ancestorInfo.dlItemTagAutoclosing = null;
                        }
                        ancestorInfo.current = info;
                        if (tag === "form") {
                            ancestorInfo.formTag = info;
                        }
                        if (tag === "a") {
                            ancestorInfo.aTagInScope = info;
                        }
                        if (tag === "button") {
                            ancestorInfo.buttonTagInScope = info;
                        }
                        if (tag === "nobr") {
                            ancestorInfo.nobrTagInScope = info;
                        }
                        if (tag === "p") {
                            ancestorInfo.pTagInButtonScope = info;
                        }
                        if (tag === "li") {
                            ancestorInfo.listItemTagAutoclosing = info;
                        }
                        if (tag === "dd" || tag === "dt") {
                            ancestorInfo.dlItemTagAutoclosing = info;
                        }
                        return ancestorInfo;
                    };
                    var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
                        switch(parentTag){
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                            case "select":
                                return tag === "option" || tag === "optgroup" || tag === "#text";
                            case "optgroup":
                                return tag === "option" || tag === "#text";
                            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                            // but
                            case "option":
                                return tag === "#text";
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                            // No special behavior since these rules fall back to "in body" mode for
                            // all except special table nodes which cause bad parsing behavior anyway.
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                            case "tr":
                                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                            case "tbody":
                            case "thead":
                            case "tfoot":
                                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                            case "colgroup":
                                return tag === "col" || tag === "template";
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                            case "table":
                                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                            case "head":
                                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                            case "html":
                                return tag === "head" || tag === "body" || tag === "frameset";
                            case "frameset":
                                return tag === "frame";
                            case "#document":
                                return tag === "html";
                        }
                        switch(tag){
                            case "h1":
                            case "h2":
                            case "h3":
                            case "h4":
                            case "h5":
                            case "h6":
                                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                            case "rp":
                            case "rt":
                                return impliedEndTags.indexOf(parentTag) === -1;
                            case "body":
                            case "caption":
                            case "col":
                            case "colgroup":
                            case "frameset":
                            case "frame":
                            case "head":
                            case "html":
                            case "tbody":
                            case "td":
                            case "tfoot":
                            case "th":
                            case "thead":
                            case "tr":
                                return parentTag == null;
                        }
                        return true;
                    };
                    var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
                        switch(tag){
                            case "address":
                            case "article":
                            case "aside":
                            case "blockquote":
                            case "center":
                            case "details":
                            case "dialog":
                            case "dir":
                            case "div":
                            case "dl":
                            case "fieldset":
                            case "figcaption":
                            case "figure":
                            case "footer":
                            case "header":
                            case "hgroup":
                            case "main":
                            case "menu":
                            case "nav":
                            case "ol":
                            case "p":
                            case "section":
                            case "summary":
                            case "ul":
                            case "pre":
                            case "listing":
                            case "table":
                            case "hr":
                            case "xmp":
                            case "h1":
                            case "h2":
                            case "h3":
                            case "h4":
                            case "h5":
                            case "h6":
                                return ancestorInfo.pTagInButtonScope;
                            case "form":
                                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                            case "li":
                                return ancestorInfo.listItemTagAutoclosing;
                            case "dd":
                            case "dt":
                                return ancestorInfo.dlItemTagAutoclosing;
                            case "button":
                                return ancestorInfo.buttonTagInScope;
                            case "a":
                                return ancestorInfo.aTagInScope;
                            case "nobr":
                                return ancestorInfo.nobrTagInScope;
                        }
                        return null;
                    };
                    var didWarn$1 = {};
                    validateDOMNesting = function validateDOMNesting(childTag, childText, ancestorInfo) {
                        ancestorInfo = ancestorInfo || emptyAncestorInfo;
                        var parentInfo = ancestorInfo.current;
                        var parentTag = parentInfo && parentInfo.tag;
                        if (childText != null) {
                            if (childTag != null) {
                                error("validateDOMNesting: when childText is passed, childTag should be null");
                            }
                            childTag = "#text";
                        }
                        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                        var invalidParentOrAncestor = invalidParent || invalidAncestor;
                        if (!invalidParentOrAncestor) {
                            return;
                        }
                        var ancestorTag = invalidParentOrAncestor.tag;
                        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
                        if (didWarn$1[warnKey]) {
                            return;
                        }
                        didWarn$1[warnKey] = true;
                        var tagDisplayName = childTag;
                        var whitespaceInfo = "";
                        if (childTag === "#text") {
                            if (/\S/.test(childText)) {
                                tagDisplayName = "Text nodes";
                            } else {
                                tagDisplayName = "Whitespace text nodes";
                                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                            }
                        } else {
                            tagDisplayName = "<" + childTag + ">";
                        }
                        if (invalidParent) {
                            var info = "";
                            if (ancestorTag === "table" && childTag === "tr") {
                                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                            }
                            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
                        } else {
                            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
                        }
                    };
                }
                var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
                var SUSPENSE_START_DATA = "$";
                var SUSPENSE_END_DATA = "/$";
                var SUSPENSE_PENDING_START_DATA = "$?";
                var SUSPENSE_FALLBACK_START_DATA = "$!";
                var STYLE$1 = "style";
                var eventsEnabled = null;
                var selectionInformation = null;
                function getRootHostContext(rootContainerInstance) {
                    var type;
                    var namespace;
                    var nodeType = rootContainerInstance.nodeType;
                    switch(nodeType){
                        case DOCUMENT_NODE:
                        case DOCUMENT_FRAGMENT_NODE:
                            {
                                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                                var root2 = rootContainerInstance.documentElement;
                                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                                break;
                            }
                        default:
                            {
                                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                                var ownNamespace = container.namespaceURI || null;
                                type = container.tagName;
                                namespace = getChildNamespace(ownNamespace, type);
                                break;
                            }
                    }
                    {
                        var validatedTag = type.toLowerCase();
                        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
                        return {
                            namespace: namespace,
                            ancestorInfo: ancestorInfo
                        };
                    }
                }
                function getChildHostContext(parentHostContext, type, rootContainerInstance) {
                    {
                        var parentHostContextDev = parentHostContext;
                        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
                        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                        return {
                            namespace: namespace,
                            ancestorInfo: ancestorInfo
                        };
                    }
                }
                function getPublicInstance(instance) {
                    return instance;
                }
                function prepareForCommit(containerInfo) {
                    eventsEnabled = isEnabled();
                    selectionInformation = getSelectionInformation();
                    var activeInstance = null;
                    setEnabled(false);
                    return activeInstance;
                }
                function resetAfterCommit(containerInfo) {
                    restoreSelection(selectionInformation);
                    setEnabled(eventsEnabled);
                    eventsEnabled = null;
                    selectionInformation = null;
                }
                function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
                        if (typeof props.children === "string" || typeof props.children === "number") {
                            var string = "" + props.children;
                            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                            validateDOMNesting(null, string, ownAncestorInfo);
                        }
                        parentNamespace = hostContextDev.namespace;
                    }
                    var domElement = createElement16(type, props, rootContainerInstance, parentNamespace);
                    precacheFiberNode(internalInstanceHandle, domElement);
                    updateFiberProps(domElement, props);
                    return domElement;
                }
                function appendInitialChild(parentInstance, child) {
                    parentInstance.appendChild(child);
                }
                function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
                    setInitialProperties(domElement, type, props, rootContainerInstance);
                    switch(type){
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                            return !!props.autoFocus;
                        case "img":
                            return true;
                        default:
                            return false;
                    }
                }
                function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
                    {
                        var hostContextDev = hostContext;
                        if (_type_of(newProps.children) !== _type_of(oldProps.children) && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                            var string = "" + newProps.children;
                            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                            validateDOMNesting(null, string, ownAncestorInfo);
                        }
                    }
                    return diffProperties(domElement, type, oldProps, newProps);
                }
                function shouldSetTextContent(type, props) {
                    return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || _type_of(props.dangerouslySetInnerHTML) === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
                }
                function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
                    {
                        var hostContextDev = hostContext;
                        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
                    }
                    var textNode = createTextNode(text, rootContainerInstance);
                    precacheFiberNode(internalInstanceHandle, textNode);
                    return textNode;
                }
                function getCurrentEventPriority() {
                    var currentEvent = window.event;
                    if (currentEvent === void 0) {
                        return DefaultEventPriority;
                    }
                    return getEventPriority(currentEvent.type);
                }
                var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
                var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
                var noTimeout = -1;
                var localPromise = typeof Promise === "function" ? Promise : void 0;
                var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function scheduleMicrotask(callback) {
                    return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
                } : scheduleTimeout;
                function handleErrorInNextTick(error2) {
                    setTimeout(function() {
                        throw error2;
                    });
                }
                function commitMount(domElement, type, newProps, internalInstanceHandle) {
                    switch(type){
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                            if (newProps.autoFocus) {
                                domElement.focus();
                            }
                            return;
                        case "img":
                            {
                                if (newProps.src) {
                                    domElement.src = newProps.src;
                                }
                                return;
                            }
                    }
                }
                function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                    updateProperties(domElement, updatePayload, type, oldProps, newProps);
                    updateFiberProps(domElement, newProps);
                }
                function resetTextContent(domElement) {
                    setTextContent(domElement, "");
                }
                function commitTextUpdate(textInstance, oldText, newText) {
                    textInstance.nodeValue = newText;
                }
                function appendChild(parentInstance, child) {
                    parentInstance.appendChild(child);
                }
                function appendChildToContainer(container, child) {
                    var parentNode;
                    if (container.nodeType === COMMENT_NODE) {
                        parentNode = container.parentNode;
                        parentNode.insertBefore(child, container);
                    } else {
                        parentNode = container;
                        parentNode.appendChild(child);
                    }
                    var reactRootContainer = container._reactRootContainer;
                    if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
                        trapClickOnNonInteractiveElement(parentNode);
                    }
                }
                function insertBefore(parentInstance, child, beforeChild) {
                    parentInstance.insertBefore(child, beforeChild);
                }
                function insertInContainerBefore(container, child, beforeChild) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, beforeChild);
                    } else {
                        container.insertBefore(child, beforeChild);
                    }
                }
                function removeChild(parentInstance, child) {
                    parentInstance.removeChild(child);
                }
                function removeChildFromContainer(container, child) {
                    if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.removeChild(child);
                    } else {
                        container.removeChild(child);
                    }
                }
                function clearSuspenseBoundary(parentInstance, suspenseInstance) {
                    var node2 = suspenseInstance;
                    var depth = 0;
                    do {
                        var nextNode = node2.nextSibling;
                        parentInstance.removeChild(node2);
                        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                            var data = nextNode.data;
                            if (data === SUSPENSE_END_DATA) {
                                if (depth === 0) {
                                    parentInstance.removeChild(nextNode);
                                    retryIfBlockedOn(suspenseInstance);
                                    return;
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                                depth++;
                            }
                        }
                        node2 = nextNode;
                    }while (node2);
                    retryIfBlockedOn(suspenseInstance);
                }
                function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
                    if (container.nodeType === COMMENT_NODE) {
                        clearSuspenseBoundary(container.parentNode, suspenseInstance);
                    } else if (container.nodeType === ELEMENT_NODE) {
                        clearSuspenseBoundary(container, suspenseInstance);
                    }
                    retryIfBlockedOn(container);
                }
                function hideInstance(instance) {
                    instance = instance;
                    var style3 = instance.style;
                    if (typeof style3.setProperty === "function") {
                        style3.setProperty("display", "none", "important");
                    } else {
                        style3.display = "none";
                    }
                }
                function hideTextInstance(textInstance) {
                    textInstance.nodeValue = "";
                }
                function unhideInstance(instance, props) {
                    instance = instance;
                    var styleProp = props[STYLE$1];
                    var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                    instance.style.display = dangerousStyleValue("display", display);
                }
                function unhideTextInstance(textInstance, text) {
                    textInstance.nodeValue = text;
                }
                function clearContainer(container) {
                    if (container.nodeType === ELEMENT_NODE) {
                        container.textContent = "";
                    } else if (container.nodeType === DOCUMENT_NODE) {
                        if (container.documentElement) {
                            container.removeChild(container.documentElement);
                        }
                    }
                }
                function canHydrateInstance(instance, type, props) {
                    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                        return null;
                    }
                    return instance;
                }
                function canHydrateTextInstance(instance, text) {
                    if (text === "" || instance.nodeType !== TEXT_NODE) {
                        return null;
                    }
                    return instance;
                }
                function canHydrateSuspenseInstance(instance) {
                    if (instance.nodeType !== COMMENT_NODE) {
                        return null;
                    }
                    return instance;
                }
                function isSuspenseInstancePending(instance) {
                    return instance.data === SUSPENSE_PENDING_START_DATA;
                }
                function isSuspenseInstanceFallback(instance) {
                    return instance.data === SUSPENSE_FALLBACK_START_DATA;
                }
                function getSuspenseInstanceFallbackErrorDetails(instance) {
                    var dataset = instance.nextSibling && instance.nextSibling.dataset;
                    var digest, message, stack;
                    if (dataset) {
                        digest = dataset.dgst;
                        {
                            message = dataset.msg;
                            stack = dataset.stck;
                        }
                    }
                    {
                        return {
                            message: message,
                            digest: digest,
                            stack: stack
                        };
                    }
                }
                function registerSuspenseInstanceRetry(instance, callback) {
                    instance._reactRetry = callback;
                }
                function getNextHydratable(node2) {
                    for(; node2 != null; node2 = node2.nextSibling){
                        var nodeType = node2.nodeType;
                        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                            break;
                        }
                        if (nodeType === COMMENT_NODE) {
                            var nodeData = node2.data;
                            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                                break;
                            }
                            if (nodeData === SUSPENSE_END_DATA) {
                                return null;
                            }
                        }
                    }
                    return node2;
                }
                function getNextHydratableSibling(instance) {
                    return getNextHydratable(instance.nextSibling);
                }
                function getFirstHydratableChild(parentInstance) {
                    return getNextHydratable(parentInstance.firstChild);
                }
                function getFirstHydratableChildWithinContainer(parentContainer) {
                    return getNextHydratable(parentContainer.firstChild);
                }
                function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
                    return getNextHydratable(parentInstance.nextSibling);
                }
                function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
                    precacheFiberNode(internalInstanceHandle, instance);
                    updateFiberProps(instance, props);
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        parentNamespace = hostContextDev.namespace;
                    }
                    var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
                    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
                }
                function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
                    precacheFiberNode(internalInstanceHandle, textInstance);
                    var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
                    return diffHydratedText(textInstance, text);
                }
                function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
                    precacheFiberNode(internalInstanceHandle, suspenseInstance);
                }
                function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
                    var node2 = suspenseInstance.nextSibling;
                    var depth = 0;
                    while(node2){
                        if (node2.nodeType === COMMENT_NODE) {
                            var data = node2.data;
                            if (data === SUSPENSE_END_DATA) {
                                if (depth === 0) {
                                    return getNextHydratableSibling(node2);
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                depth++;
                            }
                        }
                        node2 = node2.nextSibling;
                    }
                    return null;
                }
                function getParentSuspenseInstance(targetInstance) {
                    var node2 = targetInstance.previousSibling;
                    var depth = 0;
                    while(node2){
                        if (node2.nodeType === COMMENT_NODE) {
                            var data = node2.data;
                            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                if (depth === 0) {
                                    return node2;
                                } else {
                                    depth--;
                                }
                            } else if (data === SUSPENSE_END_DATA) {
                                depth++;
                            }
                        }
                        node2 = node2.previousSibling;
                    }
                    return null;
                }
                function commitHydratedContainer(container) {
                    retryIfBlockedOn(container);
                }
                function commitHydratedSuspenseInstance(suspenseInstance) {
                    retryIfBlockedOn(suspenseInstance);
                }
                function shouldDeleteUnhydratedTailInstances(parentType) {
                    return parentType !== "head" && parentType !== "body";
                }
                function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
                    var shouldWarnDev = true;
                    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
                }
                function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
                    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                        var shouldWarnDev = true;
                        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
                    }
                }
                function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
                    {
                        if (instance.nodeType === ELEMENT_NODE) {
                            warnForDeletedHydratableElement(parentContainer, instance);
                        } else if (instance.nodeType === COMMENT_NODE) ;
                        else {
                            warnForDeletedHydratableText(parentContainer, instance);
                        }
                    }
                }
                function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) {
                            if (instance.nodeType === ELEMENT_NODE) {
                                warnForDeletedHydratableElement(parentNode, instance);
                            } else if (instance.nodeType === COMMENT_NODE) ;
                            else {
                                warnForDeletedHydratableText(parentNode, instance);
                            }
                        }
                    }
                }
                function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            if (instance.nodeType === ELEMENT_NODE) {
                                warnForDeletedHydratableElement(parentInstance, instance);
                            } else if (instance.nodeType === COMMENT_NODE) ;
                            else {
                                warnForDeletedHydratableText(parentInstance, instance);
                            }
                        }
                    }
                }
                function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
                    {
                        warnForInsertedHydratedElement(parentContainer, type);
                    }
                }
                function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
                    {
                        warnForInsertedHydratedText(parentContainer, text);
                    }
                }
                function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
                    }
                }
                function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
                    {
                        var parentNode = parentInstance.parentNode;
                        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
                    }
                }
                function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            warnForInsertedHydratedElement(parentInstance, type);
                        }
                    }
                }
                function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
                    {
                        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                            warnForInsertedHydratedText(parentInstance, text);
                        }
                    }
                }
                function errorHydratingContainer(parentContainer) {
                    {
                        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
                    }
                }
                function preparePortalMount(portalInstance) {
                    listenToAllSupportedEvents(portalInstance);
                }
                var randomKey = Math.random().toString(36).slice(2);
                var internalInstanceKey = "__reactFiber$" + randomKey;
                var internalPropsKey = "__reactProps$" + randomKey;
                var internalContainerInstanceKey = "__reactContainer$" + randomKey;
                var internalEventHandlersKey = "__reactEvents$" + randomKey;
                var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
                var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
                function detachDeletedInstance(node2) {
                    delete node2[internalInstanceKey];
                    delete node2[internalPropsKey];
                    delete node2[internalEventHandlersKey];
                    delete node2[internalEventHandlerListenersKey];
                    delete node2[internalEventHandlesSetKey];
                }
                function precacheFiberNode(hostInst, node2) {
                    node2[internalInstanceKey] = hostInst;
                }
                function markContainerAsRoot(hostRoot, node2) {
                    node2[internalContainerInstanceKey] = hostRoot;
                }
                function unmarkContainerAsRoot(node2) {
                    node2[internalContainerInstanceKey] = null;
                }
                function isContainerMarkedAsRoot(node2) {
                    return !!node2[internalContainerInstanceKey];
                }
                function getClosestInstanceFromNode(targetNode) {
                    var targetInst = targetNode[internalInstanceKey];
                    if (targetInst) {
                        return targetInst;
                    }
                    var parentNode = targetNode.parentNode;
                    while(parentNode){
                        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
                        if (targetInst) {
                            var alternate = targetInst.alternate;
                            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                                var suspenseInstance = getParentSuspenseInstance(targetNode);
                                while(suspenseInstance !== null){
                                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                                    if (targetSuspenseInst) {
                                        return targetSuspenseInst;
                                    }
                                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                                }
                            }
                            return targetInst;
                        }
                        targetNode = parentNode;
                        parentNode = targetNode.parentNode;
                    }
                    return null;
                }
                function getInstanceFromNode(node2) {
                    var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
                    if (inst) {
                        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                            return inst;
                        } else {
                            return null;
                        }
                    }
                    return null;
                }
                function getNodeFromInstance(inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                        return inst.stateNode;
                    }
                    throw new Error("getNodeFromInstance: Invalid argument.");
                }
                function getFiberCurrentPropsFromNode(node2) {
                    return node2[internalPropsKey] || null;
                }
                function updateFiberProps(node2, props) {
                    node2[internalPropsKey] = props;
                }
                function getEventListenerSet(node2) {
                    var elementListenerSet = node2[internalEventHandlersKey];
                    if (elementListenerSet === void 0) {
                        elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
                    }
                    return elementListenerSet;
                }
                var loggedTypeFailures = {};
                var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
                function setCurrentlyValidatingElement(element) {
                    {
                        if (element) {
                            var owner = element._owner;
                            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                        } else {
                            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                        }
                    }
                }
                function checkPropTypes(typeSpecs, values, location, componentName, element) {
                    {
                        var has2 = Function.call.bind(hasOwnProperty);
                        for(var typeSpecName in typeSpecs){
                            if (has2(typeSpecs, typeSpecName)) {
                                var error$1 = void 0;
                                try {
                                    if (typeof typeSpecs[typeSpecName] !== "function") {
                                        var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + _type_of(typeSpecs[typeSpecName]) + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                        err.name = "Invariant Violation";
                                        throw err;
                                    }
                                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                                } catch (ex) {
                                    error$1 = ex;
                                }
                                if (error$1 && !_instanceof(error$1, Error)) {
                                    setCurrentlyValidatingElement(element);
                                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1 === "undefined" ? "undefined" : _type_of(error$1));
                                    setCurrentlyValidatingElement(null);
                                }
                                if (_instanceof(error$1, Error) && !(error$1.message in loggedTypeFailures)) {
                                    loggedTypeFailures[error$1.message] = true;
                                    setCurrentlyValidatingElement(element);
                                    error("Failed %s type: %s", location, error$1.message);
                                    setCurrentlyValidatingElement(null);
                                }
                            }
                        }
                    }
                }
                var valueStack = [];
                var fiberStack;
                {
                    fiberStack = [];
                }
                var index = -1;
                function createCursor(defaultValue) {
                    return {
                        current: defaultValue
                    };
                }
                function pop(cursor, fiber) {
                    if (index < 0) {
                        {
                            error("Unexpected pop.");
                        }
                        return;
                    }
                    {
                        if (fiber !== fiberStack[index]) {
                            error("Unexpected Fiber popped.");
                        }
                    }
                    cursor.current = valueStack[index];
                    valueStack[index] = null;
                    {
                        fiberStack[index] = null;
                    }
                    index--;
                }
                function push(cursor, value, fiber) {
                    index++;
                    valueStack[index] = cursor.current;
                    {
                        fiberStack[index] = fiber;
                    }
                    cursor.current = value;
                }
                var warnedAboutMissingGetChildContext;
                {
                    warnedAboutMissingGetChildContext = {};
                }
                var emptyContextObject = {};
                {
                    Object.freeze(emptyContextObject);
                }
                var contextStackCursor = createCursor(emptyContextObject);
                var didPerformWorkStackCursor = createCursor(false);
                var previousContext = emptyContextObject;
                function getUnmaskedContext(workInProgress2, Component3, didPushOwnContextIfProvider) {
                    {
                        if (didPushOwnContextIfProvider && isContextProvider(Component3)) {
                            return previousContext;
                        }
                        return contextStackCursor.current;
                    }
                }
                function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
                    {
                        var instance = workInProgress2.stateNode;
                        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                    }
                }
                function getMaskedContext(workInProgress2, unmaskedContext) {
                    {
                        var type = workInProgress2.type;
                        var contextTypes = type.contextTypes;
                        if (!contextTypes) {
                            return emptyContextObject;
                        }
                        var instance = workInProgress2.stateNode;
                        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                            return instance.__reactInternalMemoizedMaskedChildContext;
                        }
                        var context = {};
                        for(var key in contextTypes){
                            context[key] = unmaskedContext[key];
                        }
                        {
                            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                            checkPropTypes(contextTypes, context, "context", name);
                        }
                        if (instance) {
                            cacheContext(workInProgress2, unmaskedContext, context);
                        }
                        return context;
                    }
                }
                function hasContextChanged() {
                    {
                        return didPerformWorkStackCursor.current;
                    }
                }
                function isContextProvider(type) {
                    {
                        var childContextTypes = type.childContextTypes;
                        return childContextTypes !== null && childContextTypes !== void 0;
                    }
                }
                function popContext(fiber) {
                    {
                        pop(didPerformWorkStackCursor, fiber);
                        pop(contextStackCursor, fiber);
                    }
                }
                function popTopLevelContextObject(fiber) {
                    {
                        pop(didPerformWorkStackCursor, fiber);
                        pop(contextStackCursor, fiber);
                    }
                }
                function pushTopLevelContextObject(fiber, context, didChange) {
                    {
                        if (contextStackCursor.current !== emptyContextObject) {
                            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        push(contextStackCursor, context, fiber);
                        push(didPerformWorkStackCursor, didChange, fiber);
                    }
                }
                function processChildContext(fiber, type, parentContext) {
                    {
                        var instance = fiber.stateNode;
                        var childContextTypes = type.childContextTypes;
                        if (typeof instance.getChildContext !== "function") {
                            {
                                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                                if (!warnedAboutMissingGetChildContext[componentName]) {
                                    warnedAboutMissingGetChildContext[componentName] = true;
                                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                                }
                            }
                            return parentContext;
                        }
                        var childContext = instance.getChildContext();
                        for(var contextKey in childContext){
                            if (!(contextKey in childContextTypes)) {
                                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                            }
                        }
                        {
                            var name = getComponentNameFromFiber(fiber) || "Unknown";
                            checkPropTypes(childContextTypes, childContext, "child context", name);
                        }
                        return assign2({}, parentContext, childContext);
                    }
                }
                function pushContextProvider(workInProgress2) {
                    {
                        var instance = workInProgress2.stateNode;
                        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
                        previousContext = contextStackCursor.current;
                        push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
                        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
                        return true;
                    }
                }
                function invalidateContextProvider(workInProgress2, type, didChange) {
                    {
                        var instance = workInProgress2.stateNode;
                        if (!instance) {
                            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        if (didChange) {
                            var mergedContext = processChildContext(workInProgress2, type, previousContext);
                            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                            pop(didPerformWorkStackCursor, workInProgress2);
                            pop(contextStackCursor, workInProgress2);
                            push(contextStackCursor, mergedContext, workInProgress2);
                            push(didPerformWorkStackCursor, didChange, workInProgress2);
                        } else {
                            pop(didPerformWorkStackCursor, workInProgress2);
                            push(didPerformWorkStackCursor, didChange, workInProgress2);
                        }
                    }
                }
                function findCurrentUnmaskedContext(fiber) {
                    {
                        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        var node2 = fiber;
                        do {
                            switch(node2.tag){
                                case HostRoot:
                                    return node2.stateNode.context;
                                case ClassComponent:
                                    {
                                        var Component3 = node2.type;
                                        if (isContextProvider(Component3)) {
                                            return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                                        }
                                        break;
                                    }
                            }
                            node2 = node2.return;
                        }while (node2 !== null);
                        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                var LegacyRoot = 0;
                var ConcurrentRoot = 1;
                var syncQueue = null;
                var includesLegacySyncCallbacks = false;
                var isFlushingSyncQueue = false;
                function scheduleSyncCallback(callback) {
                    if (syncQueue === null) {
                        syncQueue = [
                            callback
                        ];
                    } else {
                        syncQueue.push(callback);
                    }
                }
                function scheduleLegacySyncCallback(callback) {
                    includesLegacySyncCallbacks = true;
                    scheduleSyncCallback(callback);
                }
                function flushSyncCallbacksOnlyInLegacyMode() {
                    if (includesLegacySyncCallbacks) {
                        flushSyncCallbacks();
                    }
                }
                function flushSyncCallbacks() {
                    if (!isFlushingSyncQueue && syncQueue !== null) {
                        isFlushingSyncQueue = true;
                        var i = 0;
                        var previousUpdatePriority = getCurrentUpdatePriority();
                        try {
                            var isSync = true;
                            var queue = syncQueue;
                            setCurrentUpdatePriority(DiscreteEventPriority);
                            for(; i < queue.length; i++){
                                var callback = queue[i];
                                do {
                                    callback = callback(isSync);
                                }while (callback !== null);
                            }
                            syncQueue = null;
                            includesLegacySyncCallbacks = false;
                        } catch (error2) {
                            if (syncQueue !== null) {
                                syncQueue = syncQueue.slice(i + 1);
                            }
                            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                            throw error2;
                        } finally{
                            setCurrentUpdatePriority(previousUpdatePriority);
                            isFlushingSyncQueue = false;
                        }
                    }
                    return null;
                }
                var forkStack = [];
                var forkStackIndex = 0;
                var treeForkProvider = null;
                var treeForkCount = 0;
                var idStack = [];
                var idStackIndex = 0;
                var treeContextProvider = null;
                var treeContextId = 1;
                var treeContextOverflow = "";
                function isForkedChild(workInProgress2) {
                    warnIfNotHydrating();
                    return (workInProgress2.flags & Forked) !== NoFlags;
                }
                function getForksAtLevel(workInProgress2) {
                    warnIfNotHydrating();
                    return treeForkCount;
                }
                function getTreeId() {
                    var overflow = treeContextOverflow;
                    var idWithLeadingBit = treeContextId;
                    var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
                    return id.toString(32) + overflow;
                }
                function pushTreeFork(workInProgress2, totalChildren) {
                    warnIfNotHydrating();
                    forkStack[forkStackIndex++] = treeForkCount;
                    forkStack[forkStackIndex++] = treeForkProvider;
                    treeForkProvider = workInProgress2;
                    treeForkCount = totalChildren;
                }
                function pushTreeId(workInProgress2, totalChildren, index2) {
                    warnIfNotHydrating();
                    idStack[idStackIndex++] = treeContextId;
                    idStack[idStackIndex++] = treeContextOverflow;
                    idStack[idStackIndex++] = treeContextProvider;
                    treeContextProvider = workInProgress2;
                    var baseIdWithLeadingBit = treeContextId;
                    var baseOverflow = treeContextOverflow;
                    var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
                    var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
                    var slot = index2 + 1;
                    var length2 = getBitLength(totalChildren) + baseLength;
                    if (length2 > 30) {
                        var numberOfOverflowBits = baseLength - baseLength % 5;
                        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
                        var newOverflow = (baseId & newOverflowBits).toString(32);
                        var restOfBaseId = baseId >> numberOfOverflowBits;
                        var restOfBaseLength = baseLength - numberOfOverflowBits;
                        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
                        var restOfNewBits = slot << restOfBaseLength;
                        var id = restOfNewBits | restOfBaseId;
                        var overflow = newOverflow + baseOverflow;
                        treeContextId = 1 << restOfLength | id;
                        treeContextOverflow = overflow;
                    } else {
                        var newBits = slot << baseLength;
                        var _id = newBits | baseId;
                        var _overflow = baseOverflow;
                        treeContextId = 1 << length2 | _id;
                        treeContextOverflow = _overflow;
                    }
                }
                function pushMaterializedTreeId(workInProgress2) {
                    warnIfNotHydrating();
                    var returnFiber = workInProgress2.return;
                    if (returnFiber !== null) {
                        var numberOfForks = 1;
                        var slotIndex = 0;
                        pushTreeFork(workInProgress2, numberOfForks);
                        pushTreeId(workInProgress2, numberOfForks, slotIndex);
                    }
                }
                function getBitLength(number) {
                    return 32 - clz32(number);
                }
                function getLeadingBit(id) {
                    return 1 << getBitLength(id) - 1;
                }
                function popTreeContext(workInProgress2) {
                    while(workInProgress2 === treeForkProvider){
                        treeForkProvider = forkStack[--forkStackIndex];
                        forkStack[forkStackIndex] = null;
                        treeForkCount = forkStack[--forkStackIndex];
                        forkStack[forkStackIndex] = null;
                    }
                    while(workInProgress2 === treeContextProvider){
                        treeContextProvider = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                        treeContextOverflow = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                        treeContextId = idStack[--idStackIndex];
                        idStack[idStackIndex] = null;
                    }
                }
                function getSuspendedTreeContext() {
                    warnIfNotHydrating();
                    if (treeContextProvider !== null) {
                        return {
                            id: treeContextId,
                            overflow: treeContextOverflow
                        };
                    } else {
                        return null;
                    }
                }
                function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
                    warnIfNotHydrating();
                    idStack[idStackIndex++] = treeContextId;
                    idStack[idStackIndex++] = treeContextOverflow;
                    idStack[idStackIndex++] = treeContextProvider;
                    treeContextId = suspendedContext.id;
                    treeContextOverflow = suspendedContext.overflow;
                    treeContextProvider = workInProgress2;
                }
                function warnIfNotHydrating() {
                    {
                        if (!getIsHydrating()) {
                            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
                        }
                    }
                }
                var hydrationParentFiber = null;
                var nextHydratableInstance = null;
                var isHydrating = false;
                var didSuspendOrErrorDEV = false;
                var hydrationErrors = null;
                function warnIfHydrating() {
                    {
                        if (isHydrating) {
                            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
                        }
                    }
                }
                function markDidThrowWhileHydratingDEV() {
                    {
                        didSuspendOrErrorDEV = true;
                    }
                }
                function didSuspendOrErrorWhileHydratingDEV() {
                    {
                        return didSuspendOrErrorDEV;
                    }
                }
                function enterHydrationState(fiber) {
                    var parentInstance = fiber.stateNode.containerInfo;
                    nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
                    hydrationParentFiber = fiber;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    return true;
                }
                function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
                    nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
                    hydrationParentFiber = fiber;
                    isHydrating = true;
                    hydrationErrors = null;
                    didSuspendOrErrorDEV = false;
                    if (treeContext !== null) {
                        restoreSuspendedTreeContext(fiber, treeContext);
                    }
                    return true;
                }
                function warnUnhydratedInstance(returnFiber, instance) {
                    {
                        switch(returnFiber.tag){
                            case HostRoot:
                                {
                                    didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                                    break;
                                }
                            case HostComponent:
                                {
                                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                    didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
                                    isConcurrentMode);
                                    break;
                                }
                            case SuspenseComponent:
                                {
                                    var suspenseState = returnFiber.memoizedState;
                                    if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                                    break;
                                }
                        }
                    }
                }
                function deleteHydratableInstance(returnFiber, instance) {
                    warnUnhydratedInstance(returnFiber, instance);
                    var childToDelete = createFiberFromHostInstanceForDeletion();
                    childToDelete.stateNode = instance;
                    childToDelete.return = returnFiber;
                    var deletions = returnFiber.deletions;
                    if (deletions === null) {
                        returnFiber.deletions = [
                            childToDelete
                        ];
                        returnFiber.flags |= ChildDeletion;
                    } else {
                        deletions.push(childToDelete);
                    }
                }
                function warnNonhydratedInstance(returnFiber, fiber) {
                    {
                        if (didSuspendOrErrorDEV) {
                            return;
                        }
                        switch(returnFiber.tag){
                            case HostRoot:
                                {
                                    var parentContainer = returnFiber.stateNode.containerInfo;
                                    switch(fiber.tag){
                                        case HostComponent:
                                            var type = fiber.type;
                                            var props = fiber.pendingProps;
                                            didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                                            break;
                                        case HostText:
                                            var text = fiber.pendingProps;
                                            didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                                            break;
                                    }
                                    break;
                                }
                            case HostComponent:
                                {
                                    var parentType = returnFiber.type;
                                    var parentProps = returnFiber.memoizedProps;
                                    var parentInstance = returnFiber.stateNode;
                                    switch(fiber.tag){
                                        case HostComponent:
                                            {
                                                var _type = fiber.type;
                                                var _props = fiber.pendingProps;
                                                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
                                                isConcurrentMode);
                                                break;
                                            }
                                        case HostText:
                                            {
                                                var _text = fiber.pendingProps;
                                                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
                                                _isConcurrentMode);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case SuspenseComponent:
                                {
                                    var suspenseState = returnFiber.memoizedState;
                                    var _parentInstance = suspenseState.dehydrated;
                                    if (_parentInstance !== null) switch(fiber.tag){
                                        case HostComponent:
                                            var _type2 = fiber.type;
                                            var _props2 = fiber.pendingProps;
                                            didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                                            break;
                                        case HostText:
                                            var _text2 = fiber.pendingProps;
                                            didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                                            break;
                                    }
                                    break;
                                }
                            default:
                                return;
                        }
                    }
                }
                function insertNonHydratedInstance(returnFiber, fiber) {
                    fiber.flags = fiber.flags & ~Hydrating | Placement;
                    warnNonhydratedInstance(returnFiber, fiber);
                }
                function tryHydrate(fiber, nextInstance) {
                    switch(fiber.tag){
                        case HostComponent:
                            {
                                var type = fiber.type;
                                var props = fiber.pendingProps;
                                var instance = canHydrateInstance(nextInstance, type);
                                if (instance !== null) {
                                    fiber.stateNode = instance;
                                    hydrationParentFiber = fiber;
                                    nextHydratableInstance = getFirstHydratableChild(instance);
                                    return true;
                                }
                                return false;
                            }
                        case HostText:
                            {
                                var text = fiber.pendingProps;
                                var textInstance = canHydrateTextInstance(nextInstance, text);
                                if (textInstance !== null) {
                                    fiber.stateNode = textInstance;
                                    hydrationParentFiber = fiber;
                                    nextHydratableInstance = null;
                                    return true;
                                }
                                return false;
                            }
                        case SuspenseComponent:
                            {
                                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                                if (suspenseInstance !== null) {
                                    var suspenseState = {
                                        dehydrated: suspenseInstance,
                                        treeContext: getSuspendedTreeContext(),
                                        retryLane: OffscreenLane
                                    };
                                    fiber.memoizedState = suspenseState;
                                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                                    dehydratedFragment.return = fiber;
                                    fiber.child = dehydratedFragment;
                                    hydrationParentFiber = fiber;
                                    nextHydratableInstance = null;
                                    return true;
                                }
                                return false;
                            }
                        default:
                            return false;
                    }
                }
                function shouldClientRenderOnMismatch(fiber) {
                    return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
                }
                function throwOnHydrationMismatch(fiber) {
                    throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
                }
                function tryToClaimNextHydratableInstance(fiber) {
                    if (!isHydrating) {
                        return;
                    }
                    var nextInstance = nextHydratableInstance;
                    if (!nextInstance) {
                        if (shouldClientRenderOnMismatch(fiber)) {
                            warnNonhydratedInstance(hydrationParentFiber, fiber);
                            throwOnHydrationMismatch();
                        }
                        insertNonHydratedInstance(hydrationParentFiber, fiber);
                        isHydrating = false;
                        hydrationParentFiber = fiber;
                        return;
                    }
                    var firstAttemptedInstance = nextInstance;
                    if (!tryHydrate(fiber, nextInstance)) {
                        if (shouldClientRenderOnMismatch(fiber)) {
                            warnNonhydratedInstance(hydrationParentFiber, fiber);
                            throwOnHydrationMismatch();
                        }
                        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
                        var prevHydrationParentFiber = hydrationParentFiber;
                        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                            insertNonHydratedInstance(hydrationParentFiber, fiber);
                            isHydrating = false;
                            hydrationParentFiber = fiber;
                            return;
                        }
                        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
                    }
                }
                function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
                    var instance = fiber.stateNode;
                    var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
                    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
                    fiber.updateQueue = updatePayload;
                    if (updatePayload !== null) {
                        return true;
                    }
                    return false;
                }
                function prepareToHydrateHostTextInstance(fiber) {
                    var textInstance = fiber.stateNode;
                    var textContent = fiber.memoizedProps;
                    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
                    if (shouldUpdate) {
                        var returnFiber = hydrationParentFiber;
                        if (returnFiber !== null) {
                            switch(returnFiber.tag){
                                case HostRoot:
                                    {
                                        var parentContainer = returnFiber.stateNode.containerInfo;
                                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                        didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
                                        isConcurrentMode);
                                        break;
                                    }
                                case HostComponent:
                                    {
                                        var parentType = returnFiber.type;
                                        var parentProps = returnFiber.memoizedProps;
                                        var parentInstance = returnFiber.stateNode;
                                        var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                                        didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
                                        _isConcurrentMode2);
                                        break;
                                    }
                            }
                        }
                    }
                    return shouldUpdate;
                }
                function prepareToHydrateHostSuspenseInstance(fiber) {
                    var suspenseState = fiber.memoizedState;
                    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
                    if (!suspenseInstance) {
                        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    hydrateSuspenseInstance(suspenseInstance, fiber);
                }
                function skipPastDehydratedSuspenseInstance(fiber) {
                    var suspenseState = fiber.memoizedState;
                    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
                    if (!suspenseInstance) {
                        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
                }
                function popToNextHostParent(fiber) {
                    var parent = fiber.return;
                    while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent){
                        parent = parent.return;
                    }
                    hydrationParentFiber = parent;
                }
                function popHydrationState(fiber) {
                    if (fiber !== hydrationParentFiber) {
                        return false;
                    }
                    if (!isHydrating) {
                        popToNextHostParent(fiber);
                        isHydrating = true;
                        return false;
                    }
                    if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
                        var nextInstance = nextHydratableInstance;
                        if (nextInstance) {
                            if (shouldClientRenderOnMismatch(fiber)) {
                                warnIfUnhydratedTailNodes(fiber);
                                throwOnHydrationMismatch();
                            } else {
                                while(nextInstance){
                                    deleteHydratableInstance(fiber, nextInstance);
                                    nextInstance = getNextHydratableSibling(nextInstance);
                                }
                            }
                        }
                    }
                    popToNextHostParent(fiber);
                    if (fiber.tag === SuspenseComponent) {
                        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
                    } else {
                        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                    }
                    return true;
                }
                function hasUnhydratedTailNodes() {
                    return isHydrating && nextHydratableInstance !== null;
                }
                function warnIfUnhydratedTailNodes(fiber) {
                    var nextInstance = nextHydratableInstance;
                    while(nextInstance){
                        warnUnhydratedInstance(fiber, nextInstance);
                        nextInstance = getNextHydratableSibling(nextInstance);
                    }
                }
                function resetHydrationState() {
                    hydrationParentFiber = null;
                    nextHydratableInstance = null;
                    isHydrating = false;
                    didSuspendOrErrorDEV = false;
                }
                function upgradeHydrationErrorsToRecoverable() {
                    if (hydrationErrors !== null) {
                        queueRecoverableErrors(hydrationErrors);
                        hydrationErrors = null;
                    }
                }
                function getIsHydrating() {
                    return isHydrating;
                }
                function queueHydrationError(error2) {
                    if (hydrationErrors === null) {
                        hydrationErrors = [
                            error2
                        ];
                    } else {
                        hydrationErrors.push(error2);
                    }
                }
                var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
                var NoTransition = null;
                function requestCurrentTransition() {
                    return ReactCurrentBatchConfig$1.transition;
                }
                var ReactStrictModeWarnings = {
                    recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
                    flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
                    recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
                    flushLegacyContextWarning: function flushLegacyContextWarning() {},
                    discardPendingWarnings: function discardPendingWarnings() {}
                };
                {
                    var findStrictRoot = function findStrictRoot(fiber) {
                        var maybeStrictRoot = null;
                        var node2 = fiber;
                        while(node2 !== null){
                            if (node2.mode & StrictLegacyMode) {
                                maybeStrictRoot = node2;
                            }
                            node2 = node2.return;
                        }
                        return maybeStrictRoot;
                    };
                    var setToSortedString = function setToSortedString(set3) {
                        var array = [];
                        set3.forEach(function(value) {
                            array.push(value);
                        });
                        return array.sort().join(", ");
                    };
                    var pendingComponentWillMountWarnings = [];
                    var pendingUNSAFE_ComponentWillMountWarnings = [];
                    var pendingComponentWillReceivePropsWarnings = [];
                    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    var pendingComponentWillUpdateWarnings = [];
                    var pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
                    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
                        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                            return;
                        }
                        if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
                        instance.componentWillMount.__suppressDeprecationWarning !== true) {
                            pendingComponentWillMountWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                            pendingComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                            pendingComponentWillUpdateWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
                        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingComponentWillMountWarnings.length > 0) {
                            pendingComponentWillMountWarnings.forEach(function(fiber) {
                                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingComponentWillMountWarnings = [];
                        }
                        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingUNSAFE_ComponentWillMountWarnings = [];
                        }
                        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingComponentWillReceivePropsWarnings.length > 0) {
                            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingComponentWillReceivePropsWarnings = [];
                        }
                        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                        }
                        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingComponentWillUpdateWarnings.length > 0) {
                            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingComponentWillUpdateWarnings = [];
                        }
                        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
                        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutUnsafeLifecycles.add(fiber.type);
                            });
                            pendingUNSAFE_ComponentWillUpdateWarnings = [];
                        }
                        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
                        }
                        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
                        }
                        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
                        }
                        if (componentWillMountUniqueNames.size > 0) {
                            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
                        }
                        if (componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
                        }
                        if (componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
                        }
                    };
                    var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
                    var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
                    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
                        var strictRoot = findStrictRoot(fiber);
                        if (strictRoot === null) {
                            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                            return;
                        }
                        if (didWarnAboutLegacyContext.has(fiber.type)) {
                            return;
                        }
                        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
                        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                            if (warningsForRoot === void 0) {
                                warningsForRoot = [];
                                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                            }
                            warningsForRoot.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
                        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                            if (fiberArray.length === 0) {
                                return;
                            }
                            var firstFiber = fiberArray[0];
                            var uniqueNames = /* @__PURE__ */ new Set();
                            fiberArray.forEach(function(fiber) {
                                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                                didWarnAboutLegacyContext.add(fiber.type);
                            });
                            var sortedNames = setToSortedString(uniqueNames);
                            try {
                                setCurrentFiber(firstFiber);
                                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                            } finally{
                                resetCurrentFiber();
                            }
                        });
                    };
                    ReactStrictModeWarnings.discardPendingWarnings = function() {
                        pendingComponentWillMountWarnings = [];
                        pendingUNSAFE_ComponentWillMountWarnings = [];
                        pendingComponentWillReceivePropsWarnings = [];
                        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                        pendingComponentWillUpdateWarnings = [];
                        pendingUNSAFE_ComponentWillUpdateWarnings = [];
                        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
                    };
                }
                var didWarnAboutMaps;
                var didWarnAboutGenerators;
                var didWarnAboutStringRefs;
                var ownerHasKeyUseWarning;
                var ownerHasFunctionTypeWarning;
                var warnForMissingKey = function warnForMissingKey(child, returnFiber) {};
                {
                    didWarnAboutMaps = false;
                    didWarnAboutGenerators = false;
                    didWarnAboutStringRefs = {};
                    ownerHasKeyUseWarning = {};
                    ownerHasFunctionTypeWarning = {};
                    warnForMissingKey = function warnForMissingKey(child, returnFiber) {
                        if (child === null || (typeof child === "undefined" ? "undefined" : _type_of(child)) !== "object") {
                            return;
                        }
                        if (!child._store || child._store.validated || child.key != null) {
                            return;
                        }
                        if (_type_of(child._store) !== "object") {
                            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        child._store.validated = true;
                        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                        if (ownerHasKeyUseWarning[componentName]) {
                            return;
                        }
                        ownerHasKeyUseWarning[componentName] = true;
                        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
                    };
                }
                function isReactClass(type) {
                    return type.prototype && type.prototype.isReactComponent;
                }
                function coerceRef(returnFiber, current2, element) {
                    var mixedRef = element.ref;
                    if (mixedRef !== null && typeof mixedRef !== "function" && (typeof mixedRef === "undefined" ? "undefined" : _type_of(mixedRef)) !== "object") {
                        {
                            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                            // because these cannot be automatically converted to an arrow function
                            // using a codemod. Therefore, we don't have to warn about string refs again.
                            !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                            !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                            !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                            element._owner) {
                                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                                if (!didWarnAboutStringRefs[componentName]) {
                                    {
                                        error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                                    }
                                    didWarnAboutStringRefs[componentName] = true;
                                }
                            }
                        }
                        if (element._owner) {
                            var owner = element._owner;
                            var inst;
                            if (owner) {
                                var ownerFiber = owner;
                                if (ownerFiber.tag !== ClassComponent) {
                                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                                }
                                inst = ownerFiber.stateNode;
                            }
                            if (!inst) {
                                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                            }
                            var resolvedInst = inst;
                            {
                                checkPropStringCoercion(mixedRef, "ref");
                            }
                            var stringRef = "" + mixedRef;
                            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                                return current2.ref;
                            }
                            var ref = function ref(value) {
                                var refs = resolvedInst.refs;
                                if (value === null) {
                                    delete refs[stringRef];
                                } else {
                                    refs[stringRef] = value;
                                }
                            };
                            ref._stringRef = stringRef;
                            return ref;
                        } else {
                            if (typeof mixedRef !== "string") {
                                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                            }
                            if (!element._owner) {
                                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                            }
                        }
                    }
                    return mixedRef;
                }
                function throwOnInvalidObjectType(returnFiber, newChild) {
                    var childString = Object.prototype.toString.call(newChild);
                    throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
                }
                function warnOnFunctionType(returnFiber) {
                    {
                        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                        if (ownerHasFunctionTypeWarning[componentName]) {
                            return;
                        }
                        ownerHasFunctionTypeWarning[componentName] = true;
                        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
                    }
                }
                function resolveLazy(lazyType) {
                    var payload = lazyType._payload;
                    var init = lazyType._init;
                    return init(payload);
                }
                function ChildReconciler(shouldTrackSideEffects) {
                    function deleteChild(returnFiber, childToDelete) {
                        if (!shouldTrackSideEffects) {
                            return;
                        }
                        var deletions = returnFiber.deletions;
                        if (deletions === null) {
                            returnFiber.deletions = [
                                childToDelete
                            ];
                            returnFiber.flags |= ChildDeletion;
                        } else {
                            deletions.push(childToDelete);
                        }
                    }
                    function deleteRemainingChildren(returnFiber, currentFirstChild) {
                        if (!shouldTrackSideEffects) {
                            return null;
                        }
                        var childToDelete = currentFirstChild;
                        while(childToDelete !== null){
                            deleteChild(returnFiber, childToDelete);
                            childToDelete = childToDelete.sibling;
                        }
                        return null;
                    }
                    function mapRemainingChildren(returnFiber, currentFirstChild) {
                        var existingChildren = /* @__PURE__ */ new Map();
                        var existingChild = currentFirstChild;
                        while(existingChild !== null){
                            if (existingChild.key !== null) {
                                existingChildren.set(existingChild.key, existingChild);
                            } else {
                                existingChildren.set(existingChild.index, existingChild);
                            }
                            existingChild = existingChild.sibling;
                        }
                        return existingChildren;
                    }
                    function useFiber(fiber, pendingProps) {
                        var clone = createWorkInProgress(fiber, pendingProps);
                        clone.index = 0;
                        clone.sibling = null;
                        return clone;
                    }
                    function placeChild(newFiber, lastPlacedIndex, newIndex) {
                        newFiber.index = newIndex;
                        if (!shouldTrackSideEffects) {
                            newFiber.flags |= Forked;
                            return lastPlacedIndex;
                        }
                        var current2 = newFiber.alternate;
                        if (current2 !== null) {
                            var oldIndex = current2.index;
                            if (oldIndex < lastPlacedIndex) {
                                newFiber.flags |= Placement;
                                return lastPlacedIndex;
                            } else {
                                return oldIndex;
                            }
                        } else {
                            newFiber.flags |= Placement;
                            return lastPlacedIndex;
                        }
                    }
                    function placeSingleChild(newFiber) {
                        if (shouldTrackSideEffects && newFiber.alternate === null) {
                            newFiber.flags |= Placement;
                        }
                        return newFiber;
                    }
                    function updateTextNode(returnFiber, current2, textContent, lanes) {
                        if (current2 === null || current2.tag !== HostText) {
                            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current2, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateElement(returnFiber, current2, element, lanes) {
                        var elementType = element.type;
                        if (elementType === REACT_FRAGMENT_TYPE2) {
                            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
                        }
                        if (current2 !== null) {
                            if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                            isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                            // We need to do this after the Hot Reloading check above,
                            // because hot reloading has different semantics than prod because
                            // it doesn't resuspend. So we can't let the call below suspend.
                            (typeof elementType === "undefined" ? "undefined" : _type_of(elementType)) === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                                var existing = useFiber(current2, element.props);
                                existing.ref = coerceRef(returnFiber, current2, element);
                                existing.return = returnFiber;
                                {
                                    existing._debugSource = element._source;
                                    existing._debugOwner = element._owner;
                                }
                                return existing;
                            }
                        }
                        var created = createFiberFromElement(element, returnFiber.mode, lanes);
                        created.ref = coerceRef(returnFiber, current2, element);
                        created.return = returnFiber;
                        return created;
                    }
                    function updatePortal(returnFiber, current2, portal, lanes) {
                        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current2, portal.children || []);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateFragment2(returnFiber, current2, fragment, lanes, key) {
                        if (current2 === null || current2.tag !== Fragment4) {
                            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current2, fragment);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function createChild(returnFiber, newChild, lanes) {
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                            created.return = returnFiber;
                            return created;
                        }
                        if ((typeof newChild === "undefined" ? "undefined" : _type_of(newChild)) === "object" && newChild !== null) {
                            switch(newChild.$$typeof){
                                case REACT_ELEMENT_TYPE:
                                    {
                                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                                        _created.ref = coerceRef(returnFiber, null, newChild);
                                        _created.return = returnFiber;
                                        return _created;
                                    }
                                case REACT_PORTAL_TYPE:
                                    {
                                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                                        _created2.return = returnFiber;
                                        return _created2;
                                    }
                                case REACT_LAZY_TYPE:
                                    {
                                        var payload = newChild._payload;
                                        var init = newChild._init;
                                        return createChild(returnFiber, init(payload), lanes);
                                    }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                                _created3.return = returnFiber;
                                return _created3;
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
                        var key = oldFiber !== null ? oldFiber.key : null;
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            if (key !== null) {
                                return null;
                            }
                            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
                        }
                        if ((typeof newChild === "undefined" ? "undefined" : _type_of(newChild)) === "object" && newChild !== null) {
                            switch(newChild.$$typeof){
                                case REACT_ELEMENT_TYPE:
                                    {
                                        if (newChild.key === key) {
                                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                                        } else {
                                            return null;
                                        }
                                    }
                                case REACT_PORTAL_TYPE:
                                    {
                                        if (newChild.key === key) {
                                            return updatePortal(returnFiber, oldFiber, newChild, lanes);
                                        } else {
                                            return null;
                                        }
                                    }
                                case REACT_LAZY_TYPE:
                                    {
                                        var payload = newChild._payload;
                                        var init = newChild._init;
                                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                                    }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                if (key !== null) {
                                    return null;
                                }
                                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            var matchedFiber = existingChildren.get(newIdx) || null;
                            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
                        }
                        if ((typeof newChild === "undefined" ? "undefined" : _type_of(newChild)) === "object" && newChild !== null) {
                            switch(newChild.$$typeof){
                                case REACT_ELEMENT_TYPE:
                                    {
                                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                                    }
                                case REACT_PORTAL_TYPE:
                                    {
                                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                                    }
                                case REACT_LAZY_TYPE:
                                    var payload = newChild._payload;
                                    var init = newChild._init;
                                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return null;
                    }
                    function warnOnInvalidKey(child, knownKeys, returnFiber) {
                        {
                            if ((typeof child === "undefined" ? "undefined" : _type_of(child)) !== "object" || child === null) {
                                return knownKeys;
                            }
                            switch(child.$$typeof){
                                case REACT_ELEMENT_TYPE:
                                case REACT_PORTAL_TYPE:
                                    warnForMissingKey(child, returnFiber);
                                    var key = child.key;
                                    if (typeof key !== "string") {
                                        break;
                                    }
                                    if (knownKeys === null) {
                                        knownKeys = /* @__PURE__ */ new Set();
                                        knownKeys.add(key);
                                        break;
                                    }
                                    if (!knownKeys.has(key)) {
                                        knownKeys.add(key);
                                        break;
                                    }
                                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                                    break;
                                case REACT_LAZY_TYPE:
                                    var payload = child._payload;
                                    var init = child._init;
                                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                                    break;
                            }
                        }
                        return knownKeys;
                    }
                    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
                        {
                            var knownKeys = null;
                            for(var i = 0; i < newChildren.length; i++){
                                var child = newChildren[i];
                                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                            }
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (newIdx === newChildren.length) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            if (getIsHydrating()) {
                                var numberOfForks = newIdx;
                                pushTreeFork(returnFiber, numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for(; newIdx < newChildren.length; newIdx++){
                                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                                if (_newFiber === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber;
                                } else {
                                    previousNewFiber.sibling = _newFiber;
                                }
                                previousNewFiber = _newFiber;
                            }
                            if (getIsHydrating()) {
                                var _numberOfForks = newIdx;
                                pushTreeFork(returnFiber, _numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for(; newIdx < newChildren.length; newIdx++){
                            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                            if (_newFiber2 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber2.alternate !== null) {
                                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber2;
                                } else {
                                    previousNewFiber.sibling = _newFiber2;
                                }
                                previousNewFiber = _newFiber2;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function(child2) {
                                return deleteChild(returnFiber, child2);
                            });
                        }
                        if (getIsHydrating()) {
                            var _numberOfForks2 = newIdx;
                            pushTreeFork(returnFiber, _numberOfForks2);
                        }
                        return resultingFirstChild;
                    }
                    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
                        var iteratorFn = getIteratorFn(newChildrenIterable);
                        if (typeof iteratorFn !== "function") {
                            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        {
                            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                            newChildrenIterable[Symbol.toStringTag] === "Generator") {
                                if (!didWarnAboutGenerators) {
                                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                                }
                                didWarnAboutGenerators = true;
                            }
                            if (newChildrenIterable.entries === iteratorFn) {
                                if (!didWarnAboutMaps) {
                                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                                }
                                didWarnAboutMaps = true;
                            }
                            var _newChildren = iteratorFn.call(newChildrenIterable);
                            if (_newChildren) {
                                var knownKeys = null;
                                var _step = _newChildren.next();
                                for(; !_step.done; _step = _newChildren.next()){
                                    var child = _step.value;
                                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                                }
                            }
                        }
                        var newChildren = iteratorFn.call(newChildrenIterable);
                        if (newChildren == null) {
                            throw new Error("An iterable object provided no iterator.");
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        var step = newChildren.next();
                        for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (step.done) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            if (getIsHydrating()) {
                                var numberOfForks = newIdx;
                                pushTreeFork(returnFiber, numberOfForks);
                            }
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for(; !step.done; newIdx++, step = newChildren.next()){
                                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                                if (_newFiber3 === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber3;
                                } else {
                                    previousNewFiber.sibling = _newFiber3;
                                }
                                previousNewFiber = _newFiber3;
                            }
                            if (getIsHydrating()) {
                                var _numberOfForks3 = newIdx;
                                pushTreeFork(returnFiber, _numberOfForks3);
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for(; !step.done; newIdx++, step = newChildren.next()){
                            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                            if (_newFiber4 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber4.alternate !== null) {
                                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber4;
                                } else {
                                    previousNewFiber.sibling = _newFiber4;
                                }
                                previousNewFiber = _newFiber4;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function(child2) {
                                return deleteChild(returnFiber, child2);
                            });
                        }
                        if (getIsHydrating()) {
                            var _numberOfForks4 = newIdx;
                            pushTreeFork(returnFiber, _numberOfForks4);
                        }
                        return resultingFirstChild;
                    }
                    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
                        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                            var existing = useFiber(currentFirstChild, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
                        var key = element.key;
                        var child = currentFirstChild;
                        while(child !== null){
                            if (child.key === key) {
                                var elementType = element.type;
                                if (elementType === REACT_FRAGMENT_TYPE2) {
                                    if (child.tag === Fragment4) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var existing = useFiber(child, element.props.children);
                                        existing.return = returnFiber;
                                        {
                                            existing._debugSource = element._source;
                                            existing._debugOwner = element._owner;
                                        }
                                        return existing;
                                    }
                                } else {
                                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                                    // We need to do this after the Hot Reloading check above,
                                    // because hot reloading has different semantics than prod because
                                    // it doesn't resuspend. So we can't let the call below suspend.
                                    (typeof elementType === "undefined" ? "undefined" : _type_of(elementType)) === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                                        deleteRemainingChildren(returnFiber, child.sibling);
                                        var _existing = useFiber(child, element.props);
                                        _existing.ref = coerceRef(returnFiber, child, element);
                                        _existing.return = returnFiber;
                                        {
                                            _existing._debugSource = element._source;
                                            _existing._debugOwner = element._owner;
                                        }
                                        return _existing;
                                    }
                                }
                                deleteRemainingChildren(returnFiber, child);
                                break;
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        if (element.type === REACT_FRAGMENT_TYPE2) {
                            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                            created.return = returnFiber;
                            return created;
                        } else {
                            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                            _created4.return = returnFiber;
                            return _created4;
                        }
                    }
                    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
                        var key = portal.key;
                        var child = currentFirstChild;
                        while(child !== null){
                            if (child.key === key) {
                                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, portal.children || []);
                                    existing.return = returnFiber;
                                    return existing;
                                } else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
                        var isUnkeyedTopLevelFragment = (typeof newChild === "undefined" ? "undefined" : _type_of(newChild)) === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE2 && newChild.key === null;
                        if (isUnkeyedTopLevelFragment) {
                            newChild = newChild.props.children;
                        }
                        if ((typeof newChild === "undefined" ? "undefined" : _type_of(newChild)) === "object" && newChild !== null) {
                            switch(newChild.$$typeof){
                                case REACT_ELEMENT_TYPE:
                                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                                case REACT_PORTAL_TYPE:
                                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                                case REACT_LAZY_TYPE:
                                    var payload = newChild._payload;
                                    var init = newChild._init;
                                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                            }
                            if (isArray(newChild)) {
                                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                            }
                            if (getIteratorFn(newChild)) {
                                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
                        }
                        {
                            if (typeof newChild === "function") {
                                warnOnFunctionType(returnFiber);
                            }
                        }
                        return deleteRemainingChildren(returnFiber, currentFirstChild);
                    }
                    return reconcileChildFibers2;
                }
                var reconcileChildFibers = ChildReconciler(true);
                var mountChildFibers = ChildReconciler(false);
                function cloneChildFibers(current2, workInProgress2) {
                    if (current2 !== null && workInProgress2.child !== current2.child) {
                        throw new Error("Resuming work not yet implemented.");
                    }
                    if (workInProgress2.child === null) {
                        return;
                    }
                    var currentChild = workInProgress2.child;
                    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
                    workInProgress2.child = newChild;
                    newChild.return = workInProgress2;
                    while(currentChild.sibling !== null){
                        currentChild = currentChild.sibling;
                        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                        newChild.return = workInProgress2;
                    }
                    newChild.sibling = null;
                }
                function resetChildFibers(workInProgress2, lanes) {
                    var child = workInProgress2.child;
                    while(child !== null){
                        resetWorkInProgress(child, lanes);
                        child = child.sibling;
                    }
                }
                var valueCursor = createCursor(null);
                var rendererSigil;
                {
                    rendererSigil = {};
                }
                var currentlyRenderingFiber = null;
                var lastContextDependency = null;
                var lastFullyObservedContext = null;
                var isDisallowedContextReadInDEV = false;
                function resetContextDependencies() {
                    currentlyRenderingFiber = null;
                    lastContextDependency = null;
                    lastFullyObservedContext = null;
                    {
                        isDisallowedContextReadInDEV = false;
                    }
                }
                function enterDisallowedContextReadInDEV() {
                    {
                        isDisallowedContextReadInDEV = true;
                    }
                }
                function exitDisallowedContextReadInDEV() {
                    {
                        isDisallowedContextReadInDEV = false;
                    }
                }
                function pushProvider(providerFiber, context, nextValue) {
                    {
                        push(valueCursor, context._currentValue, providerFiber);
                        context._currentValue = nextValue;
                        {
                            if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                            }
                            context._currentRenderer = rendererSigil;
                        }
                    }
                }
                function popProvider(context, providerFiber) {
                    var currentValue = valueCursor.current;
                    pop(valueCursor, providerFiber);
                    {
                        {
                            context._currentValue = currentValue;
                        }
                    }
                }
                function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
                    var node2 = parent;
                    while(node2 !== null){
                        var alternate = node2.alternate;
                        if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                            node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                            if (alternate !== null) {
                                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                            }
                        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                        }
                        if (node2 === propagationRoot) {
                            break;
                        }
                        node2 = node2.return;
                    }
                    {
                        if (node2 !== propagationRoot) {
                            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function propagateContextChange(workInProgress2, context, renderLanes2) {
                    {
                        propagateContextChange_eager(workInProgress2, context, renderLanes2);
                    }
                }
                function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
                    var fiber = workInProgress2.child;
                    if (fiber !== null) {
                        fiber.return = workInProgress2;
                    }
                    while(fiber !== null){
                        var nextFiber = void 0;
                        var list = fiber.dependencies;
                        if (list !== null) {
                            nextFiber = fiber.child;
                            var dependency = list.firstContext;
                            while(dependency !== null){
                                if (dependency.context === context) {
                                    if (fiber.tag === ClassComponent) {
                                        var lane = pickArbitraryLane(renderLanes2);
                                        var update = createUpdate(NoTimestamp, lane);
                                        update.tag = ForceUpdate;
                                        var updateQueue = fiber.updateQueue;
                                        if (updateQueue === null) ;
                                        else {
                                            var sharedQueue = updateQueue.shared;
                                            var pending = sharedQueue.pending;
                                            if (pending === null) {
                                                update.next = update;
                                            } else {
                                                update.next = pending.next;
                                                pending.next = update;
                                            }
                                            sharedQueue.pending = update;
                                        }
                                    }
                                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                                    var alternate = fiber.alternate;
                                    if (alternate !== null) {
                                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                                    }
                                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                                    break;
                                }
                                dependency = dependency.next;
                            }
                        } else if (fiber.tag === ContextProvider) {
                            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
                        } else if (fiber.tag === DehydratedFragment) {
                            var parentSuspense = fiber.return;
                            if (parentSuspense === null) {
                                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                            }
                            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                            var _alternate = parentSuspense.alternate;
                            if (_alternate !== null) {
                                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                            }
                            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                            nextFiber = fiber.sibling;
                        } else {
                            nextFiber = fiber.child;
                        }
                        if (nextFiber !== null) {
                            nextFiber.return = fiber;
                        } else {
                            nextFiber = fiber;
                            while(nextFiber !== null){
                                if (nextFiber === workInProgress2) {
                                    nextFiber = null;
                                    break;
                                }
                                var sibling = nextFiber.sibling;
                                if (sibling !== null) {
                                    sibling.return = nextFiber.return;
                                    nextFiber = sibling;
                                    break;
                                }
                                nextFiber = nextFiber.return;
                            }
                        }
                        fiber = nextFiber;
                    }
                }
                function prepareToReadContext(workInProgress2, renderLanes2) {
                    currentlyRenderingFiber = workInProgress2;
                    lastContextDependency = null;
                    lastFullyObservedContext = null;
                    var dependencies = workInProgress2.dependencies;
                    if (dependencies !== null) {
                        {
                            var firstContext = dependencies.firstContext;
                            if (firstContext !== null) {
                                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                                    markWorkInProgressReceivedUpdate();
                                }
                                dependencies.firstContext = null;
                            }
                        }
                    }
                }
                function readContext(context) {
                    {
                        if (isDisallowedContextReadInDEV) {
                            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                        }
                    }
                    var value = context._currentValue;
                    if (lastFullyObservedContext === context) ;
                    else {
                        var contextItem = {
                            context: context,
                            memoizedValue: value,
                            next: null
                        };
                        if (lastContextDependency === null) {
                            if (currentlyRenderingFiber === null) {
                                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                            }
                            lastContextDependency = contextItem;
                            currentlyRenderingFiber.dependencies = {
                                lanes: NoLanes,
                                firstContext: contextItem
                            };
                        } else {
                            lastContextDependency = lastContextDependency.next = contextItem;
                        }
                    }
                    return value;
                }
                var concurrentQueues = null;
                function pushConcurrentUpdateQueue(queue) {
                    if (concurrentQueues === null) {
                        concurrentQueues = [
                            queue
                        ];
                    } else {
                        concurrentQueues.push(queue);
                    }
                }
                function finishQueueingConcurrentUpdates() {
                    if (concurrentQueues !== null) {
                        for(var i = 0; i < concurrentQueues.length; i++){
                            var queue = concurrentQueues[i];
                            var lastInterleavedUpdate = queue.interleaved;
                            if (lastInterleavedUpdate !== null) {
                                queue.interleaved = null;
                                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                                var lastPendingUpdate = queue.pending;
                                if (lastPendingUpdate !== null) {
                                    var firstPendingUpdate = lastPendingUpdate.next;
                                    lastPendingUpdate.next = firstInterleavedUpdate;
                                    lastInterleavedUpdate.next = firstPendingUpdate;
                                }
                                queue.pending = lastInterleavedUpdate;
                            }
                        }
                        concurrentQueues = null;
                    }
                }
                function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                }
                function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
                    var interleaved = queue.interleaved;
                    if (interleaved === null) {
                        update.next = update;
                        pushConcurrentUpdateQueue(queue);
                    } else {
                        update.next = interleaved.next;
                        interleaved.next = update;
                    }
                    queue.interleaved = update;
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                function enqueueConcurrentRenderForLane(fiber, lane) {
                    return markUpdateLaneFromFiberToRoot(fiber, lane);
                }
                var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
                function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
                    var alternate = sourceFiber.alternate;
                    if (alternate !== null) {
                        alternate.lanes = mergeLanes(alternate.lanes, lane);
                    }
                    {
                        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                        }
                    }
                    var node2 = sourceFiber;
                    var parent = sourceFiber.return;
                    while(parent !== null){
                        parent.childLanes = mergeLanes(parent.childLanes, lane);
                        alternate = parent.alternate;
                        if (alternate !== null) {
                            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
                        } else {
                            {
                                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                                }
                            }
                        }
                        node2 = parent;
                        parent = parent.return;
                    }
                    if (node2.tag === HostRoot) {
                        var root2 = node2.stateNode;
                        return root2;
                    } else {
                        return null;
                    }
                }
                var UpdateState = 0;
                var ReplaceState = 1;
                var ForceUpdate = 2;
                var CaptureUpdate = 3;
                var hasForceUpdate = false;
                var didWarnUpdateInsideUpdate;
                var currentlyProcessingQueue;
                {
                    didWarnUpdateInsideUpdate = false;
                    currentlyProcessingQueue = null;
                }
                function initializeUpdateQueue(fiber) {
                    var queue = {
                        baseState: fiber.memoizedState,
                        firstBaseUpdate: null,
                        lastBaseUpdate: null,
                        shared: {
                            pending: null,
                            interleaved: null,
                            lanes: NoLanes
                        },
                        effects: null
                    };
                    fiber.updateQueue = queue;
                }
                function cloneUpdateQueue(current2, workInProgress2) {
                    var queue = workInProgress2.updateQueue;
                    var currentQueue = current2.updateQueue;
                    if (queue === currentQueue) {
                        var clone = {
                            baseState: currentQueue.baseState,
                            firstBaseUpdate: currentQueue.firstBaseUpdate,
                            lastBaseUpdate: currentQueue.lastBaseUpdate,
                            shared: currentQueue.shared,
                            effects: currentQueue.effects
                        };
                        workInProgress2.updateQueue = clone;
                    }
                }
                function createUpdate(eventTime, lane) {
                    var update = {
                        eventTime: eventTime,
                        lane: lane,
                        tag: UpdateState,
                        payload: null,
                        callback: null,
                        next: null
                    };
                    return update;
                }
                function enqueueUpdate(fiber, update, lane) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return null;
                    }
                    var sharedQueue = updateQueue.shared;
                    {
                        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                            didWarnUpdateInsideUpdate = true;
                        }
                    }
                    if (isUnsafeClassRenderPhaseUpdate()) {
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                            update.next = update;
                        } else {
                            update.next = pending.next;
                            pending.next = update;
                        }
                        sharedQueue.pending = update;
                        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
                    } else {
                        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
                    }
                }
                function entangleTransitions(root2, fiber, lane) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return;
                    }
                    var sharedQueue = updateQueue.shared;
                    if (isTransitionLane(lane)) {
                        var queueLanes = sharedQueue.lanes;
                        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
                        var newQueueLanes = mergeLanes(queueLanes, lane);
                        sharedQueue.lanes = newQueueLanes;
                        markRootEntangled(root2, newQueueLanes);
                    }
                }
                function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
                    var queue = workInProgress2.updateQueue;
                    var current2 = workInProgress2.alternate;
                    if (current2 !== null) {
                        var currentQueue = current2.updateQueue;
                        if (queue === currentQueue) {
                            var newFirst = null;
                            var newLast = null;
                            var firstBaseUpdate = queue.firstBaseUpdate;
                            if (firstBaseUpdate !== null) {
                                var update = firstBaseUpdate;
                                do {
                                    var clone = {
                                        eventTime: update.eventTime,
                                        lane: update.lane,
                                        tag: update.tag,
                                        payload: update.payload,
                                        callback: update.callback,
                                        next: null
                                    };
                                    if (newLast === null) {
                                        newFirst = newLast = clone;
                                    } else {
                                        newLast.next = clone;
                                        newLast = clone;
                                    }
                                    update = update.next;
                                }while (update !== null);
                                if (newLast === null) {
                                    newFirst = newLast = capturedUpdate;
                                } else {
                                    newLast.next = capturedUpdate;
                                    newLast = capturedUpdate;
                                }
                            } else {
                                newFirst = newLast = capturedUpdate;
                            }
                            queue = {
                                baseState: currentQueue.baseState,
                                firstBaseUpdate: newFirst,
                                lastBaseUpdate: newLast,
                                shared: currentQueue.shared,
                                effects: currentQueue.effects
                            };
                            workInProgress2.updateQueue = queue;
                            return;
                        }
                    }
                    var lastBaseUpdate = queue.lastBaseUpdate;
                    if (lastBaseUpdate === null) {
                        queue.firstBaseUpdate = capturedUpdate;
                    } else {
                        lastBaseUpdate.next = capturedUpdate;
                    }
                    queue.lastBaseUpdate = capturedUpdate;
                }
                function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
                    switch(update.tag){
                        case ReplaceState:
                            {
                                var payload = update.payload;
                                if (typeof payload === "function") {
                                    {
                                        enterDisallowedContextReadInDEV();
                                    }
                                    var nextState = payload.call(instance, prevState, nextProps);
                                    {
                                        if (workInProgress2.mode & StrictLegacyMode) {
                                            setIsStrictModeForDevtools(true);
                                            try {
                                                payload.call(instance, prevState, nextProps);
                                            } finally{
                                                setIsStrictModeForDevtools(false);
                                            }
                                        }
                                        exitDisallowedContextReadInDEV();
                                    }
                                    return nextState;
                                }
                                return payload;
                            }
                        case CaptureUpdate:
                            {
                                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
                            }
                        // Intentional fallthrough
                        case UpdateState:
                            {
                                var _payload = update.payload;
                                var partialState;
                                if (typeof _payload === "function") {
                                    {
                                        enterDisallowedContextReadInDEV();
                                    }
                                    partialState = _payload.call(instance, prevState, nextProps);
                                    {
                                        if (workInProgress2.mode & StrictLegacyMode) {
                                            setIsStrictModeForDevtools(true);
                                            try {
                                                _payload.call(instance, prevState, nextProps);
                                            } finally{
                                                setIsStrictModeForDevtools(false);
                                            }
                                        }
                                        exitDisallowedContextReadInDEV();
                                    }
                                } else {
                                    partialState = _payload;
                                }
                                if (partialState === null || partialState === void 0) {
                                    return prevState;
                                }
                                return assign2({}, prevState, partialState);
                            }
                        case ForceUpdate:
                            {
                                hasForceUpdate = true;
                                return prevState;
                            }
                    }
                    return prevState;
                }
                function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
                    var queue = workInProgress2.updateQueue;
                    hasForceUpdate = false;
                    {
                        currentlyProcessingQueue = queue.shared;
                    }
                    var firstBaseUpdate = queue.firstBaseUpdate;
                    var lastBaseUpdate = queue.lastBaseUpdate;
                    var pendingQueue = queue.shared.pending;
                    if (pendingQueue !== null) {
                        queue.shared.pending = null;
                        var lastPendingUpdate = pendingQueue;
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = null;
                        if (lastBaseUpdate === null) {
                            firstBaseUpdate = firstPendingUpdate;
                        } else {
                            lastBaseUpdate.next = firstPendingUpdate;
                        }
                        lastBaseUpdate = lastPendingUpdate;
                        var current2 = workInProgress2.alternate;
                        if (current2 !== null) {
                            var currentQueue = current2.updateQueue;
                            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                            if (currentLastBaseUpdate !== lastBaseUpdate) {
                                if (currentLastBaseUpdate === null) {
                                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                                } else {
                                    currentLastBaseUpdate.next = firstPendingUpdate;
                                }
                                currentQueue.lastBaseUpdate = lastPendingUpdate;
                            }
                        }
                    }
                    if (firstBaseUpdate !== null) {
                        var newState = queue.baseState;
                        var newLanes = NoLanes;
                        var newBaseState = null;
                        var newFirstBaseUpdate = null;
                        var newLastBaseUpdate = null;
                        var update = firstBaseUpdate;
                        do {
                            var updateLane = update.lane;
                            var updateEventTime = update.eventTime;
                            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                                var clone = {
                                    eventTime: updateEventTime,
                                    lane: updateLane,
                                    tag: update.tag,
                                    payload: update.payload,
                                    callback: update.callback,
                                    next: null
                                };
                                if (newLastBaseUpdate === null) {
                                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                                    newBaseState = newState;
                                } else {
                                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                                }
                                newLanes = mergeLanes(newLanes, updateLane);
                            } else {
                                if (newLastBaseUpdate !== null) {
                                    var _clone = {
                                        eventTime: updateEventTime,
                                        // This update is going to be committed so we never want uncommit
                                        // it. Using NoLane works because 0 is a subset of all bitmasks, so
                                        // this will never be skipped by the check above.
                                        lane: NoLane,
                                        tag: update.tag,
                                        payload: update.payload,
                                        callback: update.callback,
                                        next: null
                                    };
                                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                                }
                                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                                var callback = update.callback;
                                if (callback !== null && // If the update was already committed, we should not queue its
                                // callback again.
                                update.lane !== NoLane) {
                                    workInProgress2.flags |= Callback;
                                    var effects = queue.effects;
                                    if (effects === null) {
                                        queue.effects = [
                                            update
                                        ];
                                    } else {
                                        effects.push(update);
                                    }
                                }
                            }
                            update = update.next;
                            if (update === null) {
                                pendingQueue = queue.shared.pending;
                                if (pendingQueue === null) {
                                    break;
                                } else {
                                    var _lastPendingUpdate = pendingQueue;
                                    var _firstPendingUpdate = _lastPendingUpdate.next;
                                    _lastPendingUpdate.next = null;
                                    update = _firstPendingUpdate;
                                    queue.lastBaseUpdate = _lastPendingUpdate;
                                    queue.shared.pending = null;
                                }
                            }
                        }while (true);
                        if (newLastBaseUpdate === null) {
                            newBaseState = newState;
                        }
                        queue.baseState = newBaseState;
                        queue.firstBaseUpdate = newFirstBaseUpdate;
                        queue.lastBaseUpdate = newLastBaseUpdate;
                        var lastInterleaved = queue.shared.interleaved;
                        if (lastInterleaved !== null) {
                            var interleaved = lastInterleaved;
                            do {
                                newLanes = mergeLanes(newLanes, interleaved.lane);
                                interleaved = interleaved.next;
                            }while (interleaved !== lastInterleaved);
                        } else if (firstBaseUpdate === null) {
                            queue.shared.lanes = NoLanes;
                        }
                        markSkippedUpdateLanes(newLanes);
                        workInProgress2.lanes = newLanes;
                        workInProgress2.memoizedState = newState;
                    }
                    {
                        currentlyProcessingQueue = null;
                    }
                }
                function callCallback(callback, context) {
                    if (typeof callback !== "function") {
                        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
                    }
                    callback.call(context);
                }
                function resetHasForceUpdateBeforeProcessing() {
                    hasForceUpdate = false;
                }
                function checkHasForceUpdateAfterProcessing() {
                    return hasForceUpdate;
                }
                function commitUpdateQueue(finishedWork, finishedQueue, instance) {
                    var effects = finishedQueue.effects;
                    finishedQueue.effects = null;
                    if (effects !== null) {
                        for(var i = 0; i < effects.length; i++){
                            var effect = effects[i];
                            var callback = effect.callback;
                            if (callback !== null) {
                                effect.callback = null;
                                callCallback(callback, instance);
                            }
                        }
                    }
                }
                var NO_CONTEXT = {};
                var contextStackCursor$1 = createCursor(NO_CONTEXT);
                var contextFiberStackCursor = createCursor(NO_CONTEXT);
                var rootInstanceStackCursor = createCursor(NO_CONTEXT);
                function requiredContext(c) {
                    if (c === NO_CONTEXT) {
                        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    return c;
                }
                function getRootHostContainer() {
                    var rootInstance = requiredContext(rootInstanceStackCursor.current);
                    return rootInstance;
                }
                function pushHostContainer(fiber, nextRootInstance) {
                    push(rootInstanceStackCursor, nextRootInstance, fiber);
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, NO_CONTEXT, fiber);
                    var nextRootContext = getRootHostContext(nextRootInstance);
                    pop(contextStackCursor$1, fiber);
                    push(contextStackCursor$1, nextRootContext, fiber);
                }
                function popHostContainer(fiber) {
                    pop(contextStackCursor$1, fiber);
                    pop(contextFiberStackCursor, fiber);
                    pop(rootInstanceStackCursor, fiber);
                }
                function getHostContext() {
                    var context = requiredContext(contextStackCursor$1.current);
                    return context;
                }
                function pushHostContext(fiber) {
                    var rootInstance = requiredContext(rootInstanceStackCursor.current);
                    var context = requiredContext(contextStackCursor$1.current);
                    var nextContext = getChildHostContext(context, fiber.type);
                    if (context === nextContext) {
                        return;
                    }
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, nextContext, fiber);
                }
                function popHostContext(fiber) {
                    if (contextFiberStackCursor.current !== fiber) {
                        return;
                    }
                    pop(contextStackCursor$1, fiber);
                    pop(contextFiberStackCursor, fiber);
                }
                var DefaultSuspenseContext = 0;
                var SubtreeSuspenseContextMask = 1;
                var InvisibleParentSuspenseContext = 1;
                var ForceSuspenseFallback = 2;
                var suspenseStackCursor = createCursor(DefaultSuspenseContext);
                function hasSuspenseContext(parentContext, flag) {
                    return (parentContext & flag) !== 0;
                }
                function setDefaultShallowSuspenseContext(parentContext) {
                    return parentContext & SubtreeSuspenseContextMask;
                }
                function setShallowSuspenseContext(parentContext, shallowContext) {
                    return parentContext & SubtreeSuspenseContextMask | shallowContext;
                }
                function addSubtreeSuspenseContext(parentContext, subtreeContext) {
                    return parentContext | subtreeContext;
                }
                function pushSuspenseContext(fiber, newContext) {
                    push(suspenseStackCursor, newContext, fiber);
                }
                function popSuspenseContext(fiber) {
                    pop(suspenseStackCursor, fiber);
                }
                function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
                    var nextState = workInProgress2.memoizedState;
                    if (nextState !== null) {
                        if (nextState.dehydrated !== null) {
                            return true;
                        }
                        return false;
                    }
                    var props = workInProgress2.memoizedProps;
                    {
                        return true;
                    }
                }
                function findFirstSuspended(row) {
                    var node2 = row;
                    while(node2 !== null){
                        if (node2.tag === SuspenseComponent) {
                            var state = node2.memoizedState;
                            if (state !== null) {
                                var dehydrated = state.dehydrated;
                                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                                    return node2;
                                }
                            }
                        } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
                        // keep track of whether it suspended or not.
                        node2.memoizedProps.revealOrder !== void 0) {
                            var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                            if (didSuspend) {
                                return node2;
                            }
                        } else if (node2.child !== null) {
                            node2.child.return = node2;
                            node2 = node2.child;
                            continue;
                        }
                        if (node2 === row) {
                            return null;
                        }
                        while(node2.sibling === null){
                            if (node2.return === null || node2.return === row) {
                                return null;
                            }
                            node2 = node2.return;
                        }
                        node2.sibling.return = node2.return;
                        node2 = node2.sibling;
                    }
                    return null;
                }
                var NoFlags$1 = /*   */ 0;
                var HasEffect = /* */ 1;
                var Insertion = /*  */ 2;
                var Layout = /*    */ 4;
                var Passive$1 = /*   */ 8;
                var workInProgressSources = [];
                function resetWorkInProgressVersions() {
                    for(var i = 0; i < workInProgressSources.length; i++){
                        var mutableSource = workInProgressSources[i];
                        {
                            mutableSource._workInProgressVersionPrimary = null;
                        }
                    }
                    workInProgressSources.length = 0;
                }
                function registerMutableSourceForHydration(root2, mutableSource) {
                    var getVersion = mutableSource._getVersion;
                    var version4 = getVersion(mutableSource._source);
                    if (root2.mutableSourceEagerHydrationData == null) {
                        root2.mutableSourceEagerHydrationData = [
                            mutableSource,
                            version4
                        ];
                    } else {
                        root2.mutableSourceEagerHydrationData.push(mutableSource, version4);
                    }
                }
                var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
                var didWarnAboutMismatchedHooksForComponent;
                var didWarnUncachedGetSnapshot;
                {
                    didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
                }
                var renderLanes = NoLanes;
                var currentlyRenderingFiber$1 = null;
                var currentHook = null;
                var workInProgressHook = null;
                var didScheduleRenderPhaseUpdate = false;
                var didScheduleRenderPhaseUpdateDuringThisPass = false;
                var localIdCounter = 0;
                var globalClientIdCounter = 0;
                var RE_RENDER_LIMIT = 25;
                var currentHookNameInDev = null;
                var hookTypesDev = null;
                var hookTypesUpdateIndexDev = -1;
                var ignorePreviousDependencies = false;
                function mountHookTypesDev() {
                    {
                        var hookName = currentHookNameInDev;
                        if (hookTypesDev === null) {
                            hookTypesDev = [
                                hookName
                            ];
                        } else {
                            hookTypesDev.push(hookName);
                        }
                    }
                }
                function updateHookTypesDev() {
                    {
                        var hookName = currentHookNameInDev;
                        if (hookTypesDev !== null) {
                            hookTypesUpdateIndexDev++;
                            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                                warnOnHookMismatchInDev(hookName);
                            }
                        }
                    }
                }
                function checkDepsAreArrayDev(deps) {
                    {
                        if (deps !== void 0 && deps !== null && !isArray(deps)) {
                            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps === "undefined" ? "undefined" : _type_of(deps));
                        }
                    }
                }
                function warnOnHookMismatchInDev(currentHookName) {
                    {
                        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
                        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                            didWarnAboutMismatchedHooksForComponent.add(componentName);
                            if (hookTypesDev !== null) {
                                var table = "";
                                var secondColumnStart = 30;
                                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                                    var oldHookName = hookTypesDev[i];
                                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                                    var row = i + 1 + ". " + oldHookName;
                                    while(row.length < secondColumnStart){
                                        row += " ";
                                    }
                                    row += newHookName + "\n";
                                    table += row;
                                }
                                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                            }
                        }
                    }
                }
                function throwInvalidHookError() {
                    throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                }
                function areHookInputsEqual(nextDeps, prevDeps) {
                    {
                        if (ignorePreviousDependencies) {
                            return false;
                        }
                    }
                    if (prevDeps === null) {
                        {
                            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
                        }
                        return false;
                    }
                    {
                        if (nextDeps.length !== prevDeps.length) {
                            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
                        }
                    }
                    for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
                        if (objectIs(nextDeps[i], prevDeps[i])) {
                            continue;
                        }
                        return false;
                    }
                    return true;
                }
                function renderWithHooks(current2, workInProgress2, Component3, props, secondArg, nextRenderLanes) {
                    renderLanes = nextRenderLanes;
                    currentlyRenderingFiber$1 = workInProgress2;
                    {
                        hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
                        hookTypesUpdateIndexDev = -1;
                        ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
                    }
                    workInProgress2.memoizedState = null;
                    workInProgress2.updateQueue = null;
                    workInProgress2.lanes = NoLanes;
                    {
                        if (current2 !== null && current2.memoizedState !== null) {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                        } else if (hookTypesDev !== null) {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                        } else {
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                        }
                    }
                    var children = Component3(props, secondArg);
                    if (didScheduleRenderPhaseUpdateDuringThisPass) {
                        var numberOfReRenders = 0;
                        do {
                            didScheduleRenderPhaseUpdateDuringThisPass = false;
                            localIdCounter = 0;
                            if (numberOfReRenders >= RE_RENDER_LIMIT) {
                                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                            }
                            numberOfReRenders += 1;
                            {
                                ignorePreviousDependencies = false;
                            }
                            currentHook = null;
                            workInProgressHook = null;
                            workInProgress2.updateQueue = null;
                            {
                                hookTypesUpdateIndexDev = -1;
                            }
                            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                            children = Component3(props, secondArg);
                        }while (didScheduleRenderPhaseUpdateDuringThisPass);
                    }
                    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                    {
                        workInProgress2._debugHookTypes = hookTypesDev;
                    }
                    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
                    renderLanes = NoLanes;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        currentHookNameInDev = null;
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                        if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
                        // and creates false positives. To make this work in legacy mode, we'd
                        // need to mark fibers that commit in an incomplete state, somehow. For
                        // now I'll disable the warning that most of the bugs that would trigger
                        // it are either exclusive to concurrent mode or exist in both.
                        (current2.mode & ConcurrentMode) !== NoMode) {
                            error("Internal React error: Expected static flag was missing. Please notify the React team.");
                        }
                    }
                    didScheduleRenderPhaseUpdate = false;
                    if (didRenderTooFewHooks) {
                        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
                    }
                    return children;
                }
                function checkDidRenderIdHook() {
                    var didRenderIdHook = localIdCounter !== 0;
                    localIdCounter = 0;
                    return didRenderIdHook;
                }
                function bailoutHooks(current2, workInProgress2, lanes) {
                    workInProgress2.updateQueue = current2.updateQueue;
                    if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
                    } else {
                        workInProgress2.flags &= ~(Passive | Update);
                    }
                    current2.lanes = removeLanes(current2.lanes, lanes);
                }
                function resetHooksAfterThrow() {
                    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                    if (didScheduleRenderPhaseUpdate) {
                        var hook = currentlyRenderingFiber$1.memoizedState;
                        while(hook !== null){
                            var queue = hook.queue;
                            if (queue !== null) {
                                queue.pending = null;
                            }
                            hook = hook.next;
                        }
                        didScheduleRenderPhaseUpdate = false;
                    }
                    renderLanes = NoLanes;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                        currentHookNameInDev = null;
                        isUpdatingOpaqueValueInRenderPhase = false;
                    }
                    didScheduleRenderPhaseUpdateDuringThisPass = false;
                    localIdCounter = 0;
                }
                function mountWorkInProgressHook() {
                    var hook = {
                        memoizedState: null,
                        baseState: null,
                        baseQueue: null,
                        queue: null,
                        next: null
                    };
                    if (workInProgressHook === null) {
                        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
                    } else {
                        workInProgressHook = workInProgressHook.next = hook;
                    }
                    return workInProgressHook;
                }
                function updateWorkInProgressHook() {
                    var nextCurrentHook;
                    if (currentHook === null) {
                        var current2 = currentlyRenderingFiber$1.alternate;
                        if (current2 !== null) {
                            nextCurrentHook = current2.memoizedState;
                        } else {
                            nextCurrentHook = null;
                        }
                    } else {
                        nextCurrentHook = currentHook.next;
                    }
                    var nextWorkInProgressHook;
                    if (workInProgressHook === null) {
                        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
                    } else {
                        nextWorkInProgressHook = workInProgressHook.next;
                    }
                    if (nextWorkInProgressHook !== null) {
                        workInProgressHook = nextWorkInProgressHook;
                        nextWorkInProgressHook = workInProgressHook.next;
                        currentHook = nextCurrentHook;
                    } else {
                        if (nextCurrentHook === null) {
                            throw new Error("Rendered more hooks than during the previous render.");
                        }
                        currentHook = nextCurrentHook;
                        var newHook = {
                            memoizedState: currentHook.memoizedState,
                            baseState: currentHook.baseState,
                            baseQueue: currentHook.baseQueue,
                            queue: currentHook.queue,
                            next: null
                        };
                        if (workInProgressHook === null) {
                            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                        } else {
                            workInProgressHook = workInProgressHook.next = newHook;
                        }
                    }
                    return workInProgressHook;
                }
                function createFunctionComponentUpdateQueue() {
                    return {
                        lastEffect: null,
                        stores: null
                    };
                }
                function basicStateReducer(state, action) {
                    return typeof action === "function" ? action(state) : action;
                }
                function mountReducer(reducer, initialArg, init) {
                    var hook = mountWorkInProgressHook();
                    var initialState;
                    if (init !== void 0) {
                        initialState = init(initialArg);
                    } else {
                        initialState = initialArg;
                    }
                    hook.memoizedState = hook.baseState = initialState;
                    var queue = {
                        pending: null,
                        interleaved: null,
                        lanes: NoLanes,
                        dispatch: null,
                        lastRenderedReducer: reducer,
                        lastRenderedState: initialState
                    };
                    hook.queue = queue;
                    var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
                    return [
                        hook.memoizedState,
                        dispatch
                    ];
                }
                function updateReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (queue === null) {
                        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                    queue.lastRenderedReducer = reducer;
                    var current2 = currentHook;
                    var baseQueue = current2.baseQueue;
                    var pendingQueue = queue.pending;
                    if (pendingQueue !== null) {
                        if (baseQueue !== null) {
                            var baseFirst = baseQueue.next;
                            var pendingFirst = pendingQueue.next;
                            baseQueue.next = pendingFirst;
                            pendingQueue.next = baseFirst;
                        }
                        {
                            if (current2.baseQueue !== baseQueue) {
                                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                            }
                        }
                        current2.baseQueue = baseQueue = pendingQueue;
                        queue.pending = null;
                    }
                    if (baseQueue !== null) {
                        var first = baseQueue.next;
                        var newState = current2.baseState;
                        var newBaseState = null;
                        var newBaseQueueFirst = null;
                        var newBaseQueueLast = null;
                        var update = first;
                        do {
                            var updateLane = update.lane;
                            if (!isSubsetOfLanes(renderLanes, updateLane)) {
                                var clone = {
                                    lane: updateLane,
                                    action: update.action,
                                    hasEagerState: update.hasEagerState,
                                    eagerState: update.eagerState,
                                    next: null
                                };
                                if (newBaseQueueLast === null) {
                                    newBaseQueueFirst = newBaseQueueLast = clone;
                                    newBaseState = newState;
                                } else {
                                    newBaseQueueLast = newBaseQueueLast.next = clone;
                                }
                                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                                markSkippedUpdateLanes(updateLane);
                            } else {
                                if (newBaseQueueLast !== null) {
                                    var _clone = {
                                        // This update is going to be committed so we never want uncommit
                                        // it. Using NoLane works because 0 is a subset of all bitmasks, so
                                        // this will never be skipped by the check above.
                                        lane: NoLane,
                                        action: update.action,
                                        hasEagerState: update.hasEagerState,
                                        eagerState: update.eagerState,
                                        next: null
                                    };
                                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                                }
                                if (update.hasEagerState) {
                                    newState = update.eagerState;
                                } else {
                                    var action = update.action;
                                    newState = reducer(newState, action);
                                }
                            }
                            update = update.next;
                        }while (update !== null && update !== first);
                        if (newBaseQueueLast === null) {
                            newBaseState = newState;
                        } else {
                            newBaseQueueLast.next = newBaseQueueFirst;
                        }
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        hook.baseState = newBaseState;
                        hook.baseQueue = newBaseQueueLast;
                        queue.lastRenderedState = newState;
                    }
                    var lastInterleaved = queue.interleaved;
                    if (lastInterleaved !== null) {
                        var interleaved = lastInterleaved;
                        do {
                            var interleavedLane = interleaved.lane;
                            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                            markSkippedUpdateLanes(interleavedLane);
                            interleaved = interleaved.next;
                        }while (interleaved !== lastInterleaved);
                    } else if (baseQueue === null) {
                        queue.lanes = NoLanes;
                    }
                    var dispatch = queue.dispatch;
                    return [
                        hook.memoizedState,
                        dispatch
                    ];
                }
                function rerenderReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (queue === null) {
                        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                    }
                    queue.lastRenderedReducer = reducer;
                    var dispatch = queue.dispatch;
                    var lastRenderPhaseUpdate = queue.pending;
                    var newState = hook.memoizedState;
                    if (lastRenderPhaseUpdate !== null) {
                        queue.pending = null;
                        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                        var update = firstRenderPhaseUpdate;
                        do {
                            var action = update.action;
                            newState = reducer(newState, action);
                            update = update.next;
                        }while (update !== firstRenderPhaseUpdate);
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        if (hook.baseQueue === null) {
                            hook.baseState = newState;
                        }
                        queue.lastRenderedState = newState;
                    }
                    return [
                        newState,
                        dispatch
                    ];
                }
                function mountMutableSource(source, getSnapshot, subscribe) {
                    {
                        return void 0;
                    }
                }
                function updateMutableSource(source, getSnapshot, subscribe) {
                    {
                        return void 0;
                    }
                }
                function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                    var fiber = currentlyRenderingFiber$1;
                    var hook = mountWorkInProgressHook();
                    var nextSnapshot;
                    var isHydrating2 = getIsHydrating();
                    if (isHydrating2) {
                        if (getServerSnapshot === void 0) {
                            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
                        }
                        nextSnapshot = getServerSnapshot();
                        {
                            if (!didWarnUncachedGetSnapshot) {
                                if (nextSnapshot !== getServerSnapshot()) {
                                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                                    didWarnUncachedGetSnapshot = true;
                                }
                            }
                        }
                    } else {
                        nextSnapshot = getSnapshot();
                        {
                            if (!didWarnUncachedGetSnapshot) {
                                var cachedSnapshot = getSnapshot();
                                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                                    didWarnUncachedGetSnapshot = true;
                                }
                            }
                        }
                        var root2 = getWorkInProgressRoot();
                        if (root2 === null) {
                            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                        }
                        if (!includesBlockingLane(root2, renderLanes)) {
                            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
                        }
                    }
                    hook.memoizedState = nextSnapshot;
                    var inst = {
                        value: nextSnapshot,
                        getSnapshot: getSnapshot
                    };
                    hook.queue = inst;
                    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
                        subscribe
                    ]);
                    fiber.flags |= Passive;
                    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
                    return nextSnapshot;
                }
                function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                    var fiber = currentlyRenderingFiber$1;
                    var hook = updateWorkInProgressHook();
                    var nextSnapshot = getSnapshot();
                    {
                        if (!didWarnUncachedGetSnapshot) {
                            var cachedSnapshot = getSnapshot();
                            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                                error("The result of getSnapshot should be cached to avoid an infinite loop");
                                didWarnUncachedGetSnapshot = true;
                            }
                        }
                    }
                    var prevSnapshot = hook.memoizedState;
                    var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
                    if (snapshotChanged) {
                        hook.memoizedState = nextSnapshot;
                        markWorkInProgressReceivedUpdate();
                    }
                    var inst = hook.queue;
                    updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
                        subscribe
                    ]);
                    if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
                    // checking whether we scheduled a subscription effect above.
                    workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
                        fiber.flags |= Passive;
                        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
                        var root2 = getWorkInProgressRoot();
                        if (root2 === null) {
                            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                        }
                        if (!includesBlockingLane(root2, renderLanes)) {
                            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
                        }
                    }
                    return nextSnapshot;
                }
                function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
                    fiber.flags |= StoreConsistency;
                    var check = {
                        getSnapshot: getSnapshot,
                        value: renderedSnapshot
                    };
                    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
                    if (componentUpdateQueue === null) {
                        componentUpdateQueue = createFunctionComponentUpdateQueue();
                        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                        componentUpdateQueue.stores = [
                            check
                        ];
                    } else {
                        var stores = componentUpdateQueue.stores;
                        if (stores === null) {
                            componentUpdateQueue.stores = [
                                check
                            ];
                        } else {
                            stores.push(check);
                        }
                    }
                }
                function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
                    inst.value = nextSnapshot;
                    inst.getSnapshot = getSnapshot;
                    if (checkIfSnapshotChanged(inst)) {
                        forceStoreRerender(fiber);
                    }
                }
                function subscribeToStore(fiber, inst, subscribe) {
                    var handleStoreChange = function handleStoreChange() {
                        if (checkIfSnapshotChanged(inst)) {
                            forceStoreRerender(fiber);
                        }
                    };
                    return subscribe(handleStoreChange);
                }
                function checkIfSnapshotChanged(inst) {
                    var latestGetSnapshot = inst.getSnapshot;
                    var prevValue = inst.value;
                    try {
                        var nextValue = latestGetSnapshot();
                        return !objectIs(prevValue, nextValue);
                    } catch (error2) {
                        return true;
                    }
                }
                function forceStoreRerender(fiber) {
                    var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root2 !== null) {
                        scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                    }
                }
                function mountState(initialState) {
                    var hook = mountWorkInProgressHook();
                    if (typeof initialState === "function") {
                        initialState = initialState();
                    }
                    hook.memoizedState = hook.baseState = initialState;
                    var queue = {
                        pending: null,
                        interleaved: null,
                        lanes: NoLanes,
                        dispatch: null,
                        lastRenderedReducer: basicStateReducer,
                        lastRenderedState: initialState
                    };
                    hook.queue = queue;
                    var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
                    return [
                        hook.memoizedState,
                        dispatch
                    ];
                }
                function updateState(initialState) {
                    return updateReducer(basicStateReducer);
                }
                function rerenderState(initialState) {
                    return rerenderReducer(basicStateReducer);
                }
                function pushEffect(tag, create, destroy, deps) {
                    var effect = {
                        tag: tag,
                        create: create,
                        destroy: destroy,
                        deps: deps,
                        // Circular
                        next: null
                    };
                    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
                    if (componentUpdateQueue === null) {
                        componentUpdateQueue = createFunctionComponentUpdateQueue();
                        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                        componentUpdateQueue.lastEffect = effect.next = effect;
                    } else {
                        var lastEffect = componentUpdateQueue.lastEffect;
                        if (lastEffect === null) {
                            componentUpdateQueue.lastEffect = effect.next = effect;
                        } else {
                            var firstEffect = lastEffect.next;
                            lastEffect.next = effect;
                            effect.next = firstEffect;
                            componentUpdateQueue.lastEffect = effect;
                        }
                    }
                    return effect;
                }
                function mountRef(initialValue) {
                    var hook = mountWorkInProgressHook();
                    {
                        var _ref2 = {
                            current: initialValue
                        };
                        hook.memoizedState = _ref2;
                        return _ref2;
                    }
                }
                function updateRef(initialValue) {
                    var hook = updateWorkInProgressHook();
                    return hook.memoizedState;
                }
                function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    currentlyRenderingFiber$1.flags |= fiberFlags;
                    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
                }
                function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    var destroy = void 0;
                    if (currentHook !== null) {
                        var prevEffect = currentHook.memoizedState;
                        destroy = prevEffect.destroy;
                        if (nextDeps !== null) {
                            var prevDeps = prevEffect.deps;
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                                return;
                            }
                        }
                    }
                    currentlyRenderingFiber$1.flags |= fiberFlags;
                    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
                }
                function mountEffect(create, deps) {
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
                    } else {
                        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
                    }
                }
                function updateEffect(create, deps) {
                    return updateEffectImpl(Passive, Passive$1, create, deps);
                }
                function mountInsertionEffect(create, deps) {
                    return mountEffectImpl(Update, Insertion, create, deps);
                }
                function updateInsertionEffect(create, deps) {
                    return updateEffectImpl(Update, Insertion, create, deps);
                }
                function mountLayoutEffect(create, deps) {
                    var fiberFlags = Update;
                    {
                        fiberFlags |= LayoutStatic;
                    }
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        fiberFlags |= MountLayoutDev;
                    }
                    return mountEffectImpl(fiberFlags, Layout, create, deps);
                }
                function updateLayoutEffect(create, deps) {
                    return updateEffectImpl(Update, Layout, create, deps);
                }
                function imperativeHandleEffect(create, ref) {
                    if (typeof ref === "function") {
                        var refCallback = ref;
                        var _inst = create();
                        refCallback(_inst);
                        return function() {
                            refCallback(null);
                        };
                    } else if (ref !== null && ref !== void 0) {
                        var refObject = ref;
                        {
                            if (!refObject.hasOwnProperty("current")) {
                                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                            }
                        }
                        var _inst2 = create();
                        refObject.current = _inst2;
                        return function() {
                            refObject.current = null;
                        };
                    }
                }
                function mountImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== "function") {
                            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create === "undefined" ? "undefined" : _type_of(create) : "null");
                        }
                    }
                    var effectDeps = deps !== null && deps !== void 0 ? deps.concat([
                        ref
                    ]) : null;
                    var fiberFlags = Update;
                    {
                        fiberFlags |= LayoutStatic;
                    }
                    if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
                        fiberFlags |= MountLayoutDev;
                    }
                    return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function updateImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== "function") {
                            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create === "undefined" ? "undefined" : _type_of(create) : "null");
                        }
                    }
                    var effectDeps = deps !== null && deps !== void 0 ? deps.concat([
                        ref
                    ]) : null;
                    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function mountDebugValue(value, formatterFn) {}
                var updateDebugValue = mountDebugValue;
                function mountCallback(callback, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    hook.memoizedState = [
                        callback,
                        nextDeps
                    ];
                    return callback;
                }
                function updateCallback(callback, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    var prevState = hook.memoizedState;
                    if (prevState !== null) {
                        if (nextDeps !== null) {
                            var prevDeps = prevState[1];
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                return prevState[0];
                            }
                        }
                    }
                    hook.memoizedState = [
                        callback,
                        nextDeps
                    ];
                    return callback;
                }
                function mountMemo(nextCreate, deps) {
                    var hook = mountWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    var nextValue = nextCreate();
                    hook.memoizedState = [
                        nextValue,
                        nextDeps
                    ];
                    return nextValue;
                }
                function updateMemo(nextCreate, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === void 0 ? null : deps;
                    var prevState = hook.memoizedState;
                    if (prevState !== null) {
                        if (nextDeps !== null) {
                            var prevDeps = prevState[1];
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                return prevState[0];
                            }
                        }
                    }
                    var nextValue = nextCreate();
                    hook.memoizedState = [
                        nextValue,
                        nextDeps
                    ];
                    return nextValue;
                }
                function mountDeferredValue(value) {
                    var hook = mountWorkInProgressHook();
                    hook.memoizedState = value;
                    return value;
                }
                function updateDeferredValue(value) {
                    var hook = updateWorkInProgressHook();
                    var resolvedCurrentHook = currentHook;
                    var prevValue = resolvedCurrentHook.memoizedState;
                    return updateDeferredValueImpl(hook, prevValue, value);
                }
                function rerenderDeferredValue(value) {
                    var hook = updateWorkInProgressHook();
                    if (currentHook === null) {
                        hook.memoizedState = value;
                        return value;
                    } else {
                        var prevValue = currentHook.memoizedState;
                        return updateDeferredValueImpl(hook, prevValue, value);
                    }
                }
                function updateDeferredValueImpl(hook, prevValue, value) {
                    var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
                    if (shouldDeferValue) {
                        if (!objectIs(value, prevValue)) {
                            var deferredLane = claimNextTransitionLane();
                            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                            markSkippedUpdateLanes(deferredLane);
                            hook.baseState = true;
                        }
                        return prevValue;
                    } else {
                        if (hook.baseState) {
                            hook.baseState = false;
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = value;
                        return value;
                    }
                }
                function startTransition(setPending, callback, options2) {
                    var previousPriority = getCurrentUpdatePriority();
                    setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
                    setPending(true);
                    var prevTransition = ReactCurrentBatchConfig$2.transition;
                    ReactCurrentBatchConfig$2.transition = {};
                    var currentTransition = ReactCurrentBatchConfig$2.transition;
                    {
                        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
                    }
                    try {
                        setPending(false);
                        callback();
                    } finally{
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$2.transition = prevTransition;
                        {
                            if (prevTransition === null && currentTransition._updatedFibers) {
                                var updatedFibersCount = currentTransition._updatedFibers.size;
                                if (updatedFibersCount > 10) {
                                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                                }
                                currentTransition._updatedFibers.clear();
                            }
                        }
                    }
                }
                function mountTransition() {
                    var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
                    var start = startTransition.bind(null, setPending);
                    var hook = mountWorkInProgressHook();
                    hook.memoizedState = start;
                    return [
                        isPending,
                        start
                    ];
                }
                function updateTransition() {
                    var _updateState = updateState(), isPending = _updateState[0];
                    var hook = updateWorkInProgressHook();
                    var start = hook.memoizedState;
                    return [
                        isPending,
                        start
                    ];
                }
                function rerenderTransition() {
                    var _rerenderState = rerenderState(), isPending = _rerenderState[0];
                    var hook = updateWorkInProgressHook();
                    var start = hook.memoizedState;
                    return [
                        isPending,
                        start
                    ];
                }
                var isUpdatingOpaqueValueInRenderPhase = false;
                function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
                    {
                        return isUpdatingOpaqueValueInRenderPhase;
                    }
                }
                function mountId() {
                    var hook = mountWorkInProgressHook();
                    var root2 = getWorkInProgressRoot();
                    var identifierPrefix = root2.identifierPrefix;
                    var id;
                    if (getIsHydrating()) {
                        var treeId = getTreeId();
                        id = ":" + identifierPrefix + "R" + treeId;
                        var localId = localIdCounter++;
                        if (localId > 0) {
                            id += "H" + localId.toString(32);
                        }
                        id += ":";
                    } else {
                        var globalClientId = globalClientIdCounter++;
                        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
                    }
                    hook.memoizedState = id;
                    return id;
                }
                function updateId() {
                    var hook = updateWorkInProgressHook();
                    var id = hook.memoizedState;
                    return id;
                }
                function dispatchReducerAction(fiber, queue, action) {
                    {
                        if (typeof arguments[3] === "function") {
                            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
                        }
                    }
                    var lane = requestUpdateLane(fiber);
                    var update = {
                        lane: lane,
                        action: action,
                        hasEagerState: false,
                        eagerState: null,
                        next: null
                    };
                    if (isRenderPhaseUpdate(fiber)) {
                        enqueueRenderPhaseUpdate(queue, update);
                    } else {
                        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
                        if (root2 !== null) {
                            var eventTime = requestEventTime();
                            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                            entangleTransitionUpdate(root2, queue, lane);
                        }
                    }
                    markUpdateInDevTools(fiber, lane);
                }
                function dispatchSetState(fiber, queue, action) {
                    {
                        if (typeof arguments[3] === "function") {
                            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
                        }
                    }
                    var lane = requestUpdateLane(fiber);
                    var update = {
                        lane: lane,
                        action: action,
                        hasEagerState: false,
                        eagerState: null,
                        next: null
                    };
                    if (isRenderPhaseUpdate(fiber)) {
                        enqueueRenderPhaseUpdate(queue, update);
                    } else {
                        var alternate = fiber.alternate;
                        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                            var lastRenderedReducer = queue.lastRenderedReducer;
                            if (lastRenderedReducer !== null) {
                                var prevDispatcher;
                                {
                                    prevDispatcher = ReactCurrentDispatcher$1.current;
                                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                                }
                                try {
                                    var currentState = queue.lastRenderedState;
                                    var eagerState = lastRenderedReducer(currentState, action);
                                    update.hasEagerState = true;
                                    update.eagerState = eagerState;
                                    if (objectIs(eagerState, currentState)) {
                                        enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                                        return;
                                    }
                                } catch (error2) {} finally{
                                    {
                                        ReactCurrentDispatcher$1.current = prevDispatcher;
                                    }
                                }
                            }
                        }
                        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
                        if (root2 !== null) {
                            var eventTime = requestEventTime();
                            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                            entangleTransitionUpdate(root2, queue, lane);
                        }
                    }
                    markUpdateInDevTools(fiber, lane);
                }
                function isRenderPhaseUpdate(fiber) {
                    var alternate = fiber.alternate;
                    return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
                }
                function enqueueRenderPhaseUpdate(queue, update) {
                    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
                    var pending = queue.pending;
                    if (pending === null) {
                        update.next = update;
                    } else {
                        update.next = pending.next;
                        pending.next = update;
                    }
                    queue.pending = update;
                }
                function entangleTransitionUpdate(root2, queue, lane) {
                    if (isTransitionLane(lane)) {
                        var queueLanes = queue.lanes;
                        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
                        var newQueueLanes = mergeLanes(queueLanes, lane);
                        queue.lanes = newQueueLanes;
                        markRootEntangled(root2, newQueueLanes);
                    }
                }
                function markUpdateInDevTools(fiber, lane, action) {
                    {
                        markStateUpdateScheduled(fiber, lane);
                    }
                }
                var ContextOnlyDispatcher = {
                    readContext: readContext,
                    useCallback: throwInvalidHookError,
                    useContext: throwInvalidHookError,
                    useEffect: throwInvalidHookError,
                    useImperativeHandle: throwInvalidHookError,
                    useInsertionEffect: throwInvalidHookError,
                    useLayoutEffect: throwInvalidHookError,
                    useMemo: throwInvalidHookError,
                    useReducer: throwInvalidHookError,
                    useRef: throwInvalidHookError,
                    useState: throwInvalidHookError,
                    useDebugValue: throwInvalidHookError,
                    useDeferredValue: throwInvalidHookError,
                    useTransition: throwInvalidHookError,
                    useMutableSource: throwInvalidHookError,
                    useSyncExternalStore: throwInvalidHookError,
                    useId: throwInvalidHookError,
                    unstable_isNewReconciler: enableNewReconciler
                };
                var HooksDispatcherOnMountInDEV = null;
                var HooksDispatcherOnMountWithHookTypesInDEV = null;
                var HooksDispatcherOnUpdateInDEV = null;
                var HooksDispatcherOnRerenderInDEV = null;
                var InvalidNestedHooksDispatcherOnMountInDEV = null;
                var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
                var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
                {
                    var warnInvalidContextAccess = function warnInvalidContextAccess() {
                        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                    };
                    var warnInvalidHookAccess = function warnInvalidHookAccess() {
                        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
                    };
                    HooksDispatcherOnMountInDEV = {
                        readContext: function readContext1(context) {
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            mountHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            mountHookTypesDev();
                            checkDepsAreArrayDev(deps);
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            mountHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            mountHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            mountHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            mountHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            mountHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            mountHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            mountHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnMountWithHookTypesInDEV = {
                        readContext: function readContext1(context) {
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return mountCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnUpdateInDEV = {
                        readContext: function readContext1(context) {
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return updateDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return updateTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    HooksDispatcherOnRerenderInDEV = {
                        readContext: function readContext1(context) {
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return rerenderReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                            try {
                                return rerenderState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            updateHookTypesDev();
                            return rerenderDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            updateHookTypesDev();
                            return rerenderTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnMountInDEV = {
                        readContext: function readContext1(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountRef(initialValue);
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                            try {
                                return mountState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            mountHookTypesDev();
                            return mountId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnUpdateInDEV = {
                        readContext: function readContext1(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                    InvalidNestedHooksDispatcherOnRerenderInDEV = {
                        readContext: function readContext1(context) {
                            warnInvalidContextAccess();
                            return readContext(context);
                        },
                        useCallback: function useCallback(callback, deps) {
                            currentHookNameInDev = "useCallback";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateCallback(callback, deps);
                        },
                        useContext: function useContext(context) {
                            currentHookNameInDev = "useContext";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return readContext(context);
                        },
                        useEffect: function useEffect(create, deps) {
                            currentHookNameInDev = "useEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateEffect(create, deps);
                        },
                        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
                            currentHookNameInDev = "useImperativeHandle";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateImperativeHandle(ref, create, deps);
                        },
                        useInsertionEffect: function useInsertionEffect(create, deps) {
                            currentHookNameInDev = "useInsertionEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateInsertionEffect(create, deps);
                        },
                        useLayoutEffect: function useLayoutEffect(create, deps) {
                            currentHookNameInDev = "useLayoutEffect";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateLayoutEffect(create, deps);
                        },
                        useMemo: function useMemo(create, deps) {
                            currentHookNameInDev = "useMemo";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return updateMemo(create, deps);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useReducer: function useReducer(reducer, initialArg, init) {
                            currentHookNameInDev = "useReducer";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return rerenderReducer(reducer, initialArg, init);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useRef: function useRef(initialValue) {
                            currentHookNameInDev = "useRef";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateRef();
                        },
                        useState: function useState(initialState) {
                            currentHookNameInDev = "useState";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            var prevDispatcher = ReactCurrentDispatcher$1.current;
                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                            try {
                                return rerenderState(initialState);
                            } finally{
                                ReactCurrentDispatcher$1.current = prevDispatcher;
                            }
                        },
                        useDebugValue: function useDebugValue(value, formatterFn) {
                            currentHookNameInDev = "useDebugValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateDebugValue();
                        },
                        useDeferredValue: function useDeferredValue(value) {
                            currentHookNameInDev = "useDeferredValue";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return rerenderDeferredValue(value);
                        },
                        useTransition: function useTransition() {
                            currentHookNameInDev = "useTransition";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return rerenderTransition();
                        },
                        useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
                            currentHookNameInDev = "useMutableSource";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateMutableSource();
                        },
                        useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                            currentHookNameInDev = "useSyncExternalStore";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateSyncExternalStore(subscribe, getSnapshot);
                        },
                        useId: function useId() {
                            currentHookNameInDev = "useId";
                            warnInvalidHookAccess();
                            updateHookTypesDev();
                            return updateId();
                        },
                        unstable_isNewReconciler: enableNewReconciler
                    };
                }
                var now$1 = Scheduler.unstable_now;
                var commitTime = 0;
                var layoutEffectStartTime = -1;
                var profilerStartTime = -1;
                var passiveEffectStartTime = -1;
                var currentUpdateIsNested = false;
                var nestedUpdateScheduled = false;
                function isCurrentUpdateNested() {
                    return currentUpdateIsNested;
                }
                function markNestedUpdateScheduled() {
                    {
                        nestedUpdateScheduled = true;
                    }
                }
                function resetNestedUpdateFlag() {
                    {
                        currentUpdateIsNested = false;
                        nestedUpdateScheduled = false;
                    }
                }
                function syncNestedUpdateFlag() {
                    {
                        currentUpdateIsNested = nestedUpdateScheduled;
                        nestedUpdateScheduled = false;
                    }
                }
                function getCommitTime() {
                    return commitTime;
                }
                function recordCommitTime() {
                    commitTime = now$1();
                }
                function startProfilerTimer(fiber) {
                    profilerStartTime = now$1();
                    if (fiber.actualStartTime < 0) {
                        fiber.actualStartTime = now$1();
                    }
                }
                function stopProfilerTimerIfRunning(fiber) {
                    profilerStartTime = -1;
                }
                function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
                    if (profilerStartTime >= 0) {
                        var elapsedTime = now$1() - profilerStartTime;
                        fiber.actualDuration += elapsedTime;
                        if (overrideBaseTime) {
                            fiber.selfBaseDuration = elapsedTime;
                        }
                        profilerStartTime = -1;
                    }
                }
                function recordLayoutEffectDuration(fiber) {
                    if (layoutEffectStartTime >= 0) {
                        var elapsedTime = now$1() - layoutEffectStartTime;
                        layoutEffectStartTime = -1;
                        var parentFiber = fiber.return;
                        while(parentFiber !== null){
                            switch(parentFiber.tag){
                                case HostRoot:
                                    var root2 = parentFiber.stateNode;
                                    root2.effectDuration += elapsedTime;
                                    return;
                                case Profiler:
                                    var parentStateNode = parentFiber.stateNode;
                                    parentStateNode.effectDuration += elapsedTime;
                                    return;
                            }
                            parentFiber = parentFiber.return;
                        }
                    }
                }
                function recordPassiveEffectDuration(fiber) {
                    if (passiveEffectStartTime >= 0) {
                        var elapsedTime = now$1() - passiveEffectStartTime;
                        passiveEffectStartTime = -1;
                        var parentFiber = fiber.return;
                        while(parentFiber !== null){
                            switch(parentFiber.tag){
                                case HostRoot:
                                    var root2 = parentFiber.stateNode;
                                    if (root2 !== null) {
                                        root2.passiveEffectDuration += elapsedTime;
                                    }
                                    return;
                                case Profiler:
                                    var parentStateNode = parentFiber.stateNode;
                                    if (parentStateNode !== null) {
                                        parentStateNode.passiveEffectDuration += elapsedTime;
                                    }
                                    return;
                            }
                            parentFiber = parentFiber.return;
                        }
                    }
                }
                function startLayoutEffectTimer() {
                    layoutEffectStartTime = now$1();
                }
                function startPassiveEffectTimer() {
                    passiveEffectStartTime = now$1();
                }
                function transferActualDuration(fiber) {
                    var child = fiber.child;
                    while(child){
                        fiber.actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                }
                function resolveDefaultProps(Component3, baseProps) {
                    if (Component3 && Component3.defaultProps) {
                        var props = assign2({}, baseProps);
                        var defaultProps = Component3.defaultProps;
                        for(var propName in defaultProps){
                            if (props[propName] === void 0) {
                                props[propName] = defaultProps[propName];
                            }
                        }
                        return props;
                    }
                    return baseProps;
                }
                var fakeInternalInstance = {};
                var didWarnAboutStateAssignmentForComponent;
                var didWarnAboutUninitializedState;
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
                var didWarnAboutLegacyLifecyclesAndDerivedState;
                var didWarnAboutUndefinedDerivedState;
                var warnOnUndefinedDerivedState;
                var warnOnInvalidCallback;
                var didWarnAboutDirectlyAssigningPropsToState;
                var didWarnAboutContextTypeAndContextTypes;
                var didWarnAboutInvalidateContextType;
                var didWarnAboutLegacyContext$1;
                {
                    didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
                    didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
                    didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
                    didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
                    didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
                    didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
                    didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
                    didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
                    var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
                    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
                        if (callback === null || typeof callback === "function") {
                            return;
                        }
                        var key = callerName + "_" + callback;
                        if (!didWarnOnInvalidCallback.has(key)) {
                            didWarnOnInvalidCallback.add(key);
                            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
                        }
                    };
                    warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
                        if (partialState === void 0) {
                            var componentName = getComponentNameFromType(type) || "Component";
                            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                                didWarnAboutUndefinedDerivedState.add(componentName);
                                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                            }
                        }
                    };
                    Object.defineProperty(fakeInternalInstance, "_processChildContext", {
                        enumerable: false,
                        value: function value() {
                            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                        }
                    });
                    Object.freeze(fakeInternalInstance);
                }
                function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
                    var prevState = workInProgress2.memoizedState;
                    var partialState = getDerivedStateFromProps(nextProps, prevState);
                    {
                        if (workInProgress2.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                partialState = getDerivedStateFromProps(nextProps, prevState);
                            } finally{
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        warnOnUndefinedDerivedState(ctor, partialState);
                    }
                    var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
                    workInProgress2.memoizedState = memoizedState;
                    if (workInProgress2.lanes === NoLanes) {
                        var updateQueue = workInProgress2.updateQueue;
                        updateQueue.baseState = memoizedState;
                    }
                }
                var classComponentUpdater = {
                    isMounted: isMounted,
                    enqueueSetState: function enqueueSetState(inst, payload, callback) {
                        var fiber = get2(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.payload = payload;
                        if (callback !== void 0 && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "setState");
                            }
                            update.callback = callback;
                        }
                        var root2 = enqueueUpdate(fiber, update, lane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                            entangleTransitions(root2, fiber, lane);
                        }
                        {
                            markStateUpdateScheduled(fiber, lane);
                        }
                    },
                    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
                        var fiber = get2(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.tag = ReplaceState;
                        update.payload = payload;
                        if (callback !== void 0 && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "replaceState");
                            }
                            update.callback = callback;
                        }
                        var root2 = enqueueUpdate(fiber, update, lane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                            entangleTransitions(root2, fiber, lane);
                        }
                        {
                            markStateUpdateScheduled(fiber, lane);
                        }
                    },
                    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
                        var fiber = get2(inst);
                        var eventTime = requestEventTime();
                        var lane = requestUpdateLane(fiber);
                        var update = createUpdate(eventTime, lane);
                        update.tag = ForceUpdate;
                        if (callback !== void 0 && callback !== null) {
                            {
                                warnOnInvalidCallback(callback, "forceUpdate");
                            }
                            update.callback = callback;
                        }
                        var root2 = enqueueUpdate(fiber, update, lane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                            entangleTransitions(root2, fiber, lane);
                        }
                        {
                            markForceUpdateScheduled(fiber, lane);
                        }
                    }
                };
                function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
                    var instance = workInProgress2.stateNode;
                    if (typeof instance.shouldComponentUpdate === "function") {
                        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                        {
                            if (workInProgress2.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                                } finally{
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                            if (shouldUpdate === void 0) {
                                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                            }
                        }
                        return shouldUpdate;
                    }
                    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                    }
                    return true;
                }
                function checkClassInstance(workInProgress2, ctor, newProps) {
                    var instance = workInProgress2.stateNode;
                    {
                        var name = getComponentNameFromType(ctor) || "Component";
                        var renderPresent = instance.render;
                        if (!renderPresent) {
                            if (ctor.prototype && typeof ctor.prototype.render === "function") {
                                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                            } else {
                                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                            }
                        }
                        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
                        }
                        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
                        }
                        if (instance.propTypes) {
                            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
                        }
                        if (instance.contextType) {
                            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
                        }
                        {
                            if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                            // this one.
                            (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                                didWarnAboutLegacyContext$1.add(ctor);
                                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                            }
                            if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                            // this one.
                            (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                                didWarnAboutLegacyContext$1.add(ctor);
                                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                            }
                            if (instance.contextTypes) {
                                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                            }
                            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                                didWarnAboutContextTypeAndContextTypes.add(ctor);
                                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                            }
                        }
                        if (typeof instance.componentShouldUpdate === "function") {
                            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
                        }
                        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
                        }
                        if (typeof instance.componentDidUnmount === "function") {
                            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
                        }
                        if (typeof instance.componentDidReceiveProps === "function") {
                            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
                        }
                        if (typeof instance.componentWillRecieveProps === "function") {
                            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
                        }
                        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
                        }
                        var hasMutatedProps = instance.props !== newProps;
                        if (instance.props !== void 0 && hasMutatedProps) {
                            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
                        }
                        if (instance.defaultProps) {
                            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
                        }
                        if (typeof instance.getDerivedStateFromProps === "function") {
                            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
                        }
                        if (typeof instance.getDerivedStateFromError === "function") {
                            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
                        }
                        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
                        }
                        var _state = instance.state;
                        if (_state && ((typeof _state === "undefined" ? "undefined" : _type_of(_state)) !== "object" || isArray(_state))) {
                            error("%s.state: must be set to an object or null", name);
                        }
                        if (typeof instance.getChildContext === "function" && _type_of(ctor.childContextTypes) !== "object") {
                            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
                        }
                    }
                }
                function adoptClassInstance(workInProgress2, instance) {
                    instance.updater = classComponentUpdater;
                    workInProgress2.stateNode = instance;
                    set2(instance, workInProgress2);
                    {
                        instance._reactInternalInstance = fakeInternalInstance;
                    }
                }
                function constructClassInstance(workInProgress2, ctor, props) {
                    var isLegacyContextConsumer = false;
                    var unmaskedContext = emptyContextObject;
                    var context = emptyContextObject;
                    var contextType = ctor.contextType;
                    {
                        if ("contextType" in ctor) {
                            var isValid = // Allow null for conditional declaration
                            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                                didWarnAboutInvalidateContextType.add(ctor);
                                var addendum = "";
                                if (contextType === void 0) {
                                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                                } else if ((typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) !== "object") {
                                    addendum = " However, it is set to a " + (typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) + ".";
                                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                                    addendum = " Did you accidentally pass the Context.Provider instead?";
                                } else if (contextType._context !== void 0) {
                                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                                } else {
                                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                                }
                                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                            }
                        }
                    }
                    if ((typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) === "object" && contextType !== null) {
                        context = readContext(contextType);
                    } else {
                        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
                        var contextTypes = ctor.contextTypes;
                        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
                        context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
                    }
                    var instance = new ctor(props, context);
                    {
                        if (workInProgress2.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                instance = new ctor(props, context);
                            } finally{
                                setIsStrictModeForDevtools(false);
                            }
                        }
                    }
                    var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
                    adoptClassInstance(workInProgress2, instance);
                    {
                        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                            var componentName = getComponentNameFromType(ctor) || "Component";
                            if (!didWarnAboutUninitializedState.has(componentName)) {
                                didWarnAboutUninitializedState.add(componentName);
                                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                            }
                        }
                        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                            var foundWillMountName = null;
                            var foundWillReceivePropsName = null;
                            var foundWillUpdateName = null;
                            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                                foundWillMountName = "componentWillMount";
                            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                                foundWillMountName = "UNSAFE_componentWillMount";
                            }
                            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                                foundWillReceivePropsName = "componentWillReceiveProps";
                            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                            }
                            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                                foundWillUpdateName = "componentWillUpdate";
                            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                                foundWillUpdateName = "UNSAFE_componentWillUpdate";
                            }
                            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                                var _componentName = getComponentNameFromType(ctor) || "Component";
                                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                                }
                            }
                        }
                    }
                    if (isLegacyContextConsumer) {
                        cacheContext(workInProgress2, unmaskedContext, context);
                    }
                    return instance;
                }
                function callComponentWillMount(workInProgress2, instance) {
                    var oldState = instance.state;
                    if (typeof instance.componentWillMount === "function") {
                        instance.componentWillMount();
                    }
                    if (typeof instance.UNSAFE_componentWillMount === "function") {
                        instance.UNSAFE_componentWillMount();
                    }
                    if (oldState !== instance.state) {
                        {
                            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
                        }
                        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                    }
                }
                function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
                    var oldState = instance.state;
                    if (typeof instance.componentWillReceiveProps === "function") {
                        instance.componentWillReceiveProps(newProps, nextContext);
                    }
                    if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
                    }
                    if (instance.state !== oldState) {
                        {
                            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                                didWarnAboutStateAssignmentForComponent.add(componentName);
                                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                            }
                        }
                        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                    }
                }
                function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
                    {
                        checkClassInstance(workInProgress2, ctor, newProps);
                    }
                    var instance = workInProgress2.stateNode;
                    instance.props = newProps;
                    instance.state = workInProgress2.memoizedState;
                    instance.refs = {};
                    initializeUpdateQueue(workInProgress2);
                    var contextType = ctor.contextType;
                    if ((typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) === "object" && contextType !== null) {
                        instance.context = readContext(contextType);
                    } else {
                        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
                        instance.context = getMaskedContext(workInProgress2, unmaskedContext);
                    }
                    {
                        if (instance.state === newProps) {
                            var componentName = getComponentNameFromType(ctor) || "Component";
                            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                            }
                        }
                        if (workInProgress2.mode & StrictLegacyMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
                        }
                        {
                            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
                        }
                    }
                    instance.state = workInProgress2.memoizedState;
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
                        instance.state = workInProgress2.memoizedState;
                    }
                    if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                        callComponentWillMount(workInProgress2, instance);
                        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
                        instance.state = workInProgress2.memoizedState;
                    }
                    if (typeof instance.componentDidMount === "function") {
                        var fiberFlags = Update;
                        {
                            fiberFlags |= LayoutStatic;
                        }
                        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                            fiberFlags |= MountLayoutDev;
                        }
                        workInProgress2.flags |= fiberFlags;
                    }
                }
                function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
                    var instance = workInProgress2.stateNode;
                    var oldProps = workInProgress2.memoizedProps;
                    instance.props = oldProps;
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if ((typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) === "object" && contextType !== null) {
                        nextContext = readContext(contextType);
                    } else {
                        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
                        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
                        if (oldProps !== newProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress2.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
                    newState = workInProgress2.memoizedState;
                    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                        if (typeof instance.componentDidMount === "function") {
                            var fiberFlags = Update;
                            {
                                fiberFlags |= LayoutStatic;
                            }
                            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                                fiberFlags |= MountLayoutDev;
                            }
                            workInProgress2.flags |= fiberFlags;
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress2.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                            if (typeof instance.componentWillMount === "function") {
                                instance.componentWillMount();
                            }
                            if (typeof instance.UNSAFE_componentWillMount === "function") {
                                instance.UNSAFE_componentWillMount();
                            }
                        }
                        if (typeof instance.componentDidMount === "function") {
                            var _fiberFlags = Update;
                            {
                                _fiberFlags |= LayoutStatic;
                            }
                            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                                _fiberFlags |= MountLayoutDev;
                            }
                            workInProgress2.flags |= _fiberFlags;
                        }
                    } else {
                        if (typeof instance.componentDidMount === "function") {
                            var _fiberFlags2 = Update;
                            {
                                _fiberFlags2 |= LayoutStatic;
                            }
                            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                                _fiberFlags2 |= MountLayoutDev;
                            }
                            workInProgress2.flags |= _fiberFlags2;
                        }
                        workInProgress2.memoizedProps = newProps;
                        workInProgress2.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
                    var instance = workInProgress2.stateNode;
                    cloneUpdateQueue(current2, workInProgress2);
                    var unresolvedOldProps = workInProgress2.memoizedProps;
                    var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
                    instance.props = oldProps;
                    var unresolvedNewProps = workInProgress2.pendingProps;
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if ((typeof contextType === "undefined" ? "undefined" : _type_of(contextType)) === "object" && contextType !== null) {
                        nextContext = readContext(contextType);
                    } else {
                        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
                        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
                        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress2.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
                    newState = workInProgress2.memoizedState;
                    if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
                        if (typeof instance.componentDidUpdate === "function") {
                            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                                workInProgress2.flags |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                                workInProgress2.flags |= Snapshot;
                            }
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === "function") {
                        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress2.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
                    // both before and after `shouldComponentUpdate` has been called. Not ideal,
                    // but I'm loath to refactor this function. This only happens for memoized
                    // components so it's not that common.
                    enableLazyContextPropagation;
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                            if (typeof instance.componentWillUpdate === "function") {
                                instance.componentWillUpdate(newProps, newState, nextContext);
                            }
                            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                            }
                        }
                        if (typeof instance.componentDidUpdate === "function") {
                            workInProgress2.flags |= Update;
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            workInProgress2.flags |= Snapshot;
                        }
                    } else {
                        if (typeof instance.componentDidUpdate === "function") {
                            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                                workInProgress2.flags |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === "function") {
                            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                                workInProgress2.flags |= Snapshot;
                            }
                        }
                        workInProgress2.memoizedProps = newProps;
                        workInProgress2.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                function createCapturedValueAtFiber(value, source) {
                    return {
                        value: value,
                        source: source,
                        stack: getStackByFiberInDevAndProd(source),
                        digest: null
                    };
                }
                function createCapturedValue(value, digest, stack) {
                    return {
                        value: value,
                        source: null,
                        stack: stack != null ? stack : null,
                        digest: digest != null ? digest : null
                    };
                }
                function showErrorDialog(boundary, errorInfo) {
                    return true;
                }
                function logCapturedError(boundary, errorInfo) {
                    try {
                        var logError = showErrorDialog(boundary, errorInfo);
                        if (logError === false) {
                            return;
                        }
                        var error2 = errorInfo.value;
                        if (true) {
                            var source = errorInfo.source;
                            var stack = errorInfo.stack;
                            var componentStack = stack !== null ? stack : "";
                            if (error2 != null && error2._suppressLogging) {
                                if (boundary.tag === ClassComponent) {
                                    return;
                                }
                                console["error"](error2);
                            }
                            var componentName = source ? getComponentNameFromFiber(source) : null;
                            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                            var errorBoundaryMessage;
                            if (boundary.tag === HostRoot) {
                                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                            } else {
                                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                            }
                            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                            console["error"](combinedMessage);
                        } else {
                            console["error"](error2);
                        }
                    } catch (e) {
                        setTimeout(function() {
                            throw e;
                        });
                    }
                }
                var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
                function createRootErrorUpdate(fiber, errorInfo, lane) {
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = CaptureUpdate;
                    update.payload = {
                        element: null
                    };
                    var error2 = errorInfo.value;
                    update.callback = function() {
                        onUncaughtError(error2);
                        logCapturedError(fiber, errorInfo);
                    };
                    return update;
                }
                function createClassErrorUpdate(fiber, errorInfo, lane) {
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = CaptureUpdate;
                    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
                    if (typeof getDerivedStateFromError === "function") {
                        var error$1 = errorInfo.value;
                        update.payload = function() {
                            return getDerivedStateFromError(error$1);
                        };
                        update.callback = function() {
                            {
                                markFailedErrorBoundaryForHotReloading(fiber);
                            }
                            logCapturedError(fiber, errorInfo);
                        };
                    }
                    var inst = fiber.stateNode;
                    if (inst !== null && typeof inst.componentDidCatch === "function") {
                        update.callback = function callback() {
                            {
                                markFailedErrorBoundaryForHotReloading(fiber);
                            }
                            logCapturedError(fiber, errorInfo);
                            if (typeof getDerivedStateFromError !== "function") {
                                markLegacyErrorBoundaryAsFailed(this);
                            }
                            var error$12 = errorInfo.value;
                            var stack = errorInfo.stack;
                            this.componentDidCatch(error$12, {
                                componentStack: stack !== null ? stack : ""
                            });
                            {
                                if (typeof getDerivedStateFromError !== "function") {
                                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                                        error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                                    }
                                }
                            }
                        };
                    }
                    return update;
                }
                function attachPingListener(root2, wakeable, lanes) {
                    var pingCache = root2.pingCache;
                    var threadIDs;
                    if (pingCache === null) {
                        pingCache = root2.pingCache = new PossiblyWeakMap$1();
                        threadIDs = /* @__PURE__ */ new Set();
                        pingCache.set(wakeable, threadIDs);
                    } else {
                        threadIDs = pingCache.get(wakeable);
                        if (threadIDs === void 0) {
                            threadIDs = /* @__PURE__ */ new Set();
                            pingCache.set(wakeable, threadIDs);
                        }
                    }
                    if (!threadIDs.has(lanes)) {
                        threadIDs.add(lanes);
                        var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
                        {
                            if (isDevToolsPresent) {
                                restorePendingUpdaters(root2, lanes);
                            }
                        }
                        wakeable.then(ping, ping);
                    }
                }
                function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
                    var wakeables = suspenseBoundary.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = /* @__PURE__ */ new Set();
                        updateQueue.add(wakeable);
                        suspenseBoundary.updateQueue = updateQueue;
                    } else {
                        wakeables.add(wakeable);
                    }
                }
                function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
                    var tag = sourceFiber.tag;
                    if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
                        var currentSource = sourceFiber.alternate;
                        if (currentSource) {
                            sourceFiber.updateQueue = currentSource.updateQueue;
                            sourceFiber.memoizedState = currentSource.memoizedState;
                            sourceFiber.lanes = currentSource.lanes;
                        } else {
                            sourceFiber.updateQueue = null;
                            sourceFiber.memoizedState = null;
                        }
                    }
                }
                function getNearestSuspenseBoundaryToCapture(returnFiber) {
                    var node2 = returnFiber;
                    do {
                        if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                            return node2;
                        }
                        node2 = node2.return;
                    }while (node2 !== null);
                    return null;
                }
                function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
                    if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
                        if (suspenseBoundary === returnFiber) {
                            suspenseBoundary.flags |= ShouldCapture;
                        } else {
                            suspenseBoundary.flags |= DidCapture;
                            sourceFiber.flags |= ForceUpdateForLegacySuspense;
                            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                            if (sourceFiber.tag === ClassComponent) {
                                var currentSourceFiber = sourceFiber.alternate;
                                if (currentSourceFiber === null) {
                                    sourceFiber.tag = IncompleteClassComponent;
                                } else {
                                    var update = createUpdate(NoTimestamp, SyncLane);
                                    update.tag = ForceUpdate;
                                    enqueueUpdate(sourceFiber, update, SyncLane);
                                }
                            }
                            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                        }
                        return suspenseBoundary;
                    }
                    suspenseBoundary.flags |= ShouldCapture;
                    suspenseBoundary.lanes = rootRenderLanes;
                    return suspenseBoundary;
                }
                function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
                    sourceFiber.flags |= Incomplete;
                    {
                        if (isDevToolsPresent) {
                            restorePendingUpdaters(root2, rootRenderLanes);
                        }
                    }
                    if (value !== null && (typeof value === "undefined" ? "undefined" : _type_of(value)) === "object" && typeof value.then === "function") {
                        var wakeable = value;
                        resetSuspendedComponent(sourceFiber);
                        {
                            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                                markDidThrowWhileHydratingDEV();
                            }
                        }
                        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                        if (suspenseBoundary !== null) {
                            suspenseBoundary.flags &= ~ForceClientRender;
                            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                            if (suspenseBoundary.mode & ConcurrentMode) {
                                attachPingListener(root2, wakeable, rootRenderLanes);
                            }
                            attachRetryListener(suspenseBoundary, root2, wakeable);
                            return;
                        } else {
                            if (!includesSyncLane(rootRenderLanes)) {
                                attachPingListener(root2, wakeable, rootRenderLanes);
                                renderDidSuspendDelayIfPossible();
                                return;
                            }
                            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                            value = uncaughtSuspenseError;
                        }
                    } else {
                        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                            markDidThrowWhileHydratingDEV();
                            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                            if (_suspenseBoundary !== null) {
                                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                                    _suspenseBoundary.flags |= ForceClientRender;
                                }
                                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                                return;
                            }
                        }
                    }
                    value = createCapturedValueAtFiber(value, sourceFiber);
                    renderDidError(value);
                    var workInProgress2 = returnFiber;
                    do {
                        switch(workInProgress2.tag){
                            case HostRoot:
                                {
                                    var _errorInfo = value;
                                    workInProgress2.flags |= ShouldCapture;
                                    var lane = pickArbitraryLane(rootRenderLanes);
                                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                                    var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                                    enqueueCapturedUpdate(workInProgress2, update);
                                    return;
                                }
                            case ClassComponent:
                                var errorInfo = value;
                                var ctor = workInProgress2.type;
                                var instance = workInProgress2.stateNode;
                                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                                    workInProgress2.flags |= ShouldCapture;
                                    var _lane = pickArbitraryLane(rootRenderLanes);
                                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                                    enqueueCapturedUpdate(workInProgress2, _update);
                                    return;
                                }
                                break;
                        }
                        workInProgress2 = workInProgress2.return;
                    }while (workInProgress2 !== null);
                }
                function getSuspendedCache() {
                    {
                        return null;
                    }
                }
                var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
                var didReceiveUpdate = false;
                var didWarnAboutBadClass;
                var didWarnAboutModulePatternComponent;
                var didWarnAboutContextTypeOnFunctionComponent;
                var didWarnAboutGetDerivedStateOnFunctionComponent;
                var didWarnAboutFunctionRefs;
                var didWarnAboutReassigningProps;
                var didWarnAboutRevealOrder;
                var didWarnAboutTailOptions;
                var didWarnAboutDefaultPropsOnFunctionComponent;
                {
                    didWarnAboutBadClass = {};
                    didWarnAboutModulePatternComponent = {};
                    didWarnAboutContextTypeOnFunctionComponent = {};
                    didWarnAboutGetDerivedStateOnFunctionComponent = {};
                    didWarnAboutFunctionRefs = {};
                    didWarnAboutReassigningProps = false;
                    didWarnAboutRevealOrder = {};
                    didWarnAboutTailOptions = {};
                    didWarnAboutDefaultPropsOnFunctionComponent = {};
                }
                function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
                    if (current2 === null) {
                        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                    } else {
                        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
                    }
                }
                function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
                    workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
                    workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                }
                function updateForwardRef(current2, workInProgress2, Component3, nextProps, renderLanes2) {
                    {
                        if (workInProgress2.type !== workInProgress2.elementType) {
                            var innerPropTypes = Component3.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                                "prop", getComponentNameFromType(Component3));
                            }
                        }
                    }
                    var render3 = Component3.render;
                    var ref = workInProgress2.ref;
                    var nextChildren;
                    var hasId;
                    prepareToReadContext(workInProgress2, renderLanes2);
                    {
                        markComponentRenderStarted(workInProgress2);
                    }
                    {
                        ReactCurrentOwner$1.current = workInProgress2;
                        setIsRendering(true);
                        nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                        hasId = checkDidRenderIdHook();
                        if (workInProgress2.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                                hasId = checkDidRenderIdHook();
                            } finally{
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    if (current2 !== null && !didReceiveUpdate) {
                        bailoutHooks(current2, workInProgress2, renderLanes2);
                        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    }
                    if (getIsHydrating() && hasId) {
                        pushMaterializedTreeId(workInProgress2);
                    }
                    workInProgress2.flags |= PerformedWork;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateMemoComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
                    if (current2 === null) {
                        var type = Component3.type;
                        if (isSimpleFunctionComponent(type) && Component3.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
                        Component3.defaultProps === void 0) {
                            var resolvedType = type;
                            {
                                resolvedType = resolveFunctionForHotReloading(type);
                            }
                            workInProgress2.tag = SimpleMemoComponent;
                            workInProgress2.type = resolvedType;
                            {
                                validateFunctionComponentInDev(workInProgress2, type);
                            }
                            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
                        }
                        {
                            var innerPropTypes = type.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                                "prop", getComponentNameFromType(type));
                            }
                            if (Component3.defaultProps !== void 0) {
                                var componentName = getComponentNameFromType(type) || "Unknown";
                                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                                }
                            }
                        }
                        var child = createFiberFromTypeAndProps(Component3.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
                        child.ref = workInProgress2.ref;
                        child.return = workInProgress2;
                        workInProgress2.child = child;
                        return child;
                    }
                    {
                        var _type = Component3.type;
                        var _innerPropTypes = _type.propTypes;
                        if (_innerPropTypes) {
                            checkPropTypes(_innerPropTypes, nextProps, // Resolved props
                            "prop", getComponentNameFromType(_type));
                        }
                    }
                    var currentChild = current2.child;
                    var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                    if (!hasScheduledUpdateOrContext) {
                        var prevProps = currentChild.memoizedProps;
                        var compare = Component3.compare;
                        compare = compare !== null ? compare : shallowEqual;
                        if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        }
                    }
                    workInProgress2.flags |= PerformedWork;
                    var newChild = createWorkInProgress(currentChild, nextProps);
                    newChild.ref = workInProgress2.ref;
                    newChild.return = workInProgress2;
                    workInProgress2.child = newChild;
                    return newChild;
                }
                function updateSimpleMemoComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
                    {
                        if (workInProgress2.type !== workInProgress2.elementType) {
                            var outerMemoType = workInProgress2.elementType;
                            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                                var lazyComponent = outerMemoType;
                                var payload = lazyComponent._payload;
                                var init = lazyComponent._init;
                                try {
                                    outerMemoType = init(payload);
                                } catch (x) {
                                    outerMemoType = null;
                                }
                                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                                if (outerPropTypes) {
                                    checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                                    "prop", getComponentNameFromType(outerMemoType));
                                }
                            }
                        }
                    }
                    if (current2 !== null) {
                        var prevProps = current2.memoizedProps;
                        if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
                        workInProgress2.type === current2.type) {
                            didReceiveUpdate = false;
                            workInProgress2.pendingProps = nextProps = prevProps;
                            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                                workInProgress2.lanes = current2.lanes;
                                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                                didReceiveUpdate = true;
                            }
                        }
                    }
                    return updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2);
                }
                function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
                    var nextProps = workInProgress2.pendingProps;
                    var nextChildren = nextProps.children;
                    var prevState = current2 !== null ? current2.memoizedState : null;
                    if (nextProps.mode === "hidden" || enableLegacyHidden) {
                        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                            var nextState = {
                                baseLanes: NoLanes,
                                cachePool: null,
                                transitions: null
                            };
                            workInProgress2.memoizedState = nextState;
                            pushRenderLanes(workInProgress2, renderLanes2);
                        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                            var spawnedCachePool = null;
                            var nextBaseLanes;
                            if (prevState !== null) {
                                var prevBaseLanes = prevState.baseLanes;
                                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                            } else {
                                nextBaseLanes = renderLanes2;
                            }
                            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                            var _nextState = {
                                baseLanes: nextBaseLanes,
                                cachePool: spawnedCachePool,
                                transitions: null
                            };
                            workInProgress2.memoizedState = _nextState;
                            workInProgress2.updateQueue = null;
                            pushRenderLanes(workInProgress2, nextBaseLanes);
                            return null;
                        } else {
                            var _nextState2 = {
                                baseLanes: NoLanes,
                                cachePool: null,
                                transitions: null
                            };
                            workInProgress2.memoizedState = _nextState2;
                            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
                        }
                    } else {
                        var _subtreeRenderLanes;
                        if (prevState !== null) {
                            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                            workInProgress2.memoizedState = null;
                        } else {
                            _subtreeRenderLanes = renderLanes2;
                        }
                        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
                    }
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateFragment(current2, workInProgress2, renderLanes2) {
                    var nextChildren = workInProgress2.pendingProps;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateMode(current2, workInProgress2, renderLanes2) {
                    var nextChildren = workInProgress2.pendingProps.children;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateProfiler(current2, workInProgress2, renderLanes2) {
                    {
                        workInProgress2.flags |= Update;
                        {
                            var stateNode = workInProgress2.stateNode;
                            stateNode.effectDuration = 0;
                            stateNode.passiveEffectDuration = 0;
                        }
                    }
                    var nextProps = workInProgress2.pendingProps;
                    var nextChildren = nextProps.children;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function markRef(current2, workInProgress2) {
                    var ref = workInProgress2.ref;
                    if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
                        workInProgress2.flags |= Ref;
                        {
                            workInProgress2.flags |= RefStatic;
                        }
                    }
                }
                function updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
                    {
                        if (workInProgress2.type !== workInProgress2.elementType) {
                            var innerPropTypes = Component3.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                                "prop", getComponentNameFromType(Component3));
                            }
                        }
                    }
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, true);
                        context = getMaskedContext(workInProgress2, unmaskedContext);
                    }
                    var nextChildren;
                    var hasId;
                    prepareToReadContext(workInProgress2, renderLanes2);
                    {
                        markComponentRenderStarted(workInProgress2);
                    }
                    {
                        ReactCurrentOwner$1.current = workInProgress2;
                        setIsRendering(true);
                        nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
                        hasId = checkDidRenderIdHook();
                        if (workInProgress2.mode & StrictLegacyMode) {
                            setIsStrictModeForDevtools(true);
                            try {
                                nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
                                hasId = checkDidRenderIdHook();
                            } finally{
                                setIsStrictModeForDevtools(false);
                            }
                        }
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    if (current2 !== null && !didReceiveUpdate) {
                        bailoutHooks(current2, workInProgress2, renderLanes2);
                        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    }
                    if (getIsHydrating() && hasId) {
                        pushMaterializedTreeId(workInProgress2);
                    }
                    workInProgress2.flags |= PerformedWork;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateClassComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
                    {
                        switch(shouldError(workInProgress2)){
                            case false:
                                {
                                    var _instance = workInProgress2.stateNode;
                                    var ctor = workInProgress2.type;
                                    var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                                    var state = tempInstance.state;
                                    _instance.updater.enqueueSetState(_instance, state, null);
                                    break;
                                }
                            case true:
                                {
                                    workInProgress2.flags |= DidCapture;
                                    workInProgress2.flags |= ShouldCapture;
                                    var error$1 = new Error("Simulated error coming from DevTools");
                                    var lane = pickArbitraryLane(renderLanes2);
                                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                                    var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                                    enqueueCapturedUpdate(workInProgress2, update);
                                    break;
                                }
                        }
                        if (workInProgress2.type !== workInProgress2.elementType) {
                            var innerPropTypes = Component3.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                                "prop", getComponentNameFromType(Component3));
                            }
                        }
                    }
                    var hasContext;
                    if (isContextProvider(Component3)) {
                        hasContext = true;
                        pushContextProvider(workInProgress2);
                    } else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress2, renderLanes2);
                    var instance = workInProgress2.stateNode;
                    var shouldUpdate;
                    if (instance === null) {
                        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
                        constructClassInstance(workInProgress2, Component3, nextProps);
                        mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
                        shouldUpdate = true;
                    } else if (current2 === null) {
                        shouldUpdate = resumeMountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
                    } else {
                        shouldUpdate = updateClassInstance(current2, workInProgress2, Component3, nextProps, renderLanes2);
                    }
                    var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2);
                    {
                        var inst = workInProgress2.stateNode;
                        if (shouldUpdate && inst.props !== nextProps) {
                            if (!didWarnAboutReassigningProps) {
                                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                            }
                            didWarnAboutReassigningProps = true;
                        }
                    }
                    return nextUnitOfWork;
                }
                function finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2) {
                    markRef(current2, workInProgress2);
                    var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
                    if (!shouldUpdate && !didCaptureError) {
                        if (hasContext) {
                            invalidateContextProvider(workInProgress2, Component3, false);
                        }
                        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    }
                    var instance = workInProgress2.stateNode;
                    ReactCurrentOwner$1.current = workInProgress2;
                    var nextChildren;
                    if (didCaptureError && typeof Component3.getDerivedStateFromError !== "function") {
                        nextChildren = null;
                        {
                            stopProfilerTimerIfRunning();
                        }
                    } else {
                        {
                            markComponentRenderStarted(workInProgress2);
                        }
                        {
                            setIsRendering(true);
                            nextChildren = instance.render();
                            if (workInProgress2.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    instance.render();
                                } finally{
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                            setIsRendering(false);
                        }
                        {
                            markComponentRenderStopped();
                        }
                    }
                    workInProgress2.flags |= PerformedWork;
                    if (current2 !== null && didCaptureError) {
                        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
                    } else {
                        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    }
                    workInProgress2.memoizedState = instance.state;
                    if (hasContext) {
                        invalidateContextProvider(workInProgress2, Component3, true);
                    }
                    return workInProgress2.child;
                }
                function pushHostRootContext(workInProgress2) {
                    var root2 = workInProgress2.stateNode;
                    if (root2.pendingContext) {
                        pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
                    } else if (root2.context) {
                        pushTopLevelContextObject(workInProgress2, root2.context, false);
                    }
                    pushHostContainer(workInProgress2, root2.containerInfo);
                }
                function updateHostRoot(current2, workInProgress2, renderLanes2) {
                    pushHostRootContext(workInProgress2);
                    if (current2 === null) {
                        throw new Error("Should have a current fiber. This is a bug in React.");
                    }
                    var nextProps = workInProgress2.pendingProps;
                    var prevState = workInProgress2.memoizedState;
                    var prevChildren = prevState.element;
                    cloneUpdateQueue(current2, workInProgress2);
                    processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
                    var nextState = workInProgress2.memoizedState;
                    var root2 = workInProgress2.stateNode;
                    var nextChildren = nextState.element;
                    if (prevState.isDehydrated) {
                        var overrideState = {
                            element: nextChildren,
                            isDehydrated: false,
                            cache: nextState.cache,
                            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                            transitions: nextState.transitions
                        };
                        var updateQueue = workInProgress2.updateQueue;
                        updateQueue.baseState = overrideState;
                        workInProgress2.memoizedState = overrideState;
                        if (workInProgress2.flags & ForceClientRender) {
                            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
                        } else if (nextChildren !== prevChildren) {
                            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
                        } else {
                            enterHydrationState(workInProgress2);
                            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                            workInProgress2.child = child;
                            var node2 = child;
                            while(node2){
                                node2.flags = node2.flags & ~Placement | Hydrating;
                                node2 = node2.sibling;
                            }
                        }
                    } else {
                        resetHydrationState();
                        if (nextChildren === prevChildren) {
                            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        }
                        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    }
                    return workInProgress2.child;
                }
                function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
                    resetHydrationState();
                    queueHydrationError(recoverableError);
                    workInProgress2.flags |= ForceClientRender;
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateHostComponent(current2, workInProgress2, renderLanes2) {
                    pushHostContext(workInProgress2);
                    if (current2 === null) {
                        tryToClaimNextHydratableInstance(workInProgress2);
                    }
                    var type = workInProgress2.type;
                    var nextProps = workInProgress2.pendingProps;
                    var prevProps = current2 !== null ? current2.memoizedProps : null;
                    var nextChildren = nextProps.children;
                    var isDirectTextChild = shouldSetTextContent(type, nextProps);
                    if (isDirectTextChild) {
                        nextChildren = null;
                    } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                        workInProgress2.flags |= ContentReset;
                    }
                    markRef(current2, workInProgress2);
                    reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function updateHostText(current2, workInProgress2) {
                    if (current2 === null) {
                        tryToClaimNextHydratableInstance(workInProgress2);
                    }
                    return null;
                }
                function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
                    var props = workInProgress2.pendingProps;
                    var lazyComponent = elementType;
                    var payload = lazyComponent._payload;
                    var init = lazyComponent._init;
                    var Component3 = init(payload);
                    workInProgress2.type = Component3;
                    var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component3);
                    var resolvedProps = resolveDefaultProps(Component3, props);
                    var child;
                    switch(resolvedTag){
                        case FunctionComponent:
                            {
                                {
                                    validateFunctionComponentInDev(workInProgress2, Component3);
                                    workInProgress2.type = Component3 = resolveFunctionForHotReloading(Component3);
                                }
                                child = updateFunctionComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                                return child;
                            }
                        case ClassComponent:
                            {
                                {
                                    workInProgress2.type = Component3 = resolveClassForHotReloading(Component3);
                                }
                                child = updateClassComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                                return child;
                            }
                        case ForwardRef2:
                            {
                                {
                                    workInProgress2.type = Component3 = resolveForwardRefForHotReloading(Component3);
                                }
                                child = updateForwardRef(null, workInProgress2, Component3, resolvedProps, renderLanes2);
                                return child;
                            }
                        case MemoComponent:
                            {
                                {
                                    if (workInProgress2.type !== workInProgress2.elementType) {
                                        var outerPropTypes = Component3.propTypes;
                                        if (outerPropTypes) {
                                            checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                                            "prop", getComponentNameFromType(Component3));
                                        }
                                    }
                                }
                                child = updateMemoComponent(null, workInProgress2, Component3, resolveDefaultProps(Component3.type, resolvedProps), // The inner type can have defaults too
                                renderLanes2);
                                return child;
                            }
                    }
                    var hint = "";
                    {
                        if (Component3 !== null && (typeof Component3 === "undefined" ? "undefined" : _type_of(Component3)) === "object" && Component3.$$typeof === REACT_LAZY_TYPE) {
                            hint = " Did you wrap a component in React.lazy() more than once?";
                        }
                    }
                    throw new Error("Element type is invalid. Received a promise that resolves to: " + Component3 + ". " + ("Lazy element type must resolve to a class or function." + hint));
                }
                function mountIncompleteClassComponent(_current, workInProgress2, Component3, nextProps, renderLanes2) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
                    workInProgress2.tag = ClassComponent;
                    var hasContext;
                    if (isContextProvider(Component3)) {
                        hasContext = true;
                        pushContextProvider(workInProgress2);
                    } else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress2, renderLanes2);
                    constructClassInstance(workInProgress2, Component3, nextProps);
                    mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
                    return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
                }
                function mountIndeterminateComponent(_current, workInProgress2, Component3, renderLanes2) {
                    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
                    var props = workInProgress2.pendingProps;
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, false);
                        context = getMaskedContext(workInProgress2, unmaskedContext);
                    }
                    prepareToReadContext(workInProgress2, renderLanes2);
                    var value;
                    var hasId;
                    {
                        markComponentRenderStarted(workInProgress2);
                    }
                    {
                        if (Component3.prototype && typeof Component3.prototype.render === "function") {
                            var componentName = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutBadClass[componentName]) {
                                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                                didWarnAboutBadClass[componentName] = true;
                            }
                        }
                        if (workInProgress2.mode & StrictLegacyMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
                        }
                        setIsRendering(true);
                        ReactCurrentOwner$1.current = workInProgress2;
                        value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
                        hasId = checkDidRenderIdHook();
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    workInProgress2.flags |= PerformedWork;
                    {
                        if ((typeof value === "undefined" ? "undefined" : _type_of(value)) === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                            var _componentName = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutModulePatternComponent[_componentName]) {
                                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                                didWarnAboutModulePatternComponent[_componentName] = true;
                            }
                        }
                    }
                    if (// Run these checks in production only if the flag is off.
                    // Eventually we'll delete this branch altogether.
                    (typeof value === "undefined" ? "undefined" : _type_of(value)) === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                        {
                            var _componentName2 = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                                didWarnAboutModulePatternComponent[_componentName2] = true;
                            }
                        }
                        workInProgress2.tag = ClassComponent;
                        workInProgress2.memoizedState = null;
                        workInProgress2.updateQueue = null;
                        var hasContext = false;
                        if (isContextProvider(Component3)) {
                            hasContext = true;
                            pushContextProvider(workInProgress2);
                        } else {
                            hasContext = false;
                        }
                        workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
                        initializeUpdateQueue(workInProgress2);
                        adoptClassInstance(workInProgress2, value);
                        mountClassInstance(workInProgress2, Component3, props, renderLanes2);
                        return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
                    } else {
                        workInProgress2.tag = FunctionComponent;
                        {
                            if (workInProgress2.mode & StrictLegacyMode) {
                                setIsStrictModeForDevtools(true);
                                try {
                                    value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
                                    hasId = checkDidRenderIdHook();
                                } finally{
                                    setIsStrictModeForDevtools(false);
                                }
                            }
                        }
                        if (getIsHydrating() && hasId) {
                            pushMaterializedTreeId(workInProgress2);
                        }
                        reconcileChildren(null, workInProgress2, value, renderLanes2);
                        {
                            validateFunctionComponentInDev(workInProgress2, Component3);
                        }
                        return workInProgress2.child;
                    }
                }
                function validateFunctionComponentInDev(workInProgress2, Component3) {
                    {
                        if (Component3) {
                            if (Component3.childContextTypes) {
                                error("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component");
                            }
                        }
                        if (workInProgress2.ref !== null) {
                            var info = "";
                            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                            if (ownerName) {
                                info += "\n\nCheck the render method of `" + ownerName + "`.";
                            }
                            var warningKey = ownerName || "";
                            var debugSource = workInProgress2._debugSource;
                            if (debugSource) {
                                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                            }
                            if (!didWarnAboutFunctionRefs[warningKey]) {
                                didWarnAboutFunctionRefs[warningKey] = true;
                                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                            }
                        }
                        if (Component3.defaultProps !== void 0) {
                            var componentName = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                            }
                        }
                        if (typeof Component3.getDerivedStateFromProps === "function") {
                            var _componentName3 = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                            }
                        }
                        if (_type_of(Component3.contextType) === "object" && Component3.contextType !== null) {
                            var _componentName4 = getComponentNameFromType(Component3) || "Unknown";
                            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                                error("%s: Function components do not support contextType.", _componentName4);
                                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                            }
                        }
                    }
                }
                var SUSPENDED_MARKER = {
                    dehydrated: null,
                    treeContext: null,
                    retryLane: NoLane
                };
                function mountSuspenseOffscreenState(renderLanes2) {
                    return {
                        baseLanes: renderLanes2,
                        cachePool: getSuspendedCache(),
                        transitions: null
                    };
                }
                function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
                    var cachePool = null;
                    return {
                        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
                        cachePool: cachePool,
                        transitions: prevOffscreenState.transitions
                    };
                }
                function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
                    if (current2 !== null) {
                        var suspenseState = current2.memoizedState;
                        if (suspenseState === null) {
                            return false;
                        }
                    }
                    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                }
                function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
                    return removeLanes(current2.childLanes, renderLanes2);
                }
                function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
                    var nextProps = workInProgress2.pendingProps;
                    {
                        if (shouldSuspend(workInProgress2)) {
                            workInProgress2.flags |= DidCapture;
                        }
                    }
                    var suspenseContext = suspenseStackCursor.current;
                    var showFallback = false;
                    var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
                    if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
                        showFallback = true;
                        workInProgress2.flags &= ~DidCapture;
                    } else {
                        if (current2 === null || current2.memoizedState !== null) {
                            {
                                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                            }
                        }
                    }
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress2, suspenseContext);
                    if (current2 === null) {
                        tryToClaimNextHydratableInstance(workInProgress2);
                        var suspenseState = workInProgress2.memoizedState;
                        if (suspenseState !== null) {
                            var dehydrated = suspenseState.dehydrated;
                            if (dehydrated !== null) {
                                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                            }
                        }
                        var nextPrimaryChildren = nextProps.children;
                        var nextFallbackChildren = nextProps.fallback;
                        if (showFallback) {
                            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                            var primaryChildFragment = workInProgress2.child;
                            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                            workInProgress2.memoizedState = SUSPENDED_MARKER;
                            return fallbackFragment;
                        } else {
                            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
                        }
                    } else {
                        var prevState = current2.memoizedState;
                        if (prevState !== null) {
                            var _dehydrated = prevState.dehydrated;
                            if (_dehydrated !== null) {
                                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                            }
                        }
                        if (showFallback) {
                            var _nextFallbackChildren = nextProps.fallback;
                            var _nextPrimaryChildren = nextProps.children;
                            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                            var _primaryChildFragment2 = workInProgress2.child;
                            var prevOffscreenState = current2.child.memoizedState;
                            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                            workInProgress2.memoizedState = SUSPENDED_MARKER;
                            return fallbackChildFragment;
                        } else {
                            var _nextPrimaryChildren2 = nextProps.children;
                            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                            workInProgress2.memoizedState = null;
                            return _primaryChildFragment3;
                        }
                    }
                }
                function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
                    var mode = workInProgress2.mode;
                    var primaryChildProps = {
                        mode: "visible",
                        children: primaryChildren
                    };
                    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
                    primaryChildFragment.return = workInProgress2;
                    workInProgress2.child = primaryChildFragment;
                    return primaryChildFragment;
                }
                function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
                    var mode = workInProgress2.mode;
                    var progressedPrimaryFragment = workInProgress2.child;
                    var primaryChildProps = {
                        mode: "hidden",
                        children: primaryChildren
                    };
                    var primaryChildFragment;
                    var fallbackChildFragment;
                    if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
                        primaryChildFragment = progressedPrimaryFragment;
                        primaryChildFragment.childLanes = NoLanes;
                        primaryChildFragment.pendingProps = primaryChildProps;
                        if (workInProgress2.mode & ProfileMode) {
                            primaryChildFragment.actualDuration = 0;
                            primaryChildFragment.actualStartTime = -1;
                            primaryChildFragment.selfBaseDuration = 0;
                            primaryChildFragment.treeBaseDuration = 0;
                        }
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
                    } else {
                        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
                    }
                    primaryChildFragment.return = workInProgress2;
                    fallbackChildFragment.return = workInProgress2;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress2.child = primaryChildFragment;
                    return fallbackChildFragment;
                }
                function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
                    return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
                }
                function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
                    return createWorkInProgress(current2, offscreenProps);
                }
                function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
                    var currentPrimaryChildFragment = current2.child;
                    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                    var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
                        mode: "visible",
                        children: primaryChildren
                    });
                    if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                        primaryChildFragment.lanes = renderLanes2;
                    }
                    primaryChildFragment.return = workInProgress2;
                    primaryChildFragment.sibling = null;
                    if (currentFallbackChildFragment !== null) {
                        var deletions = workInProgress2.deletions;
                        if (deletions === null) {
                            workInProgress2.deletions = [
                                currentFallbackChildFragment
                            ];
                            workInProgress2.flags |= ChildDeletion;
                        } else {
                            deletions.push(currentFallbackChildFragment);
                        }
                    }
                    workInProgress2.child = primaryChildFragment;
                    return primaryChildFragment;
                }
                function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
                    var mode = workInProgress2.mode;
                    var currentPrimaryChildFragment = current2.child;
                    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                    var primaryChildProps = {
                        mode: "hidden",
                        children: primaryChildren
                    };
                    var primaryChildFragment;
                    if (// In legacy mode, we commit the primary tree as if it successfully
                    // completed, even though it's in an inconsistent state.
                    (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
                    // already cloned. In legacy mode, the only case where this isn't true is
                    // when DevTools forces us to display a fallback; we skip the first render
                    // pass entirely and go straight to rendering the fallback. (In Concurrent
                    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
                    // only codepath.)
                    workInProgress2.child !== currentPrimaryChildFragment) {
                        var progressedPrimaryFragment = workInProgress2.child;
                        primaryChildFragment = progressedPrimaryFragment;
                        primaryChildFragment.childLanes = NoLanes;
                        primaryChildFragment.pendingProps = primaryChildProps;
                        if (workInProgress2.mode & ProfileMode) {
                            primaryChildFragment.actualDuration = 0;
                            primaryChildFragment.actualStartTime = -1;
                            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
                        }
                        workInProgress2.deletions = null;
                    } else {
                        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
                        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
                    }
                    var fallbackChildFragment;
                    if (currentFallbackChildFragment !== null) {
                        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
                    } else {
                        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
                        fallbackChildFragment.flags |= Placement;
                    }
                    fallbackChildFragment.return = workInProgress2;
                    primaryChildFragment.return = workInProgress2;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress2.child = primaryChildFragment;
                    return fallbackChildFragment;
                }
                function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
                    if (recoverableError !== null) {
                        queueHydrationError(recoverableError);
                    }
                    reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
                    var nextProps = workInProgress2.pendingProps;
                    var primaryChildren = nextProps.children;
                    var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                    primaryChildFragment.flags |= Placement;
                    workInProgress2.memoizedState = null;
                    return primaryChildFragment;
                }
                function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
                    var fiberMode = workInProgress2.mode;
                    var primaryChildProps = {
                        mode: "visible",
                        children: primaryChildren
                    };
                    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
                    var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
                    fallbackChildFragment.flags |= Placement;
                    primaryChildFragment.return = workInProgress2;
                    fallbackChildFragment.return = workInProgress2;
                    primaryChildFragment.sibling = fallbackChildFragment;
                    workInProgress2.child = primaryChildFragment;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
                    }
                    return fallbackChildFragment;
                }
                function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
                    if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                        {
                            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
                        }
                        workInProgress2.lanes = laneToLanes(SyncLane);
                    } else if (isSuspenseInstanceFallback(suspenseInstance)) {
                        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
                    } else {
                        workInProgress2.lanes = laneToLanes(OffscreenLane);
                    }
                    return null;
                }
                function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
                    if (!didSuspend) {
                        warnIfHydrating();
                        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, // TODO: When we delete legacy mode, we should make this error argument
                            // required — every concurrent mode path that causes hydration to
                            // de-opt to client rendering should have an error message.
                            null);
                        }
                        if (isSuspenseInstanceFallback(suspenseInstance)) {
                            var digest, message, stack;
                            {
                                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                                digest = _getSuspenseInstanceF.digest;
                                message = _getSuspenseInstanceF.message;
                                stack = _getSuspenseInstanceF.stack;
                            }
                            var error2;
                            if (message) {
                                error2 = new Error(message);
                            } else {
                                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                            }
                            var capturedValue = createCapturedValue(error2, digest, stack);
                            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
                        }
                        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
                        if (didReceiveUpdate || hasContextChanged2) {
                            var root2 = getWorkInProgressRoot();
                            if (root2 !== null) {
                                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                                    suspenseState.retryLane = attemptHydrationAtLane;
                                    var eventTime = NoTimestamp;
                                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                                }
                            }
                            renderDidSuspendDelayIfPossible();
                            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
                        } else if (isSuspenseInstancePending(suspenseInstance)) {
                            workInProgress2.flags |= DidCapture;
                            workInProgress2.child = current2.child;
                            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                            registerSuspenseInstanceRetry(suspenseInstance, retry);
                            return null;
                        } else {
                            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                            var primaryChildren = nextProps.children;
                            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                            primaryChildFragment.flags |= Hydrating;
                            return primaryChildFragment;
                        }
                    } else {
                        if (workInProgress2.flags & ForceClientRender) {
                            workInProgress2.flags &= ~ForceClientRender;
                            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
                        } else if (workInProgress2.memoizedState !== null) {
                            workInProgress2.child = current2.child;
                            workInProgress2.flags |= DidCapture;
                            return null;
                        } else {
                            var nextPrimaryChildren = nextProps.children;
                            var nextFallbackChildren = nextProps.fallback;
                            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                            var _primaryChildFragment4 = workInProgress2.child;
                            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                            workInProgress2.memoizedState = SUSPENDED_MARKER;
                            return fallbackChildFragment;
                        }
                    }
                }
                function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
                }
                function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
                    var node2 = firstChild;
                    while(node2 !== null){
                        if (node2.tag === SuspenseComponent) {
                            var state = node2.memoizedState;
                            if (state !== null) {
                                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                            }
                        } else if (node2.tag === SuspenseListComponent) {
                            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                        } else if (node2.child !== null) {
                            node2.child.return = node2;
                            node2 = node2.child;
                            continue;
                        }
                        if (node2 === workInProgress2) {
                            return;
                        }
                        while(node2.sibling === null){
                            if (node2.return === null || node2.return === workInProgress2) {
                                return;
                            }
                            node2 = node2.return;
                        }
                        node2.sibling.return = node2.return;
                        node2 = node2.sibling;
                    }
                }
                function findLastContentRow(firstChild) {
                    var row = firstChild;
                    var lastContentRow = null;
                    while(row !== null){
                        var currentRow = row.alternate;
                        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                            lastContentRow = row;
                        }
                        row = row.sibling;
                    }
                    return lastContentRow;
                }
                function validateRevealOrder(revealOrder) {
                    {
                        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                            didWarnAboutRevealOrder[revealOrder] = true;
                            if (typeof revealOrder === "string") {
                                switch(revealOrder.toLowerCase()){
                                    case "together":
                                    case "forwards":
                                    case "backwards":
                                        {
                                            error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                                            break;
                                        }
                                    case "forward":
                                    case "backward":
                                        {
                                            error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                                            break;
                                        }
                                    default:
                                        error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                                        break;
                                }
                            } else {
                                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                            }
                        }
                    }
                }
                function validateTailOptions(tailMode, revealOrder) {
                    {
                        if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                            if (tailMode !== "collapsed" && tailMode !== "hidden") {
                                didWarnAboutTailOptions[tailMode] = true;
                                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                                didWarnAboutTailOptions[tailMode] = true;
                                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                            }
                        }
                    }
                }
                function validateSuspenseListNestedChild(childSlot, index2) {
                    {
                        var isAnArray = isArray(childSlot);
                        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
                        if (isAnArray || isIterable) {
                            var type = isAnArray ? "array" : "iterable";
                            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                            return false;
                        }
                    }
                    return true;
                }
                function validateSuspenseListChildren(children, revealOrder) {
                    {
                        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                            if (isArray(children)) {
                                for(var i = 0; i < children.length; i++){
                                    if (!validateSuspenseListNestedChild(children[i], i)) {
                                        return;
                                    }
                                }
                            } else {
                                var iteratorFn = getIteratorFn(children);
                                if (typeof iteratorFn === "function") {
                                    var childrenIterator = iteratorFn.call(children);
                                    if (childrenIterator) {
                                        var step = childrenIterator.next();
                                        var _i = 0;
                                        for(; !step.done; step = childrenIterator.next()){
                                            if (!validateSuspenseListNestedChild(step.value, _i)) {
                                                return;
                                            }
                                            _i++;
                                        }
                                    }
                                } else {
                                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                                }
                            }
                        }
                    }
                }
                function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
                    var renderState = workInProgress2.memoizedState;
                    if (renderState === null) {
                        workInProgress2.memoizedState = {
                            isBackwards: isBackwards,
                            rendering: null,
                            renderingStartTime: 0,
                            last: lastContentRow,
                            tail: tail,
                            tailMode: tailMode
                        };
                    } else {
                        renderState.isBackwards = isBackwards;
                        renderState.rendering = null;
                        renderState.renderingStartTime = 0;
                        renderState.last = lastContentRow;
                        renderState.tail = tail;
                        renderState.tailMode = tailMode;
                    }
                }
                function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
                    var nextProps = workInProgress2.pendingProps;
                    var revealOrder = nextProps.revealOrder;
                    var tailMode = nextProps.tail;
                    var newChildren = nextProps.children;
                    validateRevealOrder(revealOrder);
                    validateTailOptions(tailMode, revealOrder);
                    validateSuspenseListChildren(newChildren, revealOrder);
                    reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
                    var suspenseContext = suspenseStackCursor.current;
                    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    if (shouldForceFallback) {
                        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                        workInProgress2.flags |= DidCapture;
                    } else {
                        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
                        if (didSuspendBefore) {
                            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
                        }
                        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    }
                    pushSuspenseContext(workInProgress2, suspenseContext);
                    if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                        workInProgress2.memoizedState = null;
                    } else {
                        switch(revealOrder){
                            case "forwards":
                                {
                                    var lastContentRow = findLastContentRow(workInProgress2.child);
                                    var tail;
                                    if (lastContentRow === null) {
                                        tail = workInProgress2.child;
                                        workInProgress2.child = null;
                                    } else {
                                        tail = lastContentRow.sibling;
                                        lastContentRow.sibling = null;
                                    }
                                    initSuspenseListRenderState(workInProgress2, false, // isBackwards
                                    tail, lastContentRow, tailMode);
                                    break;
                                }
                            case "backwards":
                                {
                                    var _tail = null;
                                    var row = workInProgress2.child;
                                    workInProgress2.child = null;
                                    while(row !== null){
                                        var currentRow = row.alternate;
                                        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                                            workInProgress2.child = row;
                                            break;
                                        }
                                        var nextRow = row.sibling;
                                        row.sibling = _tail;
                                        _tail = row;
                                        row = nextRow;
                                    }
                                    initSuspenseListRenderState(workInProgress2, true, // isBackwards
                                    _tail, null, // last
                                    tailMode);
                                    break;
                                }
                            case "together":
                                {
                                    initSuspenseListRenderState(workInProgress2, false, // isBackwards
                                    null, // tail
                                    null, // last
                                    void 0);
                                    break;
                                }
                            default:
                                {
                                    workInProgress2.memoizedState = null;
                                }
                        }
                    }
                    return workInProgress2.child;
                }
                function updatePortalComponent(current2, workInProgress2, renderLanes2) {
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    var nextChildren = workInProgress2.pendingProps;
                    if (current2 === null) {
                        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                    } else {
                        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
                    }
                    return workInProgress2.child;
                }
                var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
                function updateContextProvider(current2, workInProgress2, renderLanes2) {
                    var providerType = workInProgress2.type;
                    var context = providerType._context;
                    var newProps = workInProgress2.pendingProps;
                    var oldProps = workInProgress2.memoizedProps;
                    var newValue = newProps.value;
                    {
                        if (!("value" in newProps)) {
                            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                            }
                        }
                        var providerPropTypes = workInProgress2.type.propTypes;
                        if (providerPropTypes) {
                            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
                        }
                    }
                    pushProvider(workInProgress2, context, newValue);
                    {
                        if (oldProps !== null) {
                            var oldValue = oldProps.value;
                            if (objectIs(oldValue, newValue)) {
                                if (oldProps.children === newProps.children && !hasContextChanged()) {
                                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                                }
                            } else {
                                propagateContextChange(workInProgress2, context, renderLanes2);
                            }
                        }
                    }
                    var newChildren = newProps.children;
                    reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
                    return workInProgress2.child;
                }
                var hasWarnedAboutUsingContextAsConsumer = false;
                function updateContextConsumer(current2, workInProgress2, renderLanes2) {
                    var context = workInProgress2.type;
                    {
                        if (context._context === void 0) {
                            if (context !== context.Consumer) {
                                if (!hasWarnedAboutUsingContextAsConsumer) {
                                    hasWarnedAboutUsingContextAsConsumer = true;
                                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                                }
                            }
                        } else {
                            context = context._context;
                        }
                    }
                    var newProps = workInProgress2.pendingProps;
                    var render3 = newProps.children;
                    {
                        if (typeof render3 !== "function") {
                            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
                        }
                    }
                    prepareToReadContext(workInProgress2, renderLanes2);
                    var newValue = readContext(context);
                    {
                        markComponentRenderStarted(workInProgress2);
                    }
                    var newChildren;
                    {
                        ReactCurrentOwner$1.current = workInProgress2;
                        setIsRendering(true);
                        newChildren = render3(newValue);
                        setIsRendering(false);
                    }
                    {
                        markComponentRenderStopped();
                    }
                    workInProgress2.flags |= PerformedWork;
                    reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
                    return workInProgress2.child;
                }
                function markWorkInProgressReceivedUpdate() {
                    didReceiveUpdate = true;
                }
                function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
                    if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                        if (current2 !== null) {
                            current2.alternate = null;
                            workInProgress2.alternate = null;
                            workInProgress2.flags |= Placement;
                        }
                    }
                }
                function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
                    if (current2 !== null) {
                        workInProgress2.dependencies = current2.dependencies;
                    }
                    {
                        stopProfilerTimerIfRunning();
                    }
                    markSkippedUpdateLanes(workInProgress2.lanes);
                    if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
                        {
                            return null;
                        }
                    }
                    cloneChildFibers(current2, workInProgress2);
                    return workInProgress2.child;
                }
                function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
                    {
                        var returnFiber = oldWorkInProgress.return;
                        if (returnFiber === null) {
                            throw new Error("Cannot swap the root fiber.");
                        }
                        current2.alternate = null;
                        oldWorkInProgress.alternate = null;
                        newWorkInProgress.index = oldWorkInProgress.index;
                        newWorkInProgress.sibling = oldWorkInProgress.sibling;
                        newWorkInProgress.return = oldWorkInProgress.return;
                        newWorkInProgress.ref = oldWorkInProgress.ref;
                        if (oldWorkInProgress === returnFiber.child) {
                            returnFiber.child = newWorkInProgress;
                        } else {
                            var prevSibling = returnFiber.child;
                            if (prevSibling === null) {
                                throw new Error("Expected parent to have a child.");
                            }
                            while(prevSibling.sibling !== oldWorkInProgress){
                                prevSibling = prevSibling.sibling;
                                if (prevSibling === null) {
                                    throw new Error("Expected to find the previous sibling.");
                                }
                            }
                            prevSibling.sibling = newWorkInProgress;
                        }
                        var deletions = returnFiber.deletions;
                        if (deletions === null) {
                            returnFiber.deletions = [
                                current2
                            ];
                            returnFiber.flags |= ChildDeletion;
                        } else {
                            deletions.push(current2);
                        }
                        newWorkInProgress.flags |= Placement;
                        return newWorkInProgress;
                    }
                }
                function checkScheduledUpdateOrContext(current2, renderLanes2) {
                    var updateLanes = current2.lanes;
                    if (includesSomeLane(updateLanes, renderLanes2)) {
                        return true;
                    }
                    return false;
                }
                function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
                    switch(workInProgress2.tag){
                        case HostRoot:
                            pushHostRootContext(workInProgress2);
                            var root2 = workInProgress2.stateNode;
                            resetHydrationState();
                            break;
                        case HostComponent:
                            pushHostContext(workInProgress2);
                            break;
                        case ClassComponent:
                            {
                                var Component3 = workInProgress2.type;
                                if (isContextProvider(Component3)) {
                                    pushContextProvider(workInProgress2);
                                }
                                break;
                            }
                        case HostPortal:
                            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                            break;
                        case ContextProvider:
                            {
                                var newValue = workInProgress2.memoizedProps.value;
                                var context = workInProgress2.type._context;
                                pushProvider(workInProgress2, context, newValue);
                                break;
                            }
                        case Profiler:
                            {
                                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                                if (hasChildWork) {
                                    workInProgress2.flags |= Update;
                                }
                                {
                                    var stateNode = workInProgress2.stateNode;
                                    stateNode.effectDuration = 0;
                                    stateNode.passiveEffectDuration = 0;
                                }
                            }
                            break;
                        case SuspenseComponent:
                            {
                                var state = workInProgress2.memoizedState;
                                if (state !== null) {
                                    if (state.dehydrated !== null) {
                                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                        workInProgress2.flags |= DidCapture;
                                        return null;
                                    }
                                    var primaryChildFragment = workInProgress2.child;
                                    var primaryChildLanes = primaryChildFragment.childLanes;
                                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                                    } else {
                                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                                        if (child !== null) {
                                            return child.sibling;
                                        } else {
                                            return null;
                                        }
                                    }
                                } else {
                                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                }
                                break;
                            }
                        case SuspenseListComponent:
                            {
                                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                                if (didSuspendBefore) {
                                    if (_hasChildWork) {
                                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                                    }
                                    workInProgress2.flags |= DidCapture;
                                }
                                var renderState = workInProgress2.memoizedState;
                                if (renderState !== null) {
                                    renderState.rendering = null;
                                    renderState.tail = null;
                                    renderState.lastEffect = null;
                                }
                                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                                if (_hasChildWork) {
                                    break;
                                } else {
                                    return null;
                                }
                            }
                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                            {
                                workInProgress2.lanes = NoLanes;
                                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                            }
                    }
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
                function beginWork(current2, workInProgress2, renderLanes2) {
                    {
                        if (workInProgress2._debugNeedsRemount && current2 !== null) {
                            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
                        }
                    }
                    if (current2 !== null) {
                        var oldProps = current2.memoizedProps;
                        var newProps = workInProgress2.pendingProps;
                        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
                        workInProgress2.type !== current2.type) {
                            didReceiveUpdate = true;
                        } else {
                            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                            // may not be work scheduled on `current`, so we check for this flag.
                            (workInProgress2.flags & DidCapture) === NoFlags) {
                                didReceiveUpdate = false;
                                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                            }
                            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                                didReceiveUpdate = true;
                            } else {
                                didReceiveUpdate = false;
                            }
                        }
                    } else {
                        didReceiveUpdate = false;
                        if (getIsHydrating() && isForkedChild(workInProgress2)) {
                            var slotIndex = workInProgress2.index;
                            var numberOfForks = getForksAtLevel();
                            pushTreeId(workInProgress2, numberOfForks, slotIndex);
                        }
                    }
                    workInProgress2.lanes = NoLanes;
                    switch(workInProgress2.tag){
                        case IndeterminateComponent:
                            {
                                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
                            }
                        case LazyComponent:
                            {
                                var elementType = workInProgress2.elementType;
                                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
                            }
                        case FunctionComponent:
                            {
                                var Component3 = workInProgress2.type;
                                var unresolvedProps = workInProgress2.pendingProps;
                                var resolvedProps = workInProgress2.elementType === Component3 ? unresolvedProps : resolveDefaultProps(Component3, unresolvedProps);
                                return updateFunctionComponent(current2, workInProgress2, Component3, resolvedProps, renderLanes2);
                            }
                        case ClassComponent:
                            {
                                var _Component = workInProgress2.type;
                                var _unresolvedProps = workInProgress2.pendingProps;
                                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
                            }
                        case HostRoot:
                            return updateHostRoot(current2, workInProgress2, renderLanes2);
                        case HostComponent:
                            return updateHostComponent(current2, workInProgress2, renderLanes2);
                        case HostText:
                            return updateHostText(current2, workInProgress2);
                        case SuspenseComponent:
                            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                        case HostPortal:
                            return updatePortalComponent(current2, workInProgress2, renderLanes2);
                        case ForwardRef2:
                            {
                                var type = workInProgress2.type;
                                var _unresolvedProps2 = workInProgress2.pendingProps;
                                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
                            }
                        case Fragment4:
                            return updateFragment(current2, workInProgress2, renderLanes2);
                        case Mode:
                            return updateMode(current2, workInProgress2, renderLanes2);
                        case Profiler:
                            return updateProfiler(current2, workInProgress2, renderLanes2);
                        case ContextProvider:
                            return updateContextProvider(current2, workInProgress2, renderLanes2);
                        case ContextConsumer:
                            return updateContextConsumer(current2, workInProgress2, renderLanes2);
                        case MemoComponent:
                            {
                                var _type2 = workInProgress2.type;
                                var _unresolvedProps3 = workInProgress2.pendingProps;
                                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                                {
                                    if (workInProgress2.type !== workInProgress2.elementType) {
                                        var outerPropTypes = _type2.propTypes;
                                        if (outerPropTypes) {
                                            checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                                            "prop", getComponentNameFromType(_type2));
                                        }
                                    }
                                }
                                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
                            }
                        case SimpleMemoComponent:
                            {
                                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
                            }
                        case IncompleteClassComponent:
                            {
                                var _Component2 = workInProgress2.type;
                                var _unresolvedProps4 = workInProgress2.pendingProps;
                                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
                            }
                        case SuspenseListComponent:
                            {
                                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                            }
                        case ScopeComponent:
                            {
                                break;
                            }
                        case OffscreenComponent:
                            {
                                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                            }
                    }
                    throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                }
                function markUpdate(workInProgress2) {
                    workInProgress2.flags |= Update;
                }
                function markRef$1(workInProgress2) {
                    workInProgress2.flags |= Ref;
                    {
                        workInProgress2.flags |= RefStatic;
                    }
                }
                var appendAllChildren;
                var updateHostContainer;
                var updateHostComponent$1;
                var updateHostText$1;
                {
                    appendAllChildren = function appendAllChildren(parent, workInProgress2, needsVisibilityToggle, isHidden) {
                        var node2 = workInProgress2.child;
                        while(node2 !== null){
                            if (node2.tag === HostComponent || node2.tag === HostText) {
                                appendInitialChild(parent, node2.stateNode);
                            } else if (node2.tag === HostPortal) ;
                            else if (node2.child !== null) {
                                node2.child.return = node2;
                                node2 = node2.child;
                                continue;
                            }
                            if (node2 === workInProgress2) {
                                return;
                            }
                            while(node2.sibling === null){
                                if (node2.return === null || node2.return === workInProgress2) {
                                    return;
                                }
                                node2 = node2.return;
                            }
                            node2.sibling.return = node2.return;
                            node2 = node2.sibling;
                        }
                    };
                    updateHostContainer = function updateHostContainer(current2, workInProgress2) {};
                    updateHostComponent$1 = function updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance) {
                        var oldProps = current2.memoizedProps;
                        if (oldProps === newProps) {
                            return;
                        }
                        var instance = workInProgress2.stateNode;
                        var currentHostContext = getHostContext();
                        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                        workInProgress2.updateQueue = updatePayload;
                        if (updatePayload) {
                            markUpdate(workInProgress2);
                        }
                    };
                    updateHostText$1 = function updateHostText$1(current2, workInProgress2, oldText, newText) {
                        if (oldText !== newText) {
                            markUpdate(workInProgress2);
                        }
                    };
                }
                function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
                    if (getIsHydrating()) {
                        return;
                    }
                    switch(renderState.tailMode){
                        case "hidden":
                            {
                                var tailNode = renderState.tail;
                                var lastTailNode = null;
                                while(tailNode !== null){
                                    if (tailNode.alternate !== null) {
                                        lastTailNode = tailNode;
                                    }
                                    tailNode = tailNode.sibling;
                                }
                                if (lastTailNode === null) {
                                    renderState.tail = null;
                                } else {
                                    lastTailNode.sibling = null;
                                }
                                break;
                            }
                        case "collapsed":
                            {
                                var _tailNode = renderState.tail;
                                var _lastTailNode = null;
                                while(_tailNode !== null){
                                    if (_tailNode.alternate !== null) {
                                        _lastTailNode = _tailNode;
                                    }
                                    _tailNode = _tailNode.sibling;
                                }
                                if (_lastTailNode === null) {
                                    if (!hasRenderedATailFallback && renderState.tail !== null) {
                                        renderState.tail.sibling = null;
                                    } else {
                                        renderState.tail = null;
                                    }
                                } else {
                                    _lastTailNode.sibling = null;
                                }
                                break;
                            }
                    }
                }
                function bubbleProperties(completedWork) {
                    var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
                    var newChildLanes = NoLanes;
                    var subtreeFlags = NoFlags;
                    if (!didBailout) {
                        if ((completedWork.mode & ProfileMode) !== NoMode) {
                            var actualDuration = completedWork.actualDuration;
                            var treeBaseDuration = completedWork.selfBaseDuration;
                            var child = completedWork.child;
                            while(child !== null){
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                                subtreeFlags |= child.subtreeFlags;
                                subtreeFlags |= child.flags;
                                actualDuration += child.actualDuration;
                                treeBaseDuration += child.treeBaseDuration;
                                child = child.sibling;
                            }
                            completedWork.actualDuration = actualDuration;
                            completedWork.treeBaseDuration = treeBaseDuration;
                        } else {
                            var _child = completedWork.child;
                            while(_child !== null){
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                                subtreeFlags |= _child.subtreeFlags;
                                subtreeFlags |= _child.flags;
                                _child.return = completedWork;
                                _child = _child.sibling;
                            }
                        }
                        completedWork.subtreeFlags |= subtreeFlags;
                    } else {
                        if ((completedWork.mode & ProfileMode) !== NoMode) {
                            var _treeBaseDuration = completedWork.selfBaseDuration;
                            var _child2 = completedWork.child;
                            while(_child2 !== null){
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                                subtreeFlags |= _child2.flags & StaticMask;
                                _treeBaseDuration += _child2.treeBaseDuration;
                                _child2 = _child2.sibling;
                            }
                            completedWork.treeBaseDuration = _treeBaseDuration;
                        } else {
                            var _child3 = completedWork.child;
                            while(_child3 !== null){
                                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                                subtreeFlags |= _child3.flags & StaticMask;
                                _child3.return = completedWork;
                                _child3 = _child3.sibling;
                            }
                        }
                        completedWork.subtreeFlags |= subtreeFlags;
                    }
                    completedWork.childLanes = newChildLanes;
                    return didBailout;
                }
                function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
                    if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
                        warnIfUnhydratedTailNodes(workInProgress2);
                        resetHydrationState();
                        workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
                        return false;
                    }
                    var wasHydrated = popHydrationState(workInProgress2);
                    if (nextState !== null && nextState.dehydrated !== null) {
                        if (current2 === null) {
                            if (!wasHydrated) {
                                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                            }
                            prepareToHydrateHostSuspenseInstance(workInProgress2);
                            bubbleProperties(workInProgress2);
                            {
                                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                    var isTimedOutSuspense = nextState !== null;
                                    if (isTimedOutSuspense) {
                                        var primaryChildFragment = workInProgress2.child;
                                        if (primaryChildFragment !== null) {
                                            workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                                        }
                                    }
                                }
                            }
                            return false;
                        } else {
                            resetHydrationState();
                            if ((workInProgress2.flags & DidCapture) === NoFlags) {
                                workInProgress2.memoizedState = null;
                            }
                            workInProgress2.flags |= Update;
                            bubbleProperties(workInProgress2);
                            {
                                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                    var _isTimedOutSuspense = nextState !== null;
                                    if (_isTimedOutSuspense) {
                                        var _primaryChildFragment = workInProgress2.child;
                                        if (_primaryChildFragment !== null) {
                                            workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                                        }
                                    }
                                }
                            }
                            return false;
                        }
                    } else {
                        upgradeHydrationErrorsToRecoverable();
                        return true;
                    }
                }
                function completeWork(current2, workInProgress2, renderLanes2) {
                    var newProps = workInProgress2.pendingProps;
                    popTreeContext(workInProgress2);
                    switch(workInProgress2.tag){
                        case IndeterminateComponent:
                        case LazyComponent:
                        case SimpleMemoComponent:
                        case FunctionComponent:
                        case ForwardRef2:
                        case Fragment4:
                        case Mode:
                        case Profiler:
                        case ContextConsumer:
                        case MemoComponent:
                            bubbleProperties(workInProgress2);
                            return null;
                        case ClassComponent:
                            {
                                var Component3 = workInProgress2.type;
                                if (isContextProvider(Component3)) {
                                    popContext(workInProgress2);
                                }
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case HostRoot:
                            {
                                var fiberRoot = workInProgress2.stateNode;
                                popHostContainer(workInProgress2);
                                popTopLevelContextObject(workInProgress2);
                                resetWorkInProgressVersions();
                                if (fiberRoot.pendingContext) {
                                    fiberRoot.context = fiberRoot.pendingContext;
                                    fiberRoot.pendingContext = null;
                                }
                                if (current2 === null || current2.child === null) {
                                    var wasHydrated = popHydrationState(workInProgress2);
                                    if (wasHydrated) {
                                        markUpdate(workInProgress2);
                                    } else {
                                        if (current2 !== null) {
                                            var prevState = current2.memoizedState;
                                            if (// Check if this is a client root
                                            !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                                            (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                                                workInProgress2.flags |= Snapshot;
                                                upgradeHydrationErrorsToRecoverable();
                                            }
                                        }
                                    }
                                }
                                updateHostContainer(current2, workInProgress2);
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case HostComponent:
                            {
                                popHostContext(workInProgress2);
                                var rootContainerInstance = getRootHostContainer();
                                var type = workInProgress2.type;
                                if (current2 !== null && workInProgress2.stateNode != null) {
                                    updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                                    if (current2.ref !== workInProgress2.ref) {
                                        markRef$1(workInProgress2);
                                    }
                                } else {
                                    if (!newProps) {
                                        if (workInProgress2.stateNode === null) {
                                            throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                        }
                                        bubbleProperties(workInProgress2);
                                        return null;
                                    }
                                    var currentHostContext = getHostContext();
                                    var _wasHydrated = popHydrationState(workInProgress2);
                                    if (_wasHydrated) {
                                        if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                                            markUpdate(workInProgress2);
                                        }
                                    } else {
                                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                                        appendAllChildren(instance, workInProgress2, false, false);
                                        workInProgress2.stateNode = instance;
                                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                                            markUpdate(workInProgress2);
                                        }
                                    }
                                    if (workInProgress2.ref !== null) {
                                        markRef$1(workInProgress2);
                                    }
                                }
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case HostText:
                            {
                                var newText = newProps;
                                if (current2 && workInProgress2.stateNode != null) {
                                    var oldText = current2.memoizedProps;
                                    updateHostText$1(current2, workInProgress2, oldText, newText);
                                } else {
                                    if (typeof newText !== "string") {
                                        if (workInProgress2.stateNode === null) {
                                            throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                        }
                                    }
                                    var _rootContainerInstance = getRootHostContainer();
                                    var _currentHostContext = getHostContext();
                                    var _wasHydrated2 = popHydrationState(workInProgress2);
                                    if (_wasHydrated2) {
                                        if (prepareToHydrateHostTextInstance(workInProgress2)) {
                                            markUpdate(workInProgress2);
                                        }
                                    } else {
                                        workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                                    }
                                }
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case SuspenseComponent:
                            {
                                popSuspenseContext(workInProgress2);
                                var nextState = workInProgress2.memoizedState;
                                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                                    if (!fallthroughToNormalSuspensePath) {
                                        if (workInProgress2.flags & ShouldCapture) {
                                            return workInProgress2;
                                        } else {
                                            return null;
                                        }
                                    }
                                }
                                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                                    workInProgress2.lanes = renderLanes2;
                                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                        transferActualDuration(workInProgress2);
                                    }
                                    return workInProgress2;
                                }
                                var nextDidTimeout = nextState !== null;
                                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                                if (nextDidTimeout !== prevDidTimeout) {
                                    if (nextDidTimeout) {
                                        var _offscreenFiber2 = workInProgress2.child;
                                        _offscreenFiber2.flags |= Visibility;
                                        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                                            var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                                                renderDidSuspend();
                                            } else {
                                                renderDidSuspendDelayIfPossible();
                                            }
                                        }
                                    }
                                }
                                var wakeables = workInProgress2.updateQueue;
                                if (wakeables !== null) {
                                    workInProgress2.flags |= Update;
                                }
                                bubbleProperties(workInProgress2);
                                {
                                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                        if (nextDidTimeout) {
                                            var primaryChildFragment = workInProgress2.child;
                                            if (primaryChildFragment !== null) {
                                                workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                                            }
                                        }
                                    }
                                }
                                return null;
                            }
                        case HostPortal:
                            popHostContainer(workInProgress2);
                            updateHostContainer(current2, workInProgress2);
                            if (current2 === null) {
                                preparePortalMount(workInProgress2.stateNode.containerInfo);
                            }
                            bubbleProperties(workInProgress2);
                            return null;
                        case ContextProvider:
                            var context = workInProgress2.type._context;
                            popProvider(context, workInProgress2);
                            bubbleProperties(workInProgress2);
                            return null;
                        case IncompleteClassComponent:
                            {
                                var _Component = workInProgress2.type;
                                if (isContextProvider(_Component)) {
                                    popContext(workInProgress2);
                                }
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case SuspenseListComponent:
                            {
                                popSuspenseContext(workInProgress2);
                                var renderState = workInProgress2.memoizedState;
                                if (renderState === null) {
                                    bubbleProperties(workInProgress2);
                                    return null;
                                }
                                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                                var renderedTail = renderState.rendering;
                                if (renderedTail === null) {
                                    if (!didSuspendAlready) {
                                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                                        if (!cannotBeSuspended) {
                                            var row = workInProgress2.child;
                                            while(row !== null){
                                                var suspended = findFirstSuspended(row);
                                                if (suspended !== null) {
                                                    didSuspendAlready = true;
                                                    workInProgress2.flags |= DidCapture;
                                                    cutOffTailIfNeeded(renderState, false);
                                                    var newThenables = suspended.updateQueue;
                                                    if (newThenables !== null) {
                                                        workInProgress2.updateQueue = newThenables;
                                                        workInProgress2.flags |= Update;
                                                    }
                                                    workInProgress2.subtreeFlags = NoFlags;
                                                    resetChildFibers(workInProgress2, renderLanes2);
                                                    pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                                    return workInProgress2.child;
                                                }
                                                row = row.sibling;
                                            }
                                        }
                                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                                            workInProgress2.flags |= DidCapture;
                                            didSuspendAlready = true;
                                            cutOffTailIfNeeded(renderState, false);
                                            workInProgress2.lanes = SomeRetryLane;
                                        }
                                    } else {
                                        cutOffTailIfNeeded(renderState, false);
                                    }
                                } else {
                                    if (!didSuspendAlready) {
                                        var _suspended = findFirstSuspended(renderedTail);
                                        if (_suspended !== null) {
                                            workInProgress2.flags |= DidCapture;
                                            didSuspendAlready = true;
                                            var _newThenables = _suspended.updateQueue;
                                            if (_newThenables !== null) {
                                                workInProgress2.updateQueue = _newThenables;
                                                workInProgress2.flags |= Update;
                                            }
                                            cutOffTailIfNeeded(renderState, true);
                                            if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                                                bubbleProperties(workInProgress2);
                                                return null;
                                            }
                                        } else if (// The time it took to render last row is greater than the remaining
                                        // time we have to render. So rendering one more row would likely
                                        // exceed it.
                                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                                            workInProgress2.flags |= DidCapture;
                                            didSuspendAlready = true;
                                            cutOffTailIfNeeded(renderState, false);
                                            workInProgress2.lanes = SomeRetryLane;
                                        }
                                    }
                                    if (renderState.isBackwards) {
                                        renderedTail.sibling = workInProgress2.child;
                                        workInProgress2.child = renderedTail;
                                    } else {
                                        var previousSibling = renderState.last;
                                        if (previousSibling !== null) {
                                            previousSibling.sibling = renderedTail;
                                        } else {
                                            workInProgress2.child = renderedTail;
                                        }
                                        renderState.last = renderedTail;
                                    }
                                }
                                if (renderState.tail !== null) {
                                    var next2 = renderState.tail;
                                    renderState.rendering = next2;
                                    renderState.tail = next2.sibling;
                                    renderState.renderingStartTime = now();
                                    next2.sibling = null;
                                    var suspenseContext = suspenseStackCursor.current;
                                    if (didSuspendAlready) {
                                        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                                    } else {
                                        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                                    }
                                    pushSuspenseContext(workInProgress2, suspenseContext);
                                    return next2;
                                }
                                bubbleProperties(workInProgress2);
                                return null;
                            }
                        case ScopeComponent:
                            {
                                break;
                            }
                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                            {
                                popRenderLanes(workInProgress2);
                                var _nextState = workInProgress2.memoizedState;
                                var nextIsHidden = _nextState !== null;
                                if (current2 !== null) {
                                    var _prevState = current2.memoizedState;
                                    var prevIsHidden = _prevState !== null;
                                    if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                                    !enableLegacyHidden) {
                                        workInProgress2.flags |= Visibility;
                                    }
                                }
                                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                                    bubbleProperties(workInProgress2);
                                } else {
                                    if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                                        bubbleProperties(workInProgress2);
                                        {
                                            if (workInProgress2.subtreeFlags & (Placement | Update)) {
                                                workInProgress2.flags |= Visibility;
                                            }
                                        }
                                    }
                                }
                                return null;
                            }
                        case CacheComponent:
                            {
                                return null;
                            }
                        case TracingMarkerComponent:
                            {
                                return null;
                            }
                    }
                    throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                }
                function unwindWork(current2, workInProgress2, renderLanes2) {
                    popTreeContext(workInProgress2);
                    switch(workInProgress2.tag){
                        case ClassComponent:
                            {
                                var Component3 = workInProgress2.type;
                                if (isContextProvider(Component3)) {
                                    popContext(workInProgress2);
                                }
                                var flags = workInProgress2.flags;
                                if (flags & ShouldCapture) {
                                    workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                        transferActualDuration(workInProgress2);
                                    }
                                    return workInProgress2;
                                }
                                return null;
                            }
                        case HostRoot:
                            {
                                var root2 = workInProgress2.stateNode;
                                popHostContainer(workInProgress2);
                                popTopLevelContextObject(workInProgress2);
                                resetWorkInProgressVersions();
                                var _flags = workInProgress2.flags;
                                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                                    workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                                    return workInProgress2;
                                }
                                return null;
                            }
                        case HostComponent:
                            {
                                popHostContext(workInProgress2);
                                return null;
                            }
                        case SuspenseComponent:
                            {
                                popSuspenseContext(workInProgress2);
                                var suspenseState = workInProgress2.memoizedState;
                                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                                    if (workInProgress2.alternate === null) {
                                        throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                                    }
                                    resetHydrationState();
                                }
                                var _flags2 = workInProgress2.flags;
                                if (_flags2 & ShouldCapture) {
                                    workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                                        transferActualDuration(workInProgress2);
                                    }
                                    return workInProgress2;
                                }
                                return null;
                            }
                        case SuspenseListComponent:
                            {
                                popSuspenseContext(workInProgress2);
                                return null;
                            }
                        case HostPortal:
                            popHostContainer(workInProgress2);
                            return null;
                        case ContextProvider:
                            var context = workInProgress2.type._context;
                            popProvider(context, workInProgress2);
                            return null;
                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                            popRenderLanes(workInProgress2);
                            return null;
                        case CacheComponent:
                            return null;
                        default:
                            return null;
                    }
                }
                function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
                    popTreeContext(interruptedWork);
                    switch(interruptedWork.tag){
                        case ClassComponent:
                            {
                                var childContextTypes = interruptedWork.type.childContextTypes;
                                if (childContextTypes !== null && childContextTypes !== void 0) {
                                    popContext(interruptedWork);
                                }
                                break;
                            }
                        case HostRoot:
                            {
                                var root2 = interruptedWork.stateNode;
                                popHostContainer(interruptedWork);
                                popTopLevelContextObject(interruptedWork);
                                resetWorkInProgressVersions();
                                break;
                            }
                        case HostComponent:
                            {
                                popHostContext(interruptedWork);
                                break;
                            }
                        case HostPortal:
                            popHostContainer(interruptedWork);
                            break;
                        case SuspenseComponent:
                            popSuspenseContext(interruptedWork);
                            break;
                        case SuspenseListComponent:
                            popSuspenseContext(interruptedWork);
                            break;
                        case ContextProvider:
                            var context = interruptedWork.type._context;
                            popProvider(context, interruptedWork);
                            break;
                        case OffscreenComponent:
                        case LegacyHiddenComponent:
                            popRenderLanes(interruptedWork);
                            break;
                    }
                }
                var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
                {
                    didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
                }
                var offscreenSubtreeIsHidden = false;
                var offscreenSubtreeWasHidden = false;
                var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
                var nextEffect = null;
                var inProgressLanes = null;
                var inProgressRoot = null;
                function reportUncaughtErrorInDEV(error2) {
                    {
                        invokeGuardedCallback(null, function() {
                            throw error2;
                        });
                        clearCaughtError();
                    }
                }
                var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current2, instance) {
                    instance.props = current2.memoizedProps;
                    instance.state = current2.memoizedState;
                    if (current2.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            instance.componentWillUnmount();
                        } finally{
                            recordLayoutEffectDuration(current2);
                        }
                    } else {
                        instance.componentWillUnmount();
                    }
                };
                function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
                    try {
                        commitHookEffectListMount(Layout, current2);
                    } catch (error2) {
                        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                    }
                }
                function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
                    try {
                        callComponentWillUnmountWithTimer(current2, instance);
                    } catch (error2) {
                        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                    }
                }
                function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
                    try {
                        instance.componentDidMount();
                    } catch (error2) {
                        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                    }
                }
                function safelyAttachRef(current2, nearestMountedAncestor) {
                    try {
                        commitAttachRef(current2);
                    } catch (error2) {
                        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                    }
                }
                function safelyDetachRef(current2, nearestMountedAncestor) {
                    var ref = current2.ref;
                    if (ref !== null) {
                        if (typeof ref === "function") {
                            var retVal;
                            try {
                                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                                    try {
                                        startLayoutEffectTimer();
                                        retVal = ref(null);
                                    } finally{
                                        recordLayoutEffectDuration(current2);
                                    }
                                } else {
                                    retVal = ref(null);
                                }
                            } catch (error2) {
                                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                            }
                            {
                                if (typeof retVal === "function") {
                                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                                }
                            }
                        } else {
                            ref.current = null;
                        }
                    }
                }
                function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
                    try {
                        destroy();
                    } catch (error2) {
                        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                    }
                }
                var focusedInstanceHandle = null;
                var shouldFireAfterActiveInstanceBlur = false;
                function commitBeforeMutationEffects(root2, firstChild) {
                    focusedInstanceHandle = prepareForCommit(root2.containerInfo);
                    nextEffect = firstChild;
                    commitBeforeMutationEffects_begin();
                    var shouldFire = shouldFireAfterActiveInstanceBlur;
                    shouldFireAfterActiveInstanceBlur = false;
                    focusedInstanceHandle = null;
                    return shouldFire;
                }
                function commitBeforeMutationEffects_begin() {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var child = fiber.child;
                        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitBeforeMutationEffects_complete();
                        }
                    }
                }
                function commitBeforeMutationEffects_complete() {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        try {
                            commitBeforeMutationEffectsOnFiber(fiber);
                        } catch (error2) {
                            captureCommitPhaseError(fiber, fiber.return, error2);
                        }
                        resetCurrentFiber();
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitBeforeMutationEffectsOnFiber(finishedWork) {
                    var current2 = finishedWork.alternate;
                    var flags = finishedWork.flags;
                    if ((flags & Snapshot) !== NoFlags) {
                        setCurrentFiber(finishedWork);
                        switch(finishedWork.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    break;
                                }
                            case ClassComponent:
                                {
                                    if (current2 !== null) {
                                        var prevProps = current2.memoizedProps;
                                        var prevState = current2.memoizedState;
                                        var instance = finishedWork.stateNode;
                                        {
                                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                if (instance.props !== finishedWork.memoizedProps) {
                                                    error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                }
                                                if (instance.state !== finishedWork.memoizedState) {
                                                    error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                }
                                            }
                                        }
                                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                                        {
                                            var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                                            if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                                                didWarnSet.add(finishedWork.type);
                                                error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                                            }
                                        }
                                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                                    }
                                    break;
                                }
                            case HostRoot:
                                {
                                    {
                                        var root2 = finishedWork.stateNode;
                                        clearContainer(root2.containerInfo);
                                    }
                                    break;
                                }
                            case HostComponent:
                            case HostText:
                            case HostPortal:
                            case IncompleteClassComponent:
                                break;
                            default:
                                {
                                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                                }
                        }
                        resetCurrentFiber();
                    }
                }
                function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & flags) === flags) {
                                var destroy = effect.destroy;
                                effect.destroy = void 0;
                                if (destroy !== void 0) {
                                    {
                                        if ((flags & Passive$1) !== NoFlags$1) {
                                            markComponentPassiveEffectUnmountStarted(finishedWork);
                                        } else if ((flags & Layout) !== NoFlags$1) {
                                            markComponentLayoutEffectUnmountStarted(finishedWork);
                                        }
                                    }
                                    {
                                        if ((flags & Insertion) !== NoFlags$1) {
                                            setIsRunningInsertionEffect(true);
                                        }
                                    }
                                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                                    {
                                        if ((flags & Insertion) !== NoFlags$1) {
                                            setIsRunningInsertionEffect(false);
                                        }
                                    }
                                    {
                                        if ((flags & Passive$1) !== NoFlags$1) {
                                            markComponentPassiveEffectUnmountStopped();
                                        } else if ((flags & Layout) !== NoFlags$1) {
                                            markComponentLayoutEffectUnmountStopped();
                                        }
                                    }
                                }
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect);
                    }
                }
                function commitHookEffectListMount(flags, finishedWork) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & flags) === flags) {
                                {
                                    if ((flags & Passive$1) !== NoFlags$1) {
                                        markComponentPassiveEffectMountStarted(finishedWork);
                                    } else if ((flags & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectMountStarted(finishedWork);
                                    }
                                }
                                var create = effect.create;
                                {
                                    if ((flags & Insertion) !== NoFlags$1) {
                                        setIsRunningInsertionEffect(true);
                                    }
                                }
                                effect.destroy = create();
                                {
                                    if ((flags & Insertion) !== NoFlags$1) {
                                        setIsRunningInsertionEffect(false);
                                    }
                                }
                                {
                                    if ((flags & Passive$1) !== NoFlags$1) {
                                        markComponentPassiveEffectMountStopped();
                                    } else if ((flags & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectMountStopped();
                                    }
                                }
                                {
                                    var destroy = effect.destroy;
                                    if (destroy !== void 0 && typeof destroy !== "function") {
                                        var hookName = void 0;
                                        if ((effect.tag & Layout) !== NoFlags) {
                                            hookName = "useLayoutEffect";
                                        } else if ((effect.tag & Insertion) !== NoFlags) {
                                            hookName = "useInsertionEffect";
                                        } else {
                                            hookName = "useEffect";
                                        }
                                        var addendum = void 0;
                                        if (destroy === null) {
                                            addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                                        } else if (typeof destroy.then === "function") {
                                            addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                                        } else {
                                            addendum = " You returned: " + destroy;
                                        }
                                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                                    }
                                }
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect);
                    }
                }
                function commitPassiveEffectDurations(finishedRoot, finishedWork) {
                    {
                        if ((finishedWork.flags & Update) !== NoFlags) {
                            switch(finishedWork.tag){
                                case Profiler:
                                    {
                                        var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                                        var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                                        var commitTime2 = getCommitTime();
                                        var phase = finishedWork.alternate === null ? "mount" : "update";
                                        {
                                            if (isCurrentUpdateNested()) {
                                                phase = "nested-update";
                                            }
                                        }
                                        if (typeof onPostCommit === "function") {
                                            onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                                        }
                                        var parentFiber = finishedWork.return;
                                        outer: while(parentFiber !== null){
                                            switch(parentFiber.tag){
                                                case HostRoot:
                                                    var root2 = parentFiber.stateNode;
                                                    root2.passiveEffectDuration += passiveEffectDuration;
                                                    break outer;
                                                case Profiler:
                                                    var parentStateNode = parentFiber.stateNode;
                                                    parentStateNode.passiveEffectDuration += passiveEffectDuration;
                                                    break outer;
                                            }
                                            parentFiber = parentFiber.return;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                }
                function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
                    if ((finishedWork.flags & LayoutMask) !== NoFlags) {
                        switch(finishedWork.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    if (!offscreenSubtreeWasHidden) {
                                        if (finishedWork.mode & ProfileMode) {
                                            try {
                                                startLayoutEffectTimer();
                                                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                                            } finally{
                                                recordLayoutEffectDuration(finishedWork);
                                            }
                                        } else {
                                            commitHookEffectListMount(Layout | HasEffect, finishedWork);
                                        }
                                    }
                                    break;
                                }
                            case ClassComponent:
                                {
                                    var instance = finishedWork.stateNode;
                                    if (finishedWork.flags & Update) {
                                        if (!offscreenSubtreeWasHidden) {
                                            if (current2 === null) {
                                                {
                                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                        if (instance.props !== finishedWork.memoizedProps) {
                                                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                        }
                                                        if (instance.state !== finishedWork.memoizedState) {
                                                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                        }
                                                    }
                                                }
                                                if (finishedWork.mode & ProfileMode) {
                                                    try {
                                                        startLayoutEffectTimer();
                                                        instance.componentDidMount();
                                                    } finally{
                                                        recordLayoutEffectDuration(finishedWork);
                                                    }
                                                } else {
                                                    instance.componentDidMount();
                                                }
                                            } else {
                                                var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                                                var prevState = current2.memoizedState;
                                                {
                                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                        if (instance.props !== finishedWork.memoizedProps) {
                                                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                        }
                                                        if (instance.state !== finishedWork.memoizedState) {
                                                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                        }
                                                    }
                                                }
                                                if (finishedWork.mode & ProfileMode) {
                                                    try {
                                                        startLayoutEffectTimer();
                                                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                                    } finally{
                                                        recordLayoutEffectDuration(finishedWork);
                                                    }
                                                } else {
                                                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                                }
                                            }
                                        }
                                    }
                                    var updateQueue = finishedWork.updateQueue;
                                    if (updateQueue !== null) {
                                        {
                                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                                if (instance.props !== finishedWork.memoizedProps) {
                                                    error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                }
                                                if (instance.state !== finishedWork.memoizedState) {
                                                    error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                                }
                                            }
                                        }
                                        commitUpdateQueue(finishedWork, updateQueue, instance);
                                    }
                                    break;
                                }
                            case HostRoot:
                                {
                                    var _updateQueue = finishedWork.updateQueue;
                                    if (_updateQueue !== null) {
                                        var _instance = null;
                                        if (finishedWork.child !== null) {
                                            switch(finishedWork.child.tag){
                                                case HostComponent:
                                                    _instance = getPublicInstance(finishedWork.child.stateNode);
                                                    break;
                                                case ClassComponent:
                                                    _instance = finishedWork.child.stateNode;
                                                    break;
                                            }
                                        }
                                        commitUpdateQueue(finishedWork, _updateQueue, _instance);
                                    }
                                    break;
                                }
                            case HostComponent:
                                {
                                    var _instance2 = finishedWork.stateNode;
                                    if (current2 === null && finishedWork.flags & Update) {
                                        var type = finishedWork.type;
                                        var props = finishedWork.memoizedProps;
                                        commitMount(_instance2, type, props);
                                    }
                                    break;
                                }
                            case HostText:
                                {
                                    break;
                                }
                            case HostPortal:
                                {
                                    break;
                                }
                            case Profiler:
                                {
                                    {
                                        var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                                        var effectDuration = finishedWork.stateNode.effectDuration;
                                        var commitTime2 = getCommitTime();
                                        var phase = current2 === null ? "mount" : "update";
                                        {
                                            if (isCurrentUpdateNested()) {
                                                phase = "nested-update";
                                            }
                                        }
                                        if (typeof onRender === "function") {
                                            onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                                        }
                                        {
                                            if (typeof onCommit === "function") {
                                                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                                            }
                                            enqueuePendingPassiveProfilerEffect(finishedWork);
                                            var parentFiber = finishedWork.return;
                                            outer: while(parentFiber !== null){
                                                switch(parentFiber.tag){
                                                    case HostRoot:
                                                        var root2 = parentFiber.stateNode;
                                                        root2.effectDuration += effectDuration;
                                                        break outer;
                                                    case Profiler:
                                                        var parentStateNode = parentFiber.stateNode;
                                                        parentStateNode.effectDuration += effectDuration;
                                                        break outer;
                                                }
                                                parentFiber = parentFiber.return;
                                            }
                                        }
                                    }
                                    break;
                                }
                            case SuspenseComponent:
                                {
                                    commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                                    break;
                                }
                            case SuspenseListComponent:
                            case IncompleteClassComponent:
                            case ScopeComponent:
                            case OffscreenComponent:
                            case LegacyHiddenComponent:
                            case TracingMarkerComponent:
                                {
                                    break;
                                }
                            default:
                                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    if (!offscreenSubtreeWasHidden) {
                        {
                            if (finishedWork.flags & Ref) {
                                commitAttachRef(finishedWork);
                            }
                        }
                    }
                }
                function reappearLayoutEffectsOnFiber(node2) {
                    switch(node2.tag){
                        case FunctionComponent:
                        case ForwardRef2:
                        case SimpleMemoComponent:
                            {
                                if (node2.mode & ProfileMode) {
                                    try {
                                        startLayoutEffectTimer();
                                        safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                                    } finally{
                                        recordLayoutEffectDuration(node2);
                                    }
                                } else {
                                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                                }
                                break;
                            }
                        case ClassComponent:
                            {
                                var instance = node2.stateNode;
                                if (typeof instance.componentDidMount === "function") {
                                    safelyCallComponentDidMount(node2, node2.return, instance);
                                }
                                safelyAttachRef(node2, node2.return);
                                break;
                            }
                        case HostComponent:
                            {
                                safelyAttachRef(node2, node2.return);
                                break;
                            }
                    }
                }
                function hideOrUnhideAllChildren(finishedWork, isHidden) {
                    var hostSubtreeRoot = null;
                    {
                        var node2 = finishedWork;
                        while(true){
                            if (node2.tag === HostComponent) {
                                if (hostSubtreeRoot === null) {
                                    hostSubtreeRoot = node2;
                                    try {
                                        var instance = node2.stateNode;
                                        if (isHidden) {
                                            hideInstance(instance);
                                        } else {
                                            unhideInstance(node2.stateNode, node2.memoizedProps);
                                        }
                                    } catch (error2) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                    }
                                }
                            } else if (node2.tag === HostText) {
                                if (hostSubtreeRoot === null) {
                                    try {
                                        var _instance3 = node2.stateNode;
                                        if (isHidden) {
                                            hideTextInstance(_instance3);
                                        } else {
                                            unhideTextInstance(_instance3, node2.memoizedProps);
                                        }
                                    } catch (error2) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                    }
                                }
                            } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                            else if (node2.child !== null) {
                                node2.child.return = node2;
                                node2 = node2.child;
                                continue;
                            }
                            if (node2 === finishedWork) {
                                return;
                            }
                            while(node2.sibling === null){
                                if (node2.return === null || node2.return === finishedWork) {
                                    return;
                                }
                                if (hostSubtreeRoot === node2) {
                                    hostSubtreeRoot = null;
                                }
                                node2 = node2.return;
                            }
                            if (hostSubtreeRoot === node2) {
                                hostSubtreeRoot = null;
                            }
                            node2.sibling.return = node2.return;
                            node2 = node2.sibling;
                        }
                    }
                }
                function commitAttachRef(finishedWork) {
                    var ref = finishedWork.ref;
                    if (ref !== null) {
                        var instance = finishedWork.stateNode;
                        var instanceToUse;
                        switch(finishedWork.tag){
                            case HostComponent:
                                instanceToUse = getPublicInstance(instance);
                                break;
                            default:
                                instanceToUse = instance;
                        }
                        if (typeof ref === "function") {
                            var retVal;
                            if (finishedWork.mode & ProfileMode) {
                                try {
                                    startLayoutEffectTimer();
                                    retVal = ref(instanceToUse);
                                } finally{
                                    recordLayoutEffectDuration(finishedWork);
                                }
                            } else {
                                retVal = ref(instanceToUse);
                            }
                            {
                                if (typeof retVal === "function") {
                                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                                }
                            }
                        } else {
                            {
                                if (!ref.hasOwnProperty("current")) {
                                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                                }
                            }
                            ref.current = instanceToUse;
                        }
                    }
                }
                function detachFiberMutation(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        alternate.return = null;
                    }
                    fiber.return = null;
                }
                function detachFiberAfterEffects(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                        fiber.alternate = null;
                        detachFiberAfterEffects(alternate);
                    }
                    {
                        fiber.child = null;
                        fiber.deletions = null;
                        fiber.sibling = null;
                        if (fiber.tag === HostComponent) {
                            var hostInstance = fiber.stateNode;
                            if (hostInstance !== null) {
                                detachDeletedInstance(hostInstance);
                            }
                        }
                        fiber.stateNode = null;
                        {
                            fiber._debugOwner = null;
                        }
                        {
                            fiber.return = null;
                            fiber.dependencies = null;
                            fiber.memoizedProps = null;
                            fiber.memoizedState = null;
                            fiber.pendingProps = null;
                            fiber.stateNode = null;
                            fiber.updateQueue = null;
                        }
                    }
                }
                function getHostParentFiber(fiber) {
                    var parent = fiber.return;
                    while(parent !== null){
                        if (isHostParent(parent)) {
                            return parent;
                        }
                        parent = parent.return;
                    }
                    throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                }
                function isHostParent(fiber) {
                    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
                }
                function getHostSibling(fiber) {
                    var node2 = fiber;
                    siblings: while(true){
                        while(node2.sibling === null){
                            if (node2.return === null || isHostParent(node2.return)) {
                                return null;
                            }
                            node2 = node2.return;
                        }
                        node2.sibling.return = node2.return;
                        node2 = node2.sibling;
                        while(node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment){
                            if (node2.flags & Placement) {
                                continue siblings;
                            }
                            if (node2.child === null || node2.tag === HostPortal) {
                                continue siblings;
                            } else {
                                node2.child.return = node2;
                                node2 = node2.child;
                            }
                        }
                        if (!(node2.flags & Placement)) {
                            return node2.stateNode;
                        }
                    }
                }
                function commitPlacement(finishedWork) {
                    var parentFiber = getHostParentFiber(finishedWork);
                    switch(parentFiber.tag){
                        case HostComponent:
                            {
                                var parent = parentFiber.stateNode;
                                if (parentFiber.flags & ContentReset) {
                                    resetTextContent(parent);
                                    parentFiber.flags &= ~ContentReset;
                                }
                                var before = getHostSibling(finishedWork);
                                insertOrAppendPlacementNode(finishedWork, before, parent);
                                break;
                            }
                        case HostRoot:
                        case HostPortal:
                            {
                                var _parent = parentFiber.stateNode.containerInfo;
                                var _before = getHostSibling(finishedWork);
                                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                                break;
                            }
                        // eslint-disable-next-line-no-fallthrough
                        default:
                            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                    }
                }
                function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
                    var tag = node2.tag;
                    var isHost = tag === HostComponent || tag === HostText;
                    if (isHost) {
                        var stateNode = node2.stateNode;
                        if (before) {
                            insertInContainerBefore(parent, stateNode, before);
                        } else {
                            appendChildToContainer(parent, stateNode);
                        }
                    } else if (tag === HostPortal) ;
                    else {
                        var child = node2.child;
                        if (child !== null) {
                            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                            var sibling = child.sibling;
                            while(sibling !== null){
                                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                                sibling = sibling.sibling;
                            }
                        }
                    }
                }
                function insertOrAppendPlacementNode(node2, before, parent) {
                    var tag = node2.tag;
                    var isHost = tag === HostComponent || tag === HostText;
                    if (isHost) {
                        var stateNode = node2.stateNode;
                        if (before) {
                            insertBefore(parent, stateNode, before);
                        } else {
                            appendChild(parent, stateNode);
                        }
                    } else if (tag === HostPortal) ;
                    else {
                        var child = node2.child;
                        if (child !== null) {
                            insertOrAppendPlacementNode(child, before, parent);
                            var sibling = child.sibling;
                            while(sibling !== null){
                                insertOrAppendPlacementNode(sibling, before, parent);
                                sibling = sibling.sibling;
                            }
                        }
                    }
                }
                var hostParent = null;
                var hostParentIsContainer = false;
                function commitDeletionEffects(root2, returnFiber, deletedFiber) {
                    {
                        var parent = returnFiber;
                        findParent: while(parent !== null){
                            switch(parent.tag){
                                case HostComponent:
                                    {
                                        hostParent = parent.stateNode;
                                        hostParentIsContainer = false;
                                        break findParent;
                                    }
                                case HostRoot:
                                    {
                                        hostParent = parent.stateNode.containerInfo;
                                        hostParentIsContainer = true;
                                        break findParent;
                                    }
                                case HostPortal:
                                    {
                                        hostParent = parent.stateNode.containerInfo;
                                        hostParentIsContainer = true;
                                        break findParent;
                                    }
                            }
                            parent = parent.return;
                        }
                        if (hostParent === null) {
                            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                        }
                        commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
                        hostParent = null;
                        hostParentIsContainer = false;
                    }
                    detachFiberMutation(deletedFiber);
                }
                function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
                    var child = parent.child;
                    while(child !== null){
                        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
                        child = child.sibling;
                    }
                }
                function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
                    onCommitUnmount(deletedFiber);
                    switch(deletedFiber.tag){
                        case HostComponent:
                            {
                                if (!offscreenSubtreeWasHidden) {
                                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                                }
                            }
                        // eslint-disable-next-line-no-fallthrough
                        case HostText:
                            {
                                {
                                    var prevHostParent = hostParent;
                                    var prevHostParentIsContainer = hostParentIsContainer;
                                    hostParent = null;
                                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                    hostParent = prevHostParent;
                                    hostParentIsContainer = prevHostParentIsContainer;
                                    if (hostParent !== null) {
                                        if (hostParentIsContainer) {
                                            removeChildFromContainer(hostParent, deletedFiber.stateNode);
                                        } else {
                                            removeChild(hostParent, deletedFiber.stateNode);
                                        }
                                    }
                                }
                                return;
                            }
                        case DehydratedFragment:
                            {
                                {
                                    if (hostParent !== null) {
                                        if (hostParentIsContainer) {
                                            clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                                        } else {
                                            clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                                        }
                                    }
                                }
                                return;
                            }
                        case HostPortal:
                            {
                                {
                                    var _prevHostParent = hostParent;
                                    var _prevHostParentIsContainer = hostParentIsContainer;
                                    hostParent = deletedFiber.stateNode.containerInfo;
                                    hostParentIsContainer = true;
                                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                    hostParent = _prevHostParent;
                                    hostParentIsContainer = _prevHostParentIsContainer;
                                }
                                return;
                            }
                        case FunctionComponent:
                        case ForwardRef2:
                        case MemoComponent:
                        case SimpleMemoComponent:
                            {
                                if (!offscreenSubtreeWasHidden) {
                                    var updateQueue = deletedFiber.updateQueue;
                                    if (updateQueue !== null) {
                                        var lastEffect = updateQueue.lastEffect;
                                        if (lastEffect !== null) {
                                            var firstEffect = lastEffect.next;
                                            var effect = firstEffect;
                                            do {
                                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                                if (destroy !== void 0) {
                                                    if ((tag & Insertion) !== NoFlags$1) {
                                                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                    } else if ((tag & Layout) !== NoFlags$1) {
                                                        {
                                                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                                                        }
                                                        if (deletedFiber.mode & ProfileMode) {
                                                            startLayoutEffectTimer();
                                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                            recordLayoutEffectDuration(deletedFiber);
                                                        } else {
                                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                                        }
                                                        {
                                                            markComponentLayoutEffectUnmountStopped();
                                                        }
                                                    }
                                                }
                                                effect = effect.next;
                                            }while (effect !== firstEffect);
                                        }
                                    }
                                }
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                return;
                            }
                        case ClassComponent:
                            {
                                if (!offscreenSubtreeWasHidden) {
                                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                                    var instance = deletedFiber.stateNode;
                                    if (typeof instance.componentWillUnmount === "function") {
                                        safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                                    }
                                }
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                return;
                            }
                        case ScopeComponent:
                            {
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                return;
                            }
                        case OffscreenComponent:
                            {
                                if (// TODO: Remove this dead flag
                                deletedFiber.mode & ConcurrentMode) {
                                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                                } else {
                                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                }
                                break;
                            }
                        default:
                            {
                                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                                return;
                            }
                    }
                }
                function commitSuspenseCallback(finishedWork) {
                    var newState = finishedWork.memoizedState;
                }
                function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
                    var newState = finishedWork.memoizedState;
                    if (newState === null) {
                        var current2 = finishedWork.alternate;
                        if (current2 !== null) {
                            var prevState = current2.memoizedState;
                            if (prevState !== null) {
                                var suspenseInstance = prevState.dehydrated;
                                if (suspenseInstance !== null) {
                                    commitHydratedSuspenseInstance(suspenseInstance);
                                }
                            }
                        }
                    }
                }
                function attachSuspenseRetryListeners(finishedWork) {
                    var wakeables = finishedWork.updateQueue;
                    if (wakeables !== null) {
                        finishedWork.updateQueue = null;
                        var retryCache = finishedWork.stateNode;
                        if (retryCache === null) {
                            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                        }
                        wakeables.forEach(function(wakeable) {
                            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                            if (!retryCache.has(wakeable)) {
                                retryCache.add(wakeable);
                                {
                                    if (isDevToolsPresent) {
                                        if (inProgressLanes !== null && inProgressRoot !== null) {
                                            restorePendingUpdaters(inProgressRoot, inProgressLanes);
                                        } else {
                                            throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                                        }
                                    }
                                }
                                wakeable.then(retry, retry);
                            }
                        });
                    }
                }
                function commitMutationEffects(root2, finishedWork, committedLanes) {
                    inProgressLanes = committedLanes;
                    inProgressRoot = root2;
                    setCurrentFiber(finishedWork);
                    commitMutationEffectsOnFiber(finishedWork, root2);
                    setCurrentFiber(finishedWork);
                    inProgressLanes = null;
                    inProgressRoot = null;
                }
                function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
                    var deletions = parentFiber.deletions;
                    if (deletions !== null) {
                        for(var i = 0; i < deletions.length; i++){
                            var childToDelete = deletions[i];
                            try {
                                commitDeletionEffects(root2, parentFiber, childToDelete);
                            } catch (error2) {
                                captureCommitPhaseError(childToDelete, parentFiber, error2);
                            }
                        }
                    }
                    var prevDebugFiber = getCurrentFiber();
                    if (parentFiber.subtreeFlags & MutationMask) {
                        var child = parentFiber.child;
                        while(child !== null){
                            setCurrentFiber(child);
                            commitMutationEffectsOnFiber(child, root2);
                            child = child.sibling;
                        }
                    }
                    setCurrentFiber(prevDebugFiber);
                }
                function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
                    var current2 = finishedWork.alternate;
                    var flags = finishedWork.flags;
                    switch(finishedWork.tag){
                        case FunctionComponent:
                        case ForwardRef2:
                        case MemoComponent:
                        case SimpleMemoComponent:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Update) {
                                    try {
                                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                                    } catch (error2) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                    }
                                    if (finishedWork.mode & ProfileMode) {
                                        try {
                                            startLayoutEffectTimer();
                                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                                        } catch (error2) {
                                            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                        }
                                        recordLayoutEffectDuration(finishedWork);
                                    } else {
                                        try {
                                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                                        } catch (error2) {
                                            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                        }
                                    }
                                }
                                return;
                            }
                        case ClassComponent:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Ref) {
                                    if (current2 !== null) {
                                        safelyDetachRef(current2, current2.return);
                                    }
                                }
                                return;
                            }
                        case HostComponent:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Ref) {
                                    if (current2 !== null) {
                                        safelyDetachRef(current2, current2.return);
                                    }
                                }
                                {
                                    if (finishedWork.flags & ContentReset) {
                                        var instance = finishedWork.stateNode;
                                        try {
                                            resetTextContent(instance);
                                        } catch (error2) {
                                            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                        }
                                    }
                                    if (flags & Update) {
                                        var _instance4 = finishedWork.stateNode;
                                        if (_instance4 != null) {
                                            var newProps = finishedWork.memoizedProps;
                                            var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                                            var type = finishedWork.type;
                                            var updatePayload = finishedWork.updateQueue;
                                            finishedWork.updateQueue = null;
                                            if (updatePayload !== null) {
                                                try {
                                                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                                                } catch (error2) {
                                                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                                }
                                            }
                                        }
                                    }
                                }
                                return;
                            }
                        case HostText:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Update) {
                                    {
                                        if (finishedWork.stateNode === null) {
                                            throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                                        }
                                        var textInstance = finishedWork.stateNode;
                                        var newText = finishedWork.memoizedProps;
                                        var oldText = current2 !== null ? current2.memoizedProps : newText;
                                        try {
                                            commitTextUpdate(textInstance, oldText, newText);
                                        } catch (error2) {
                                            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                        }
                                    }
                                }
                                return;
                            }
                        case HostRoot:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Update) {
                                    {
                                        if (current2 !== null) {
                                            var prevRootState = current2.memoizedState;
                                            if (prevRootState.isDehydrated) {
                                                try {
                                                    commitHydratedContainer(root2.containerInfo);
                                                } catch (error2) {
                                                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                                }
                                            }
                                        }
                                    }
                                }
                                return;
                            }
                        case HostPortal:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                return;
                            }
                        case SuspenseComponent:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                var offscreenFiber = finishedWork.child;
                                if (offscreenFiber.flags & Visibility) {
                                    var offscreenInstance = offscreenFiber.stateNode;
                                    var newState = offscreenFiber.memoizedState;
                                    var isHidden = newState !== null;
                                    offscreenInstance.isHidden = isHidden;
                                    if (isHidden) {
                                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                                        if (!wasHidden) {
                                            markCommitTimeOfFallback();
                                        }
                                    }
                                }
                                if (flags & Update) {
                                    try {
                                        commitSuspenseCallback(finishedWork);
                                    } catch (error2) {
                                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                                    }
                                    attachSuspenseRetryListeners(finishedWork);
                                }
                                return;
                            }
                        case OffscreenComponent:
                            {
                                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                                if (// TODO: Remove this dead flag
                                finishedWork.mode & ConcurrentMode) {
                                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                                    recursivelyTraverseMutationEffects(root2, finishedWork);
                                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                                } else {
                                    recursivelyTraverseMutationEffects(root2, finishedWork);
                                }
                                commitReconciliationEffects(finishedWork);
                                if (flags & Visibility) {
                                    var _offscreenInstance = finishedWork.stateNode;
                                    var _newState = finishedWork.memoizedState;
                                    var _isHidden = _newState !== null;
                                    var offscreenBoundary = finishedWork;
                                    _offscreenInstance.isHidden = _isHidden;
                                    {
                                        if (_isHidden) {
                                            if (!_wasHidden) {
                                                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                                    nextEffect = offscreenBoundary;
                                                    var offscreenChild = offscreenBoundary.child;
                                                    while(offscreenChild !== null){
                                                        nextEffect = offscreenChild;
                                                        disappearLayoutEffects_begin(offscreenChild);
                                                        offscreenChild = offscreenChild.sibling;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    {
                                        hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                                    }
                                }
                                return;
                            }
                        case SuspenseListComponent:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                if (flags & Update) {
                                    attachSuspenseRetryListeners(finishedWork);
                                }
                                return;
                            }
                        case ScopeComponent:
                            {
                                return;
                            }
                        default:
                            {
                                recursivelyTraverseMutationEffects(root2, finishedWork);
                                commitReconciliationEffects(finishedWork);
                                return;
                            }
                    }
                }
                function commitReconciliationEffects(finishedWork) {
                    var flags = finishedWork.flags;
                    if (flags & Placement) {
                        try {
                            commitPlacement(finishedWork);
                        } catch (error2) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                        finishedWork.flags &= ~Placement;
                    }
                    if (flags & Hydrating) {
                        finishedWork.flags &= ~Hydrating;
                    }
                }
                function commitLayoutEffects(finishedWork, root2, committedLanes) {
                    inProgressLanes = committedLanes;
                    inProgressRoot = root2;
                    nextEffect = finishedWork;
                    commitLayoutEffects_begin(finishedWork, root2, committedLanes);
                    inProgressLanes = null;
                    inProgressRoot = null;
                }
                function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
                    var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if (fiber.tag === OffscreenComponent && isModernRoot) {
                            var isHidden = fiber.memoizedState !== null;
                            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                            if (newOffscreenSubtreeIsHidden) {
                                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                                continue;
                            } else {
                                var current2 = fiber.alternate;
                                var wasHidden = current2 !== null && current2.memoizedState !== null;
                                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                                    nextEffect = fiber;
                                    reappearLayoutEffects_begin(fiber);
                                }
                                var child = firstChild;
                                while(child !== null){
                                    nextEffect = child;
                                    commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
                                    root2, committedLanes);
                                    child = child.sibling;
                                }
                                nextEffect = fiber;
                                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                                continue;
                            }
                        }
                        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                        }
                    }
                }
                function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        if ((fiber.flags & LayoutMask) !== NoFlags) {
                            var current2 = fiber.alternate;
                            setCurrentFiber(fiber);
                            try {
                                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                            } catch (error2) {
                                captureCommitPhaseError(fiber, fiber.return, error2);
                            }
                            resetCurrentFiber();
                        }
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function disappearLayoutEffects_begin(subtreeRoot) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        switch(fiber.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case MemoComponent:
                            case SimpleMemoComponent:
                                {
                                    if (fiber.mode & ProfileMode) {
                                        try {
                                            startLayoutEffectTimer();
                                            commitHookEffectListUnmount(Layout, fiber, fiber.return);
                                        } finally{
                                            recordLayoutEffectDuration(fiber);
                                        }
                                    } else {
                                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                                    }
                                    break;
                                }
                            case ClassComponent:
                                {
                                    safelyDetachRef(fiber, fiber.return);
                                    var instance = fiber.stateNode;
                                    if (typeof instance.componentWillUnmount === "function") {
                                        safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                                    }
                                    break;
                                }
                            case HostComponent:
                                {
                                    safelyDetachRef(fiber, fiber.return);
                                    break;
                                }
                            case OffscreenComponent:
                                {
                                    var isHidden = fiber.memoizedState !== null;
                                    if (isHidden) {
                                        disappearLayoutEffects_complete(subtreeRoot);
                                        continue;
                                    }
                                    break;
                                }
                        }
                        if (firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            disappearLayoutEffects_complete(subtreeRoot);
                        }
                    }
                }
                function disappearLayoutEffects_complete(subtreeRoot) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function reappearLayoutEffects_begin(subtreeRoot) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if (fiber.tag === OffscreenComponent) {
                            var isHidden = fiber.memoizedState !== null;
                            if (isHidden) {
                                reappearLayoutEffects_complete(subtreeRoot);
                                continue;
                            }
                        }
                        if (firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            reappearLayoutEffects_complete(subtreeRoot);
                        }
                    }
                }
                function reappearLayoutEffects_complete(subtreeRoot) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        try {
                            reappearLayoutEffectsOnFiber(fiber);
                        } catch (error2) {
                            captureCommitPhaseError(fiber, fiber.return, error2);
                        }
                        resetCurrentFiber();
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
                    nextEffect = finishedWork;
                    commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
                }
                function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var firstChild = fiber.child;
                        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                            firstChild.return = fiber;
                            nextEffect = firstChild;
                        } else {
                            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
                        }
                    }
                }
                function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        if ((fiber.flags & Passive) !== NoFlags) {
                            setCurrentFiber(fiber);
                            try {
                                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                            } catch (error2) {
                                captureCommitPhaseError(fiber, fiber.return, error2);
                            }
                            resetCurrentFiber();
                        }
                        if (fiber === subtreeRoot) {
                            nextEffect = null;
                            return;
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
                    switch(finishedWork.tag){
                        case FunctionComponent:
                        case ForwardRef2:
                        case SimpleMemoComponent:
                            {
                                if (finishedWork.mode & ProfileMode) {
                                    startPassiveEffectTimer();
                                    try {
                                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                                    } finally{
                                        recordPassiveEffectDuration(finishedWork);
                                    }
                                } else {
                                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                                }
                                break;
                            }
                    }
                }
                function commitPassiveUnmountEffects(firstChild) {
                    nextEffect = firstChild;
                    commitPassiveUnmountEffects_begin();
                }
                function commitPassiveUnmountEffects_begin() {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var child = fiber.child;
                        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                            var deletions = fiber.deletions;
                            if (deletions !== null) {
                                for(var i = 0; i < deletions.length; i++){
                                    var fiberToDelete = deletions[i];
                                    nextEffect = fiberToDelete;
                                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                                }
                                {
                                    var previousFiber = fiber.alternate;
                                    if (previousFiber !== null) {
                                        var detachedChild = previousFiber.child;
                                        if (detachedChild !== null) {
                                            previousFiber.child = null;
                                            do {
                                                var detachedSibling = detachedChild.sibling;
                                                detachedChild.sibling = null;
                                                detachedChild = detachedSibling;
                                            }while (detachedChild !== null);
                                        }
                                    }
                                }
                                nextEffect = fiber;
                            }
                        }
                        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitPassiveUnmountEffects_complete();
                        }
                    }
                }
                function commitPassiveUnmountEffects_complete() {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        if ((fiber.flags & Passive) !== NoFlags) {
                            setCurrentFiber(fiber);
                            commitPassiveUnmountOnFiber(fiber);
                            resetCurrentFiber();
                        }
                        var sibling = fiber.sibling;
                        if (sibling !== null) {
                            sibling.return = fiber.return;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = fiber.return;
                    }
                }
                function commitPassiveUnmountOnFiber(finishedWork) {
                    switch(finishedWork.tag){
                        case FunctionComponent:
                        case ForwardRef2:
                        case SimpleMemoComponent:
                            {
                                if (finishedWork.mode & ProfileMode) {
                                    startPassiveEffectTimer();
                                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                                    recordPassiveEffectDuration(finishedWork);
                                } else {
                                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                                }
                                break;
                            }
                    }
                }
                function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        setCurrentFiber(fiber);
                        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
                        resetCurrentFiber();
                        var child = fiber.child;
                        if (child !== null) {
                            child.return = fiber;
                            nextEffect = child;
                        } else {
                            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
                        }
                    }
                }
                function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
                    while(nextEffect !== null){
                        var fiber = nextEffect;
                        var sibling = fiber.sibling;
                        var returnFiber = fiber.return;
                        {
                            detachFiberAfterEffects(fiber);
                            if (fiber === deletedSubtreeRoot) {
                                nextEffect = null;
                                return;
                            }
                        }
                        if (sibling !== null) {
                            sibling.return = returnFiber;
                            nextEffect = sibling;
                            return;
                        }
                        nextEffect = returnFiber;
                    }
                }
                function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
                    switch(current2.tag){
                        case FunctionComponent:
                        case ForwardRef2:
                        case SimpleMemoComponent:
                            {
                                if (current2.mode & ProfileMode) {
                                    startPassiveEffectTimer();
                                    commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                                    recordPassiveEffectDuration(current2);
                                } else {
                                    commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                                }
                                break;
                            }
                    }
                }
                function invokeLayoutEffectMountInDEV(fiber) {
                    {
                        switch(fiber.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    try {
                                        commitHookEffectListMount(Layout | HasEffect, fiber);
                                    } catch (error2) {
                                        captureCommitPhaseError(fiber, fiber.return, error2);
                                    }
                                    break;
                                }
                            case ClassComponent:
                                {
                                    var instance = fiber.stateNode;
                                    try {
                                        instance.componentDidMount();
                                    } catch (error2) {
                                        captureCommitPhaseError(fiber, fiber.return, error2);
                                    }
                                    break;
                                }
                        }
                    }
                }
                function invokePassiveEffectMountInDEV(fiber) {
                    {
                        switch(fiber.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    try {
                                        commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                                    } catch (error2) {
                                        captureCommitPhaseError(fiber, fiber.return, error2);
                                    }
                                    break;
                                }
                        }
                    }
                }
                function invokeLayoutEffectUnmountInDEV(fiber) {
                    {
                        switch(fiber.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    try {
                                        commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                                    } catch (error2) {
                                        captureCommitPhaseError(fiber, fiber.return, error2);
                                    }
                                    break;
                                }
                            case ClassComponent:
                                {
                                    var instance = fiber.stateNode;
                                    if (typeof instance.componentWillUnmount === "function") {
                                        safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                                    }
                                    break;
                                }
                        }
                    }
                }
                function invokePassiveEffectUnmountInDEV(fiber) {
                    {
                        switch(fiber.tag){
                            case FunctionComponent:
                            case ForwardRef2:
                            case SimpleMemoComponent:
                                {
                                    try {
                                        commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                                    } catch (error2) {
                                        captureCommitPhaseError(fiber, fiber.return, error2);
                                    }
                                }
                        }
                    }
                }
                var COMPONENT_TYPE = 0;
                var HAS_PSEUDO_CLASS_TYPE = 1;
                var ROLE_TYPE = 2;
                var TEST_NAME_TYPE = 3;
                var TEXT_TYPE = 4;
                if (typeof Symbol === "function" && Symbol.for) {
                    var symbolFor = Symbol.for;
                    COMPONENT_TYPE = symbolFor("selector.component");
                    HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
                    ROLE_TYPE = symbolFor("selector.role");
                    TEST_NAME_TYPE = symbolFor("selector.test_id");
                    TEXT_TYPE = symbolFor("selector.text");
                }
                var commitHooks = [];
                function onCommitRoot$1() {
                    {
                        commitHooks.forEach(function(commitHook) {
                            return commitHook();
                        });
                    }
                }
                var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
                function isLegacyActEnvironment(fiber) {
                    {
                        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                        typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
                        var jestIsDefined = typeof jest !== "undefined";
                        return jestIsDefined && isReactActEnvironmentGlobal !== false;
                    }
                }
                function isConcurrentActEnvironment() {
                    {
                        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                        typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
                        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                            error("The current testing environment is not configured to support act(...)");
                        }
                        return isReactActEnvironmentGlobal;
                    }
                }
                var ceil = Math.ceil;
                var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
                var NoContext = /*             */ 0;
                var BatchedContext = /*               */ 1;
                var RenderContext = /*                */ 2;
                var CommitContext = /*                */ 4;
                var RootInProgress = 0;
                var RootFatalErrored = 1;
                var RootErrored = 2;
                var RootSuspended = 3;
                var RootSuspendedWithDelay = 4;
                var RootCompleted = 5;
                var RootDidNotComplete = 6;
                var executionContext = NoContext;
                var workInProgressRoot = null;
                var workInProgress = null;
                var workInProgressRootRenderLanes = NoLanes;
                var subtreeRenderLanes = NoLanes;
                var subtreeRenderLanesCursor = createCursor(NoLanes);
                var workInProgressRootExitStatus = RootInProgress;
                var workInProgressRootFatalError = null;
                var workInProgressRootIncludedLanes = NoLanes;
                var workInProgressRootSkippedLanes = NoLanes;
                var workInProgressRootInterleavedUpdatedLanes = NoLanes;
                var workInProgressRootPingedLanes = NoLanes;
                var workInProgressRootConcurrentErrors = null;
                var workInProgressRootRecoverableErrors = null;
                var globalMostRecentFallbackTime = 0;
                var FALLBACK_THROTTLE_MS = 500;
                var workInProgressRootRenderTargetTime = Infinity;
                var RENDER_TIMEOUT_MS = 500;
                var workInProgressTransitions = null;
                function resetRenderTimer() {
                    workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
                }
                function getRenderTargetTime() {
                    return workInProgressRootRenderTargetTime;
                }
                var hasUncaughtError = false;
                var firstUncaughtError = null;
                var legacyErrorBoundariesThatAlreadyFailed = null;
                var rootDoesHavePassiveEffects = false;
                var rootWithPendingPassiveEffects = null;
                var pendingPassiveEffectsLanes = NoLanes;
                var pendingPassiveProfilerEffects = [];
                var pendingPassiveTransitions = null;
                var NESTED_UPDATE_LIMIT = 50;
                var nestedUpdateCount = 0;
                var rootWithNestedUpdates = null;
                var isFlushingPassiveEffects = false;
                var didScheduleUpdateDuringPassiveEffects = false;
                var NESTED_PASSIVE_UPDATE_LIMIT = 50;
                var nestedPassiveUpdateCount = 0;
                var rootWithPassiveNestedUpdates = null;
                var currentEventTime = NoTimestamp;
                var currentEventTransitionLane = NoLanes;
                var isRunningInsertionEffect = false;
                function getWorkInProgressRoot() {
                    return workInProgressRoot;
                }
                function requestEventTime() {
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        return now();
                    }
                    if (currentEventTime !== NoTimestamp) {
                        return currentEventTime;
                    }
                    currentEventTime = now();
                    return currentEventTime;
                }
                function requestUpdateLane(fiber) {
                    var mode = fiber.mode;
                    if ((mode & ConcurrentMode) === NoMode) {
                        return SyncLane;
                    } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
                        return pickArbitraryLane(workInProgressRootRenderLanes);
                    }
                    var isTransition = requestCurrentTransition() !== NoTransition;
                    if (isTransition) {
                        if (ReactCurrentBatchConfig$3.transition !== null) {
                            var transition = ReactCurrentBatchConfig$3.transition;
                            if (!transition._updatedFibers) {
                                transition._updatedFibers = /* @__PURE__ */ new Set();
                            }
                            transition._updatedFibers.add(fiber);
                        }
                        if (currentEventTransitionLane === NoLane) {
                            currentEventTransitionLane = claimNextTransitionLane();
                        }
                        return currentEventTransitionLane;
                    }
                    var updateLane = getCurrentUpdatePriority();
                    if (updateLane !== NoLane) {
                        return updateLane;
                    }
                    var eventLane = getCurrentEventPriority();
                    return eventLane;
                }
                function requestRetryLane(fiber) {
                    var mode = fiber.mode;
                    if ((mode & ConcurrentMode) === NoMode) {
                        return SyncLane;
                    }
                    return claimNextRetryLane();
                }
                function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
                    checkForNestedUpdates();
                    {
                        if (isRunningInsertionEffect) {
                            error("useInsertionEffect must not schedule updates.");
                        }
                    }
                    {
                        if (isFlushingPassiveEffects) {
                            didScheduleUpdateDuringPassiveEffects = true;
                        }
                    }
                    markRootUpdated(root2, lane, eventTime);
                    if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
                        warnAboutRenderPhaseUpdatesInDEV(fiber);
                    } else {
                        {
                            if (isDevToolsPresent) {
                                addFiberToLanesMap(root2, fiber, lane);
                            }
                        }
                        warnIfUpdatesNotWrappedWithActDEV(fiber);
                        if (root2 === workInProgressRoot) {
                            if ((executionContext & RenderContext) === NoContext) {
                                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                            }
                            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                                markRootSuspended$1(root2, workInProgressRootRenderLanes);
                            }
                        }
                        ensureRootIsScheduled(root2, eventTime);
                        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
                        !ReactCurrentActQueue$1.isBatchingLegacy) {
                            resetRenderTimer();
                            flushSyncCallbacksOnlyInLegacyMode();
                        }
                    }
                }
                function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
                    var current2 = root2.current;
                    current2.lanes = lane;
                    markRootUpdated(root2, lane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                }
                function isUnsafeClassRenderPhaseUpdate(fiber) {
                    return(// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
                    // decided not to enable it.
                    (executionContext & RenderContext) !== NoContext);
                }
                function ensureRootIsScheduled(root2, currentTime) {
                    var existingCallbackNode = root2.callbackNode;
                    markStarvedLanesAsExpired(root2, currentTime);
                    var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
                    if (nextLanes === NoLanes) {
                        if (existingCallbackNode !== null) {
                            cancelCallback$1(existingCallbackNode);
                        }
                        root2.callbackNode = null;
                        root2.callbackPriority = NoLane;
                        return;
                    }
                    var newCallbackPriority = getHighestPriorityLane(nextLanes);
                    var existingCallbackPriority = root2.callbackPriority;
                    if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
                    // Scheduler task, rather than an `act` task, cancel it and re-scheduled
                    // on the `act` queue.
                    !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
                        {
                            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        return;
                    }
                    if (existingCallbackNode != null) {
                        cancelCallback$1(existingCallbackNode);
                    }
                    var newCallbackNode;
                    if (newCallbackPriority === SyncLane) {
                        if (root2.tag === LegacyRoot) {
                            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                            }
                            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
                        } else {
                            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
                        }
                        {
                            if (ReactCurrentActQueue$1.current !== null) {
                                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                            } else {
                                scheduleMicrotask(function() {
                                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                                        flushSyncCallbacks();
                                    }
                                });
                            }
                        }
                        newCallbackNode = null;
                    } else {
                        var schedulerPriorityLevel;
                        switch(lanesToEventPriority(nextLanes)){
                            case DiscreteEventPriority:
                                schedulerPriorityLevel = ImmediatePriority;
                                break;
                            case ContinuousEventPriority:
                                schedulerPriorityLevel = UserBlockingPriority;
                                break;
                            case DefaultEventPriority:
                                schedulerPriorityLevel = NormalPriority;
                                break;
                            case IdleEventPriority:
                                schedulerPriorityLevel = IdlePriority;
                                break;
                            default:
                                schedulerPriorityLevel = NormalPriority;
                                break;
                        }
                        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
                    }
                    root2.callbackPriority = newCallbackPriority;
                    root2.callbackNode = newCallbackNode;
                }
                function performConcurrentWorkOnRoot(root2, didTimeout) {
                    {
                        resetNestedUpdateFlag();
                    }
                    currentEventTime = NoTimestamp;
                    currentEventTransitionLane = NoLanes;
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    var originalCallbackNode = root2.callbackNode;
                    var didFlushPassiveEffects = flushPassiveEffects();
                    if (didFlushPassiveEffects) {
                        if (root2.callbackNode !== originalCallbackNode) {
                            return null;
                        }
                    }
                    var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
                    if (lanes === NoLanes) {
                        return null;
                    }
                    var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
                    var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
                    if (exitStatus !== RootInProgress) {
                        if (exitStatus === RootErrored) {
                            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                            if (errorRetryLanes !== NoLanes) {
                                lanes = errorRetryLanes;
                                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                            }
                        }
                        if (exitStatus === RootFatalErrored) {
                            var fatalError = workInProgressRootFatalError;
                            prepareFreshStack(root2, NoLanes);
                            markRootSuspended$1(root2, lanes);
                            ensureRootIsScheduled(root2, now());
                            throw fatalError;
                        }
                        if (exitStatus === RootDidNotComplete) {
                            markRootSuspended$1(root2, lanes);
                        } else {
                            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                            var finishedWork = root2.current.alternate;
                            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                                exitStatus = renderRootSync(root2, lanes);
                                if (exitStatus === RootErrored) {
                                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                                    if (_errorRetryLanes !== NoLanes) {
                                        lanes = _errorRetryLanes;
                                        exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                                    }
                                }
                                if (exitStatus === RootFatalErrored) {
                                    var _fatalError = workInProgressRootFatalError;
                                    prepareFreshStack(root2, NoLanes);
                                    markRootSuspended$1(root2, lanes);
                                    ensureRootIsScheduled(root2, now());
                                    throw _fatalError;
                                }
                            }
                            root2.finishedWork = finishedWork;
                            root2.finishedLanes = lanes;
                            finishConcurrentRender(root2, exitStatus, lanes);
                        }
                    }
                    ensureRootIsScheduled(root2, now());
                    if (root2.callbackNode === originalCallbackNode) {
                        return performConcurrentWorkOnRoot.bind(null, root2);
                    }
                    return null;
                }
                function recoverFromConcurrentError(root2, errorRetryLanes) {
                    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
                    if (isRootDehydrated(root2)) {
                        var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
                        rootWorkInProgress.flags |= ForceClientRender;
                        {
                            errorHydratingContainer(root2.containerInfo);
                        }
                    }
                    var exitStatus = renderRootSync(root2, errorRetryLanes);
                    if (exitStatus !== RootErrored) {
                        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
                        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
                        if (errorsFromSecondAttempt !== null) {
                            queueRecoverableErrors(errorsFromSecondAttempt);
                        }
                    }
                    return exitStatus;
                }
                function queueRecoverableErrors(errors) {
                    if (workInProgressRootRecoverableErrors === null) {
                        workInProgressRootRecoverableErrors = errors;
                    } else {
                        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
                    }
                }
                function finishConcurrentRender(root2, exitStatus, lanes) {
                    switch(exitStatus){
                        case RootInProgress:
                        case RootFatalErrored:
                            {
                                throw new Error("Root did not complete. This is a bug in React.");
                            }
                        // Flow knows about invariant, so it complains if I add a break
                        // statement, but eslint doesn't know about invariant, so it complains
                        // if I do. eslint-disable-next-line no-fallthrough
                        case RootErrored:
                            {
                                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                                break;
                            }
                        case RootSuspended:
                            {
                                markRootSuspended$1(root2, lanes);
                                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                                !shouldForceFlushFallbacksInDEV()) {
                                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                                    if (msUntilTimeout > 10) {
                                        var nextLanes = getNextLanes(root2, NoLanes);
                                        if (nextLanes !== NoLanes) {
                                            break;
                                        }
                                        var suspendedLanes = root2.suspendedLanes;
                                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                                            var eventTime = requestEventTime();
                                            markRootPinged(root2, suspendedLanes);
                                            break;
                                        }
                                        root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                                        break;
                                    }
                                }
                                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                                break;
                            }
                        case RootSuspendedWithDelay:
                            {
                                markRootSuspended$1(root2, lanes);
                                if (includesOnlyTransitions(lanes)) {
                                    break;
                                }
                                if (!shouldForceFlushFallbacksInDEV()) {
                                    var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                                    var eventTimeMs = mostRecentEventTime;
                                    var timeElapsedMs = now() - eventTimeMs;
                                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                                    if (_msUntilTimeout > 10) {
                                        root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                                        break;
                                    }
                                }
                                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                                break;
                            }
                        case RootCompleted:
                            {
                                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                                break;
                            }
                        default:
                            {
                                throw new Error("Unknown root exit status.");
                            }
                    }
                }
                function isRenderConsistentWithExternalStores(finishedWork) {
                    var node2 = finishedWork;
                    while(true){
                        if (node2.flags & StoreConsistency) {
                            var updateQueue = node2.updateQueue;
                            if (updateQueue !== null) {
                                var checks = updateQueue.stores;
                                if (checks !== null) {
                                    for(var i = 0; i < checks.length; i++){
                                        var check = checks[i];
                                        var getSnapshot = check.getSnapshot;
                                        var renderedValue = check.value;
                                        try {
                                            if (!objectIs(getSnapshot(), renderedValue)) {
                                                return false;
                                            }
                                        } catch (error2) {
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                        var child = node2.child;
                        if (node2.subtreeFlags & StoreConsistency && child !== null) {
                            child.return = node2;
                            node2 = child;
                            continue;
                        }
                        if (node2 === finishedWork) {
                            return true;
                        }
                        while(node2.sibling === null){
                            if (node2.return === null || node2.return === finishedWork) {
                                return true;
                            }
                            node2 = node2.return;
                        }
                        node2.sibling.return = node2.return;
                        node2 = node2.sibling;
                    }
                    return true;
                }
                function markRootSuspended$1(root2, suspendedLanes) {
                    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
                    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
                    markRootSuspended(root2, suspendedLanes);
                }
                function performSyncWorkOnRoot(root2) {
                    {
                        syncNestedUpdateFlag();
                    }
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    flushPassiveEffects();
                    var lanes = getNextLanes(root2, NoLanes);
                    if (!includesSomeLane(lanes, SyncLane)) {
                        ensureRootIsScheduled(root2, now());
                        return null;
                    }
                    var exitStatus = renderRootSync(root2, lanes);
                    if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
                        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                        if (errorRetryLanes !== NoLanes) {
                            lanes = errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root2, NoLanes);
                        markRootSuspended$1(root2, lanes);
                        ensureRootIsScheduled(root2, now());
                        throw fatalError;
                    }
                    if (exitStatus === RootDidNotComplete) {
                        throw new Error("Root did not complete. This is a bug in React.");
                    }
                    var finishedWork = root2.current.alternate;
                    root2.finishedWork = finishedWork;
                    root2.finishedLanes = lanes;
                    commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                    ensureRootIsScheduled(root2, now());
                    return null;
                }
                function flushRoot(root2, lanes) {
                    if (lanes !== NoLanes) {
                        markRootEntangled(root2, mergeLanes(lanes, SyncLane));
                        ensureRootIsScheduled(root2, now());
                        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                            resetRenderTimer();
                            flushSyncCallbacks();
                        }
                    }
                }
                function batchedUpdates$1(fn, a) {
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    try {
                        return fn(a);
                    } finally{
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
                        !ReactCurrentActQueue$1.isBatchingLegacy) {
                            resetRenderTimer();
                            flushSyncCallbacksOnlyInLegacyMode();
                        }
                    }
                }
                function discreteUpdates(fn, a, b, c, d) {
                    var previousPriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        return fn(a, b, c, d);
                    } finally{
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        if (executionContext === NoContext) {
                            resetRenderTimer();
                        }
                    }
                }
                function flushSync(fn) {
                    if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                        flushPassiveEffects();
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    var previousPriority = getCurrentUpdatePriority();
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        if (fn) {
                            return fn();
                        } else {
                            return void 0;
                        }
                    } finally{
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        executionContext = prevExecutionContext;
                        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                            flushSyncCallbacks();
                        }
                    }
                }
                function isAlreadyRendering() {
                    return (executionContext & (RenderContext | CommitContext)) !== NoContext;
                }
                function pushRenderLanes(fiber, lanes) {
                    push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
                    subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
                    workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
                }
                function popRenderLanes(fiber) {
                    subtreeRenderLanes = subtreeRenderLanesCursor.current;
                    pop(subtreeRenderLanesCursor, fiber);
                }
                function prepareFreshStack(root2, lanes) {
                    root2.finishedWork = null;
                    root2.finishedLanes = NoLanes;
                    var timeoutHandle = root2.timeoutHandle;
                    if (timeoutHandle !== noTimeout) {
                        root2.timeoutHandle = noTimeout;
                        cancelTimeout(timeoutHandle);
                    }
                    if (workInProgress !== null) {
                        var interruptedWork = workInProgress.return;
                        while(interruptedWork !== null){
                            var current2 = interruptedWork.alternate;
                            unwindInterruptedWork(current2, interruptedWork);
                            interruptedWork = interruptedWork.return;
                        }
                    }
                    workInProgressRoot = root2;
                    var rootWorkInProgress = createWorkInProgress(root2.current, null);
                    workInProgress = rootWorkInProgress;
                    workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
                    workInProgressRootExitStatus = RootInProgress;
                    workInProgressRootFatalError = null;
                    workInProgressRootSkippedLanes = NoLanes;
                    workInProgressRootInterleavedUpdatedLanes = NoLanes;
                    workInProgressRootPingedLanes = NoLanes;
                    workInProgressRootConcurrentErrors = null;
                    workInProgressRootRecoverableErrors = null;
                    finishQueueingConcurrentUpdates();
                    {
                        ReactStrictModeWarnings.discardPendingWarnings();
                    }
                    return rootWorkInProgress;
                }
                function handleError(root2, thrownValue) {
                    do {
                        var erroredWork = workInProgress;
                        try {
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            resetCurrentFiber();
                            ReactCurrentOwner$2.current = null;
                            if (erroredWork === null || erroredWork.return === null) {
                                workInProgressRootExitStatus = RootFatalErrored;
                                workInProgressRootFatalError = thrownValue;
                                workInProgress = null;
                                return;
                            }
                            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                            }
                            if (enableSchedulingProfiler) {
                                markComponentRenderStopped();
                                if (thrownValue !== null && (typeof thrownValue === "undefined" ? "undefined" : _type_of(thrownValue)) === "object" && typeof thrownValue.then === "function") {
                                    var wakeable = thrownValue;
                                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                                } else {
                                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                                }
                            }
                            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                            completeUnitOfWork(erroredWork);
                        } catch (yetAnotherThrownValue) {
                            thrownValue = yetAnotherThrownValue;
                            if (workInProgress === erroredWork && erroredWork !== null) {
                                erroredWork = erroredWork.return;
                                workInProgress = erroredWork;
                            } else {
                                erroredWork = workInProgress;
                            }
                            continue;
                        }
                        return;
                    }while (true);
                }
                function pushDispatcher() {
                    var prevDispatcher = ReactCurrentDispatcher$2.current;
                    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
                    if (prevDispatcher === null) {
                        return ContextOnlyDispatcher;
                    } else {
                        return prevDispatcher;
                    }
                }
                function popDispatcher(prevDispatcher) {
                    ReactCurrentDispatcher$2.current = prevDispatcher;
                }
                function markCommitTimeOfFallback() {
                    globalMostRecentFallbackTime = now();
                }
                function markSkippedUpdateLanes(lane) {
                    workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
                }
                function renderDidSuspend() {
                    if (workInProgressRootExitStatus === RootInProgress) {
                        workInProgressRootExitStatus = RootSuspended;
                    }
                }
                function renderDidSuspendDelayIfPossible() {
                    if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
                        workInProgressRootExitStatus = RootSuspendedWithDelay;
                    }
                    if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
                        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
                    }
                }
                function renderDidError(error2) {
                    if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
                        workInProgressRootExitStatus = RootErrored;
                    }
                    if (workInProgressRootConcurrentErrors === null) {
                        workInProgressRootConcurrentErrors = [
                            error2
                        ];
                    } else {
                        workInProgressRootConcurrentErrors.push(error2);
                    }
                }
                function renderHasNotSuspendedYet() {
                    return workInProgressRootExitStatus === RootInProgress;
                }
                function renderRootSync(root2, lanes) {
                    var prevExecutionContext = executionContext;
                    executionContext |= RenderContext;
                    var prevDispatcher = pushDispatcher();
                    if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
                        {
                            if (isDevToolsPresent) {
                                var memoizedUpdaters = root2.memoizedUpdaters;
                                if (memoizedUpdaters.size > 0) {
                                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                                    memoizedUpdaters.clear();
                                }
                                movePendingFibersToMemoized(root2, lanes);
                            }
                        }
                        workInProgressTransitions = getTransitionsForLanes();
                        prepareFreshStack(root2, lanes);
                    }
                    {
                        markRenderStarted(lanes);
                    }
                    do {
                        try {
                            workLoopSync();
                            break;
                        } catch (thrownValue) {
                            handleError(root2, thrownValue);
                        }
                    }while (true);
                    resetContextDependencies();
                    executionContext = prevExecutionContext;
                    popDispatcher(prevDispatcher);
                    if (workInProgress !== null) {
                        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    {
                        markRenderStopped();
                    }
                    workInProgressRoot = null;
                    workInProgressRootRenderLanes = NoLanes;
                    return workInProgressRootExitStatus;
                }
                function workLoopSync() {
                    while(workInProgress !== null){
                        performUnitOfWork(workInProgress);
                    }
                }
                function renderRootConcurrent(root2, lanes) {
                    var prevExecutionContext = executionContext;
                    executionContext |= RenderContext;
                    var prevDispatcher = pushDispatcher();
                    if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
                        {
                            if (isDevToolsPresent) {
                                var memoizedUpdaters = root2.memoizedUpdaters;
                                if (memoizedUpdaters.size > 0) {
                                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                                    memoizedUpdaters.clear();
                                }
                                movePendingFibersToMemoized(root2, lanes);
                            }
                        }
                        workInProgressTransitions = getTransitionsForLanes();
                        resetRenderTimer();
                        prepareFreshStack(root2, lanes);
                    }
                    {
                        markRenderStarted(lanes);
                    }
                    do {
                        try {
                            workLoopConcurrent();
                            break;
                        } catch (thrownValue) {
                            handleError(root2, thrownValue);
                        }
                    }while (true);
                    resetContextDependencies();
                    popDispatcher(prevDispatcher);
                    executionContext = prevExecutionContext;
                    if (workInProgress !== null) {
                        {
                            markRenderYielded();
                        }
                        return RootInProgress;
                    } else {
                        {
                            markRenderStopped();
                        }
                        workInProgressRoot = null;
                        workInProgressRootRenderLanes = NoLanes;
                        return workInProgressRootExitStatus;
                    }
                }
                function workLoopConcurrent() {
                    while(workInProgress !== null && !shouldYield()){
                        performUnitOfWork(workInProgress);
                    }
                }
                function performUnitOfWork(unitOfWork) {
                    var current2 = unitOfWork.alternate;
                    setCurrentFiber(unitOfWork);
                    var next2;
                    if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                        startProfilerTimer(unitOfWork);
                        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
                        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
                    } else {
                        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
                    }
                    resetCurrentFiber();
                    unitOfWork.memoizedProps = unitOfWork.pendingProps;
                    if (next2 === null) {
                        completeUnitOfWork(unitOfWork);
                    } else {
                        workInProgress = next2;
                    }
                    ReactCurrentOwner$2.current = null;
                }
                function completeUnitOfWork(unitOfWork) {
                    var completedWork = unitOfWork;
                    do {
                        var current2 = completedWork.alternate;
                        var returnFiber = completedWork.return;
                        if ((completedWork.flags & Incomplete) === NoFlags) {
                            setCurrentFiber(completedWork);
                            var next2 = void 0;
                            if ((completedWork.mode & ProfileMode) === NoMode) {
                                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                            } else {
                                startProfilerTimer(completedWork);
                                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                            }
                            resetCurrentFiber();
                            if (next2 !== null) {
                                workInProgress = next2;
                                return;
                            }
                        } else {
                            var _next = unwindWork(current2, completedWork);
                            if (_next !== null) {
                                _next.flags &= HostEffectMask;
                                workInProgress = _next;
                                return;
                            }
                            if ((completedWork.mode & ProfileMode) !== NoMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                                var actualDuration = completedWork.actualDuration;
                                var child = completedWork.child;
                                while(child !== null){
                                    actualDuration += child.actualDuration;
                                    child = child.sibling;
                                }
                                completedWork.actualDuration = actualDuration;
                            }
                            if (returnFiber !== null) {
                                returnFiber.flags |= Incomplete;
                                returnFiber.subtreeFlags = NoFlags;
                                returnFiber.deletions = null;
                            } else {
                                workInProgressRootExitStatus = RootDidNotComplete;
                                workInProgress = null;
                                return;
                            }
                        }
                        var siblingFiber = completedWork.sibling;
                        if (siblingFiber !== null) {
                            workInProgress = siblingFiber;
                            return;
                        }
                        completedWork = returnFiber;
                        workInProgress = completedWork;
                    }while (completedWork !== null);
                    if (workInProgressRootExitStatus === RootInProgress) {
                        workInProgressRootExitStatus = RootCompleted;
                    }
                }
                function commitRoot(root2, recoverableErrors, transitions) {
                    var previousUpdateLanePriority = getCurrentUpdatePriority();
                    var prevTransition = ReactCurrentBatchConfig$3.transition;
                    try {
                        ReactCurrentBatchConfig$3.transition = null;
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
                    } finally{
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                        setCurrentUpdatePriority(previousUpdateLanePriority);
                    }
                    return null;
                }
                function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
                    do {
                        flushPassiveEffects();
                    }while (rootWithPendingPassiveEffects !== null);
                    flushRenderPhaseStrictModeWarningsInDEV();
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Should not already be working.");
                    }
                    var finishedWork = root2.finishedWork;
                    var lanes = root2.finishedLanes;
                    {
                        markCommitStarted(lanes);
                    }
                    if (finishedWork === null) {
                        {
                            markCommitStopped();
                        }
                        return null;
                    } else {
                        {
                            if (lanes === NoLanes) {
                                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                            }
                        }
                    }
                    root2.finishedWork = null;
                    root2.finishedLanes = NoLanes;
                    if (finishedWork === root2.current) {
                        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    root2.callbackNode = null;
                    root2.callbackPriority = NoLane;
                    var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
                    markRootFinished(root2, remainingLanes);
                    if (root2 === workInProgressRoot) {
                        workInProgressRoot = null;
                        workInProgress = null;
                        workInProgressRootRenderLanes = NoLanes;
                    }
                    if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
                        if (!rootDoesHavePassiveEffects) {
                            rootDoesHavePassiveEffects = true;
                            pendingPassiveTransitions = transitions;
                            scheduleCallback$1(NormalPriority, function() {
                                flushPassiveEffects();
                                return null;
                            });
                        }
                    }
                    var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
                    var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
                    if (subtreeHasEffects || rootHasEffect) {
                        var prevTransition = ReactCurrentBatchConfig$3.transition;
                        ReactCurrentBatchConfig$3.transition = null;
                        var previousPriority = getCurrentUpdatePriority();
                        setCurrentUpdatePriority(DiscreteEventPriority);
                        var prevExecutionContext = executionContext;
                        executionContext |= CommitContext;
                        ReactCurrentOwner$2.current = null;
                        var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
                        {
                            recordCommitTime();
                        }
                        commitMutationEffects(root2, finishedWork, lanes);
                        resetAfterCommit(root2.containerInfo);
                        root2.current = finishedWork;
                        {
                            markLayoutEffectsStarted(lanes);
                        }
                        commitLayoutEffects(finishedWork, root2, lanes);
                        {
                            markLayoutEffectsStopped();
                        }
                        requestPaint();
                        executionContext = prevExecutionContext;
                        setCurrentUpdatePriority(previousPriority);
                        ReactCurrentBatchConfig$3.transition = prevTransition;
                    } else {
                        root2.current = finishedWork;
                        {
                            recordCommitTime();
                        }
                    }
                    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
                    if (rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = false;
                        rootWithPendingPassiveEffects = root2;
                        pendingPassiveEffectsLanes = lanes;
                    } else {
                        {
                            nestedPassiveUpdateCount = 0;
                            rootWithPassiveNestedUpdates = null;
                        }
                    }
                    remainingLanes = root2.pendingLanes;
                    if (remainingLanes === NoLanes) {
                        legacyErrorBoundariesThatAlreadyFailed = null;
                    }
                    {
                        if (!rootDidHavePassiveEffects) {
                            commitDoubleInvokeEffectsInDEV(root2.current, false);
                        }
                    }
                    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
                    {
                        if (isDevToolsPresent) {
                            root2.memoizedUpdaters.clear();
                        }
                    }
                    {
                        onCommitRoot$1();
                    }
                    ensureRootIsScheduled(root2, now());
                    if (recoverableErrors !== null) {
                        var onRecoverableError = root2.onRecoverableError;
                        for(var i = 0; i < recoverableErrors.length; i++){
                            var recoverableError = recoverableErrors[i];
                            var componentStack = recoverableError.stack;
                            var digest = recoverableError.digest;
                            onRecoverableError(recoverableError.value, {
                                componentStack: componentStack,
                                digest: digest
                            });
                        }
                    }
                    if (hasUncaughtError) {
                        hasUncaughtError = false;
                        var error$1 = firstUncaughtError;
                        firstUncaughtError = null;
                        throw error$1;
                    }
                    if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
                        flushPassiveEffects();
                    }
                    remainingLanes = root2.pendingLanes;
                    if (includesSomeLane(remainingLanes, SyncLane)) {
                        {
                            markNestedUpdateScheduled();
                        }
                        if (root2 === rootWithNestedUpdates) {
                            nestedUpdateCount++;
                        } else {
                            nestedUpdateCount = 0;
                            rootWithNestedUpdates = root2;
                        }
                    } else {
                        nestedUpdateCount = 0;
                    }
                    flushSyncCallbacks();
                    {
                        markCommitStopped();
                    }
                    return null;
                }
                function flushPassiveEffects() {
                    if (rootWithPendingPassiveEffects !== null) {
                        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
                        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
                        var prevTransition = ReactCurrentBatchConfig$3.transition;
                        var previousPriority = getCurrentUpdatePriority();
                        try {
                            ReactCurrentBatchConfig$3.transition = null;
                            setCurrentUpdatePriority(priority);
                            return flushPassiveEffectsImpl();
                        } finally{
                            setCurrentUpdatePriority(previousPriority);
                            ReactCurrentBatchConfig$3.transition = prevTransition;
                        }
                    }
                    return false;
                }
                function enqueuePendingPassiveProfilerEffect(fiber) {
                    {
                        pendingPassiveProfilerEffects.push(fiber);
                        if (!rootDoesHavePassiveEffects) {
                            rootDoesHavePassiveEffects = true;
                            scheduleCallback$1(NormalPriority, function() {
                                flushPassiveEffects();
                                return null;
                            });
                        }
                    }
                }
                function flushPassiveEffectsImpl() {
                    if (rootWithPendingPassiveEffects === null) {
                        return false;
                    }
                    var transitions = pendingPassiveTransitions;
                    pendingPassiveTransitions = null;
                    var root2 = rootWithPendingPassiveEffects;
                    var lanes = pendingPassiveEffectsLanes;
                    rootWithPendingPassiveEffects = null;
                    pendingPassiveEffectsLanes = NoLanes;
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        throw new Error("Cannot flush passive effects while already rendering.");
                    }
                    {
                        isFlushingPassiveEffects = true;
                        didScheduleUpdateDuringPassiveEffects = false;
                    }
                    {
                        markPassiveEffectsStarted(lanes);
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    commitPassiveUnmountEffects(root2.current);
                    commitPassiveMountEffects(root2, root2.current, lanes, transitions);
                    {
                        var profilerEffects = pendingPassiveProfilerEffects;
                        pendingPassiveProfilerEffects = [];
                        for(var i = 0; i < profilerEffects.length; i++){
                            var _fiber = profilerEffects[i];
                            commitPassiveEffectDurations(root2, _fiber);
                        }
                    }
                    {
                        markPassiveEffectsStopped();
                    }
                    {
                        commitDoubleInvokeEffectsInDEV(root2.current, true);
                    }
                    executionContext = prevExecutionContext;
                    flushSyncCallbacks();
                    {
                        if (didScheduleUpdateDuringPassiveEffects) {
                            if (root2 === rootWithPassiveNestedUpdates) {
                                nestedPassiveUpdateCount++;
                            } else {
                                nestedPassiveUpdateCount = 0;
                                rootWithPassiveNestedUpdates = root2;
                            }
                        } else {
                            nestedPassiveUpdateCount = 0;
                        }
                        isFlushingPassiveEffects = false;
                        didScheduleUpdateDuringPassiveEffects = false;
                    }
                    onPostCommitRoot(root2);
                    {
                        var stateNode = root2.current.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                    }
                    return true;
                }
                function isAlreadyFailedLegacyErrorBoundary(instance) {
                    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
                }
                function markLegacyErrorBoundaryAsFailed(instance) {
                    if (legacyErrorBoundariesThatAlreadyFailed === null) {
                        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([
                            instance
                        ]);
                    } else {
                        legacyErrorBoundariesThatAlreadyFailed.add(instance);
                    }
                }
                function prepareToThrowUncaughtError(error2) {
                    if (!hasUncaughtError) {
                        hasUncaughtError = true;
                        firstUncaughtError = error2;
                    }
                }
                var onUncaughtError = prepareToThrowUncaughtError;
                function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
                    var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
                    var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
                    var root2 = enqueueUpdate(rootFiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root2 !== null) {
                        markRootUpdated(root2, SyncLane, eventTime);
                        ensureRootIsScheduled(root2, eventTime);
                    }
                }
                function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
                    {
                        reportUncaughtErrorInDEV(error$1);
                        setIsRunningInsertionEffect(false);
                    }
                    if (sourceFiber.tag === HostRoot) {
                        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
                        return;
                    }
                    var fiber = null;
                    {
                        fiber = nearestMountedAncestor;
                    }
                    while(fiber !== null){
                        if (fiber.tag === HostRoot) {
                            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                            return;
                        } else if (fiber.tag === ClassComponent) {
                            var ctor = fiber.type;
                            var instance = fiber.stateNode;
                            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                                var root2 = enqueueUpdate(fiber, update, SyncLane);
                                var eventTime = requestEventTime();
                                if (root2 !== null) {
                                    markRootUpdated(root2, SyncLane, eventTime);
                                    ensureRootIsScheduled(root2, eventTime);
                                }
                                return;
                            }
                        }
                        fiber = fiber.return;
                    }
                    {
                        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
                    }
                }
                function pingSuspendedRoot(root2, wakeable, pingedLanes) {
                    var pingCache = root2.pingCache;
                    if (pingCache !== null) {
                        pingCache.delete(wakeable);
                    }
                    var eventTime = requestEventTime();
                    markRootPinged(root2, pingedLanes);
                    warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
                    if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
                        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                            prepareFreshStack(root2, NoLanes);
                        } else {
                            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
                        }
                    }
                    ensureRootIsScheduled(root2, eventTime);
                }
                function retryTimedOutBoundary(boundaryFiber, retryLane) {
                    if (retryLane === NoLane) {
                        retryLane = requestRetryLane(boundaryFiber);
                    }
                    var eventTime = requestEventTime();
                    var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
                    if (root2 !== null) {
                        markRootUpdated(root2, retryLane, eventTime);
                        ensureRootIsScheduled(root2, eventTime);
                    }
                }
                function retryDehydratedSuspenseBoundary(boundaryFiber) {
                    var suspenseState = boundaryFiber.memoizedState;
                    var retryLane = NoLane;
                    if (suspenseState !== null) {
                        retryLane = suspenseState.retryLane;
                    }
                    retryTimedOutBoundary(boundaryFiber, retryLane);
                }
                function resolveRetryWakeable(boundaryFiber, wakeable) {
                    var retryLane = NoLane;
                    var retryCache;
                    switch(boundaryFiber.tag){
                        case SuspenseComponent:
                            retryCache = boundaryFiber.stateNode;
                            var suspenseState = boundaryFiber.memoizedState;
                            if (suspenseState !== null) {
                                retryLane = suspenseState.retryLane;
                            }
                            break;
                        case SuspenseListComponent:
                            retryCache = boundaryFiber.stateNode;
                            break;
                        default:
                            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
                    }
                    if (retryCache !== null) {
                        retryCache.delete(wakeable);
                    }
                    retryTimedOutBoundary(boundaryFiber, retryLane);
                }
                function jnd(timeElapsed) {
                    return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
                }
                function checkForNestedUpdates() {
                    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                        nestedUpdateCount = 0;
                        rootWithNestedUpdates = null;
                        throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                    }
                    {
                        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                            nestedPassiveUpdateCount = 0;
                            rootWithPassiveNestedUpdates = null;
                            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
                        }
                    }
                }
                function flushRenderPhaseStrictModeWarningsInDEV() {
                    {
                        ReactStrictModeWarnings.flushLegacyContextWarning();
                        {
                            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                        }
                    }
                }
                function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
                    {
                        setCurrentFiber(fiber);
                        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
                        if (hasPassiveEffects) {
                            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
                        }
                        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
                        if (hasPassiveEffects) {
                            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
                        }
                        resetCurrentFiber();
                    }
                }
                function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
                    {
                        var current2 = firstChild;
                        var subtreeRoot = null;
                        while(current2 !== null){
                            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                                current2 = current2.child;
                            } else {
                                if ((current2.flags & fiberFlags) !== NoFlags) {
                                    invokeEffectFn(current2);
                                }
                                if (current2.sibling !== null) {
                                    current2 = current2.sibling;
                                } else {
                                    current2 = subtreeRoot = current2.return;
                                }
                            }
                        }
                    }
                }
                var didWarnStateUpdateForNotYetMountedComponent = null;
                function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
                    {
                        if ((executionContext & RenderContext) !== NoContext) {
                            return;
                        }
                        if (!(fiber.mode & ConcurrentMode)) {
                            return;
                        }
                        var tag = fiber.tag;
                        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                            return;
                        }
                        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
                        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                                return;
                            }
                            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
                        } else {
                            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([
                                componentName
                            ]);
                        }
                        var previousFiber = current;
                        try {
                            setCurrentFiber(fiber);
                            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
                        } finally{
                            if (previousFiber) {
                                setCurrentFiber(fiber);
                            } else {
                                resetCurrentFiber();
                            }
                        }
                    }
                }
                var beginWork$1;
                {
                    var dummyFiber = null;
                    beginWork$1 = function beginWork$1(current2, unitOfWork, lanes) {
                        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
                        try {
                            return beginWork(current2, unitOfWork, lanes);
                        } catch (originalError) {
                            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && (typeof originalError === "undefined" ? "undefined" : _type_of(originalError)) === "object" && typeof originalError.then === "function") {
                                throw originalError;
                            }
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            unwindInterruptedWork(current2, unitOfWork);
                            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                            if (unitOfWork.mode & ProfileMode) {
                                startProfilerTimer(unitOfWork);
                            }
                            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                            if (hasCaughtError()) {
                                var replayError = clearCaughtError();
                                if ((typeof replayError === "undefined" ? "undefined" : _type_of(replayError)) === "object" && replayError !== null && replayError._suppressLogging && (typeof originalError === "undefined" ? "undefined" : _type_of(originalError)) === "object" && originalError !== null && !originalError._suppressLogging) {
                                    originalError._suppressLogging = true;
                                }
                            }
                            throw originalError;
                        }
                    };
                }
                var didWarnAboutUpdateInRender = false;
                var didWarnAboutUpdateInRenderForAnotherComponent;
                {
                    didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
                }
                function warnAboutRenderPhaseUpdatesInDEV(fiber) {
                    {
                        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                            switch(fiber.tag){
                                case FunctionComponent:
                                case ForwardRef2:
                                case SimpleMemoComponent:
                                    {
                                        var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                                        var dedupeKey = renderingComponentName;
                                        if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                                            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                                            var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                                            error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                                        }
                                        break;
                                    }
                                case ClassComponent:
                                    {
                                        if (!didWarnAboutUpdateInRender) {
                                            error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                                            didWarnAboutUpdateInRender = true;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                }
                function restorePendingUpdaters(root2, lanes) {
                    {
                        if (isDevToolsPresent) {
                            var memoizedUpdaters = root2.memoizedUpdaters;
                            memoizedUpdaters.forEach(function(schedulingFiber) {
                                addFiberToLanesMap(root2, schedulingFiber, lanes);
                            });
                        }
                    }
                }
                var fakeActCallbackNode = {};
                function scheduleCallback$1(priorityLevel, callback) {
                    {
                        var actQueue = ReactCurrentActQueue$1.current;
                        if (actQueue !== null) {
                            actQueue.push(callback);
                            return fakeActCallbackNode;
                        } else {
                            return scheduleCallback(priorityLevel, callback);
                        }
                    }
                }
                function cancelCallback$1(callbackNode) {
                    if (callbackNode === fakeActCallbackNode) {
                        return;
                    }
                    return cancelCallback(callbackNode);
                }
                function shouldForceFlushFallbacksInDEV() {
                    return ReactCurrentActQueue$1.current !== null;
                }
                function warnIfUpdatesNotWrappedWithActDEV(fiber) {
                    {
                        if (fiber.mode & ConcurrentMode) {
                            if (!isConcurrentActEnvironment()) {
                                return;
                            }
                        } else {
                            if (!isLegacyActEnvironment()) {
                                return;
                            }
                            if (executionContext !== NoContext) {
                                return;
                            }
                            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                                return;
                            }
                        }
                        if (ReactCurrentActQueue$1.current === null) {
                            var previousFiber = current;
                            try {
                                setCurrentFiber(fiber);
                                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                            } finally{
                                if (previousFiber) {
                                    setCurrentFiber(fiber);
                                } else {
                                    resetCurrentFiber();
                                }
                            }
                        }
                    }
                }
                function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
                    {
                        if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
                        }
                    }
                }
                function setIsRunningInsertionEffect(isRunning) {
                    {
                        isRunningInsertionEffect = isRunning;
                    }
                }
                var resolveFamily = null;
                var failedBoundaries = null;
                var setRefreshHandler = function setRefreshHandler(handler) {
                    {
                        resolveFamily = handler;
                    }
                };
                function resolveFunctionForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === void 0) {
                            return type;
                        }
                        return family.current;
                    }
                }
                function resolveClassForHotReloading(type) {
                    return resolveFunctionForHotReloading(type);
                }
                function resolveForwardRefForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === void 0) {
                            if (type !== null && type !== void 0 && typeof type.render === "function") {
                                var currentRender = resolveFunctionForHotReloading(type.render);
                                if (type.render !== currentRender) {
                                    var syntheticType = {
                                        $$typeof: REACT_FORWARD_REF_TYPE,
                                        render: currentRender
                                    };
                                    if (type.displayName !== void 0) {
                                        syntheticType.displayName = type.displayName;
                                    }
                                    return syntheticType;
                                }
                            }
                            return type;
                        }
                        return family.current;
                    }
                }
                function isCompatibleFamilyForHotReloading(fiber, element) {
                    {
                        if (resolveFamily === null) {
                            return false;
                        }
                        var prevType = fiber.elementType;
                        var nextType = element.type;
                        var needsCompareFamilies = false;
                        var $$typeofNextType = (typeof nextType === "undefined" ? "undefined" : _type_of(nextType)) === "object" && nextType !== null ? nextType.$$typeof : null;
                        switch(fiber.tag){
                            case ClassComponent:
                                {
                                    if (typeof nextType === "function") {
                                        needsCompareFamilies = true;
                                    }
                                    break;
                                }
                            case FunctionComponent:
                                {
                                    if (typeof nextType === "function") {
                                        needsCompareFamilies = true;
                                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                        needsCompareFamilies = true;
                                    }
                                    break;
                                }
                            case ForwardRef2:
                                {
                                    if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                                        needsCompareFamilies = true;
                                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                        needsCompareFamilies = true;
                                    }
                                    break;
                                }
                            case MemoComponent:
                            case SimpleMemoComponent:
                                {
                                    if ($$typeofNextType === REACT_MEMO_TYPE) {
                                        needsCompareFamilies = true;
                                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                        needsCompareFamilies = true;
                                    }
                                    break;
                                }
                            default:
                                return false;
                        }
                        if (needsCompareFamilies) {
                            var prevFamily = resolveFamily(prevType);
                            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                                return true;
                            }
                        }
                        return false;
                    }
                }
                function markFailedErrorBoundaryForHotReloading(fiber) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        if (typeof WeakSet !== "function") {
                            return;
                        }
                        if (failedBoundaries === null) {
                            failedBoundaries = /* @__PURE__ */ new WeakSet();
                        }
                        failedBoundaries.add(fiber);
                    }
                }
                var scheduleRefresh = function scheduleRefresh(root2, update) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
                        flushPassiveEffects();
                        flushSync(function() {
                            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
                        });
                    }
                };
                var scheduleRoot = function scheduleRoot(root2, element) {
                    {
                        if (root2.context !== emptyContextObject) {
                            return;
                        }
                        flushPassiveEffects();
                        flushSync(function() {
                            updateContainer(element, root2, null, null);
                        });
                    }
                };
                function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
                    {
                        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                        var candidateType = null;
                        switch(tag){
                            case FunctionComponent:
                            case SimpleMemoComponent:
                            case ClassComponent:
                                candidateType = type;
                                break;
                            case ForwardRef2:
                                candidateType = type.render;
                                break;
                        }
                        if (resolveFamily === null) {
                            throw new Error("Expected resolveFamily to be set during hot reload.");
                        }
                        var needsRender = false;
                        var needsRemount = false;
                        if (candidateType !== null) {
                            var family = resolveFamily(candidateType);
                            if (family !== void 0) {
                                if (staleFamilies.has(family)) {
                                    needsRemount = true;
                                } else if (updatedFamilies.has(family)) {
                                    if (tag === ClassComponent) {
                                        needsRemount = true;
                                    } else {
                                        needsRender = true;
                                    }
                                }
                            }
                        }
                        if (failedBoundaries !== null) {
                            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                                needsRemount = true;
                            }
                        }
                        if (needsRemount) {
                            fiber._debugNeedsRemount = true;
                        }
                        if (needsRemount || needsRender) {
                            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (_root !== null) {
                                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                            }
                        }
                        if (child !== null && !needsRemount) {
                            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                        }
                        if (sibling !== null) {
                            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                        }
                    }
                }
                var findHostInstancesForRefresh = function findHostInstancesForRefresh(root2, families) {
                    {
                        var hostInstances = /* @__PURE__ */ new Set();
                        var types = new Set(families.map(function(family) {
                            return family.current;
                        }));
                        findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
                        return hostInstances;
                    }
                };
                function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
                    {
                        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                        var candidateType = null;
                        switch(tag){
                            case FunctionComponent:
                            case SimpleMemoComponent:
                            case ClassComponent:
                                candidateType = type;
                                break;
                            case ForwardRef2:
                                candidateType = type.render;
                                break;
                        }
                        var didMatch = false;
                        if (candidateType !== null) {
                            if (types.has(candidateType)) {
                                didMatch = true;
                            }
                        }
                        if (didMatch) {
                            findHostInstancesForFiberShallowly(fiber, hostInstances);
                        } else {
                            if (child !== null) {
                                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                            }
                        }
                        if (sibling !== null) {
                            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                        }
                    }
                }
                function findHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
                        if (foundHostInstances) {
                            return;
                        }
                        var node2 = fiber;
                        while(true){
                            switch(node2.tag){
                                case HostComponent:
                                    hostInstances.add(node2.stateNode);
                                    return;
                                case HostPortal:
                                    hostInstances.add(node2.stateNode.containerInfo);
                                    return;
                                case HostRoot:
                                    hostInstances.add(node2.stateNode.containerInfo);
                                    return;
                            }
                            if (node2.return === null) {
                                throw new Error("Expected to reach root first.");
                            }
                            node2 = node2.return;
                        }
                    }
                }
                function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var node2 = fiber;
                        var foundHostInstances = false;
                        while(true){
                            if (node2.tag === HostComponent) {
                                foundHostInstances = true;
                                hostInstances.add(node2.stateNode);
                            } else if (node2.child !== null) {
                                node2.child.return = node2;
                                node2 = node2.child;
                                continue;
                            }
                            if (node2 === fiber) {
                                return foundHostInstances;
                            }
                            while(node2.sibling === null){
                                if (node2.return === null || node2.return === fiber) {
                                    return foundHostInstances;
                                }
                                node2 = node2.return;
                            }
                            node2.sibling.return = node2.return;
                            node2 = node2.sibling;
                        }
                    }
                    return false;
                }
                var hasBadMapPolyfill;
                {
                    hasBadMapPolyfill = false;
                    try {
                        var nonExtensibleObject = Object.preventExtensions({});
                        /* @__PURE__ */ new Map([
                            [
                                nonExtensibleObject,
                                null
                            ]
                        ]);
                        /* @__PURE__ */ new Set([
                            nonExtensibleObject
                        ]);
                    } catch (e) {
                        hasBadMapPolyfill = true;
                    }
                }
                function FiberNode(tag, pendingProps, key, mode) {
                    this.tag = tag;
                    this.key = key;
                    this.elementType = null;
                    this.type = null;
                    this.stateNode = null;
                    this.return = null;
                    this.child = null;
                    this.sibling = null;
                    this.index = 0;
                    this.ref = null;
                    this.pendingProps = pendingProps;
                    this.memoizedProps = null;
                    this.updateQueue = null;
                    this.memoizedState = null;
                    this.dependencies = null;
                    this.mode = mode;
                    this.flags = NoFlags;
                    this.subtreeFlags = NoFlags;
                    this.deletions = null;
                    this.lanes = NoLanes;
                    this.childLanes = NoLanes;
                    this.alternate = null;
                    {
                        this.actualDuration = Number.NaN;
                        this.actualStartTime = Number.NaN;
                        this.selfBaseDuration = Number.NaN;
                        this.treeBaseDuration = Number.NaN;
                        this.actualDuration = 0;
                        this.actualStartTime = -1;
                        this.selfBaseDuration = 0;
                        this.treeBaseDuration = 0;
                    }
                    {
                        this._debugSource = null;
                        this._debugOwner = null;
                        this._debugNeedsRemount = false;
                        this._debugHookTypes = null;
                        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                            Object.preventExtensions(this);
                        }
                    }
                }
                var createFiber = function createFiber(tag, pendingProps, key, mode) {
                    return new FiberNode(tag, pendingProps, key, mode);
                };
                function shouldConstruct$1(Component3) {
                    var prototype = Component3.prototype;
                    return !!(prototype && prototype.isReactComponent);
                }
                function isSimpleFunctionComponent(type) {
                    return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
                }
                function resolveLazyComponentTag(Component3) {
                    if (typeof Component3 === "function") {
                        return shouldConstruct$1(Component3) ? ClassComponent : FunctionComponent;
                    } else if (Component3 !== void 0 && Component3 !== null) {
                        var $$typeof = Component3.$$typeof;
                        if ($$typeof === REACT_FORWARD_REF_TYPE) {
                            return ForwardRef2;
                        }
                        if ($$typeof === REACT_MEMO_TYPE) {
                            return MemoComponent;
                        }
                    }
                    return IndeterminateComponent;
                }
                function createWorkInProgress(current2, pendingProps) {
                    var workInProgress2 = current2.alternate;
                    if (workInProgress2 === null) {
                        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
                        workInProgress2.elementType = current2.elementType;
                        workInProgress2.type = current2.type;
                        workInProgress2.stateNode = current2.stateNode;
                        {
                            workInProgress2._debugSource = current2._debugSource;
                            workInProgress2._debugOwner = current2._debugOwner;
                            workInProgress2._debugHookTypes = current2._debugHookTypes;
                        }
                        workInProgress2.alternate = current2;
                        current2.alternate = workInProgress2;
                    } else {
                        workInProgress2.pendingProps = pendingProps;
                        workInProgress2.type = current2.type;
                        workInProgress2.flags = NoFlags;
                        workInProgress2.subtreeFlags = NoFlags;
                        workInProgress2.deletions = null;
                        {
                            workInProgress2.actualDuration = 0;
                            workInProgress2.actualStartTime = -1;
                        }
                    }
                    workInProgress2.flags = current2.flags & StaticMask;
                    workInProgress2.childLanes = current2.childLanes;
                    workInProgress2.lanes = current2.lanes;
                    workInProgress2.child = current2.child;
                    workInProgress2.memoizedProps = current2.memoizedProps;
                    workInProgress2.memoizedState = current2.memoizedState;
                    workInProgress2.updateQueue = current2.updateQueue;
                    var currentDependencies = current2.dependencies;
                    workInProgress2.dependencies = currentDependencies === null ? null : {
                        lanes: currentDependencies.lanes,
                        firstContext: currentDependencies.firstContext
                    };
                    workInProgress2.sibling = current2.sibling;
                    workInProgress2.index = current2.index;
                    workInProgress2.ref = current2.ref;
                    {
                        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
                    }
                    {
                        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
                        switch(workInProgress2.tag){
                            case IndeterminateComponent:
                            case FunctionComponent:
                            case SimpleMemoComponent:
                                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                                break;
                            case ClassComponent:
                                workInProgress2.type = resolveClassForHotReloading(current2.type);
                                break;
                            case ForwardRef2:
                                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                                break;
                        }
                    }
                    return workInProgress2;
                }
                function resetWorkInProgress(workInProgress2, renderLanes2) {
                    workInProgress2.flags &= StaticMask | Placement;
                    var current2 = workInProgress2.alternate;
                    if (current2 === null) {
                        workInProgress2.childLanes = NoLanes;
                        workInProgress2.lanes = renderLanes2;
                        workInProgress2.child = null;
                        workInProgress2.subtreeFlags = NoFlags;
                        workInProgress2.memoizedProps = null;
                        workInProgress2.memoizedState = null;
                        workInProgress2.updateQueue = null;
                        workInProgress2.dependencies = null;
                        workInProgress2.stateNode = null;
                        {
                            workInProgress2.selfBaseDuration = 0;
                            workInProgress2.treeBaseDuration = 0;
                        }
                    } else {
                        workInProgress2.childLanes = current2.childLanes;
                        workInProgress2.lanes = current2.lanes;
                        workInProgress2.child = current2.child;
                        workInProgress2.subtreeFlags = NoFlags;
                        workInProgress2.deletions = null;
                        workInProgress2.memoizedProps = current2.memoizedProps;
                        workInProgress2.memoizedState = current2.memoizedState;
                        workInProgress2.updateQueue = current2.updateQueue;
                        workInProgress2.type = current2.type;
                        var currentDependencies = current2.dependencies;
                        workInProgress2.dependencies = currentDependencies === null ? null : {
                            lanes: currentDependencies.lanes,
                            firstContext: currentDependencies.firstContext
                        };
                        {
                            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
                        }
                    }
                    return workInProgress2;
                }
                function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
                    var mode;
                    if (tag === ConcurrentRoot) {
                        mode = ConcurrentMode;
                        if (isStrictMode === true) {
                            mode |= StrictLegacyMode;
                            {
                                mode |= StrictEffectsMode;
                            }
                        }
                    } else {
                        mode = NoMode;
                    }
                    if (isDevToolsPresent) {
                        mode |= ProfileMode;
                    }
                    return createFiber(HostRoot, null, null, mode);
                }
                function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
                    var fiberTag = IndeterminateComponent;
                    var resolvedType = type;
                    if (typeof type === "function") {
                        if (shouldConstruct$1(type)) {
                            fiberTag = ClassComponent;
                            {
                                resolvedType = resolveClassForHotReloading(resolvedType);
                            }
                        } else {
                            {
                                resolvedType = resolveFunctionForHotReloading(resolvedType);
                            }
                        }
                    } else if (typeof type === "string") {
                        fiberTag = HostComponent;
                    } else {
                        getTag: switch(type){
                            case REACT_FRAGMENT_TYPE2:
                                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                            case REACT_STRICT_MODE_TYPE:
                                fiberTag = Mode;
                                mode |= StrictLegacyMode;
                                if ((mode & ConcurrentMode) !== NoMode) {
                                    mode |= StrictEffectsMode;
                                }
                                break;
                            case REACT_PROFILER_TYPE:
                                return createFiberFromProfiler(pendingProps, mode, lanes, key);
                            case REACT_SUSPENSE_TYPE:
                                return createFiberFromSuspense(pendingProps, mode, lanes, key);
                            case REACT_SUSPENSE_LIST_TYPE:
                                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                            case REACT_OFFSCREEN_TYPE:
                                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                            case REACT_LEGACY_HIDDEN_TYPE:
                            // eslint-disable-next-line no-fallthrough
                            case REACT_SCOPE_TYPE:
                            // eslint-disable-next-line no-fallthrough
                            case REACT_CACHE_TYPE:
                            // eslint-disable-next-line no-fallthrough
                            case REACT_TRACING_MARKER_TYPE:
                            // eslint-disable-next-line no-fallthrough
                            case REACT_DEBUG_TRACING_MODE_TYPE:
                            // eslint-disable-next-line no-fallthrough
                            default:
                                {
                                    if ((typeof type === "undefined" ? "undefined" : _type_of(type)) === "object" && type !== null) {
                                        switch(type.$$typeof){
                                            case REACT_PROVIDER_TYPE:
                                                fiberTag = ContextProvider;
                                                break getTag;
                                            case REACT_CONTEXT_TYPE:
                                                fiberTag = ContextConsumer;
                                                break getTag;
                                            case REACT_FORWARD_REF_TYPE:
                                                fiberTag = ForwardRef2;
                                                {
                                                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                                                }
                                                break getTag;
                                            case REACT_MEMO_TYPE:
                                                fiberTag = MemoComponent;
                                                break getTag;
                                            case REACT_LAZY_TYPE:
                                                fiberTag = LazyComponent;
                                                resolvedType = null;
                                                break getTag;
                                        }
                                    }
                                    var info = "";
                                    {
                                        if (type === void 0 || (typeof type === "undefined" ? "undefined" : _type_of(type)) === "object" && type !== null && Object.keys(type).length === 0) {
                                            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                                        }
                                        var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                                        if (ownerName) {
                                            info += "\n\nCheck the render method of `" + ownerName + "`.";
                                        }
                                    }
                                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type === "undefined" ? "undefined" : _type_of(type)) + "." + info));
                                }
                        }
                    }
                    var fiber = createFiber(fiberTag, pendingProps, key, mode);
                    fiber.elementType = type;
                    fiber.type = resolvedType;
                    fiber.lanes = lanes;
                    {
                        fiber._debugOwner = owner;
                    }
                    return fiber;
                }
                function createFiberFromElement(element, mode, lanes) {
                    var owner = null;
                    {
                        owner = element._owner;
                    }
                    var type = element.type;
                    var key = element.key;
                    var pendingProps = element.props;
                    var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
                    {
                        fiber._debugSource = element._source;
                        fiber._debugOwner = element._owner;
                    }
                    return fiber;
                }
                function createFiberFromFragment(elements, mode, lanes, key) {
                    var fiber = createFiber(Fragment4, elements, key, mode);
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromProfiler(pendingProps, mode, lanes, key) {
                    {
                        if (typeof pendingProps.id !== "string") {
                            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', _type_of(pendingProps.id));
                        }
                    }
                    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
                    fiber.elementType = REACT_PROFILER_TYPE;
                    fiber.lanes = lanes;
                    {
                        fiber.stateNode = {
                            effectDuration: 0,
                            passiveEffectDuration: 0
                        };
                    }
                    return fiber;
                }
                function createFiberFromSuspense(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_SUSPENSE_TYPE;
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
                    var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
                    fiber.elementType = REACT_OFFSCREEN_TYPE;
                    fiber.lanes = lanes;
                    var primaryChildInstance = {
                        isHidden: false
                    };
                    fiber.stateNode = primaryChildInstance;
                    return fiber;
                }
                function createFiberFromText(content, mode, lanes) {
                    var fiber = createFiber(HostText, content, null, mode);
                    fiber.lanes = lanes;
                    return fiber;
                }
                function createFiberFromHostInstanceForDeletion() {
                    var fiber = createFiber(HostComponent, null, null, NoMode);
                    fiber.elementType = "DELETED";
                    return fiber;
                }
                function createFiberFromDehydratedFragment(dehydratedNode) {
                    var fiber = createFiber(DehydratedFragment, null, null, NoMode);
                    fiber.stateNode = dehydratedNode;
                    return fiber;
                }
                function createFiberFromPortal(portal, mode, lanes) {
                    var pendingProps = portal.children !== null ? portal.children : [];
                    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
                    fiber.lanes = lanes;
                    fiber.stateNode = {
                        containerInfo: portal.containerInfo,
                        pendingChildren: null,
                        // Used by persistent updates
                        implementation: portal.implementation
                    };
                    return fiber;
                }
                function assignFiberPropertiesInDEV(target, source) {
                    if (target === null) {
                        target = createFiber(IndeterminateComponent, null, null, NoMode);
                    }
                    target.tag = source.tag;
                    target.key = source.key;
                    target.elementType = source.elementType;
                    target.type = source.type;
                    target.stateNode = source.stateNode;
                    target.return = source.return;
                    target.child = source.child;
                    target.sibling = source.sibling;
                    target.index = source.index;
                    target.ref = source.ref;
                    target.pendingProps = source.pendingProps;
                    target.memoizedProps = source.memoizedProps;
                    target.updateQueue = source.updateQueue;
                    target.memoizedState = source.memoizedState;
                    target.dependencies = source.dependencies;
                    target.mode = source.mode;
                    target.flags = source.flags;
                    target.subtreeFlags = source.subtreeFlags;
                    target.deletions = source.deletions;
                    target.lanes = source.lanes;
                    target.childLanes = source.childLanes;
                    target.alternate = source.alternate;
                    {
                        target.actualDuration = source.actualDuration;
                        target.actualStartTime = source.actualStartTime;
                        target.selfBaseDuration = source.selfBaseDuration;
                        target.treeBaseDuration = source.treeBaseDuration;
                    }
                    target._debugSource = source._debugSource;
                    target._debugOwner = source._debugOwner;
                    target._debugNeedsRemount = source._debugNeedsRemount;
                    target._debugHookTypes = source._debugHookTypes;
                    return target;
                }
                function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
                    this.tag = tag;
                    this.containerInfo = containerInfo;
                    this.pendingChildren = null;
                    this.current = null;
                    this.pingCache = null;
                    this.finishedWork = null;
                    this.timeoutHandle = noTimeout;
                    this.context = null;
                    this.pendingContext = null;
                    this.callbackNode = null;
                    this.callbackPriority = NoLane;
                    this.eventTimes = createLaneMap(NoLanes);
                    this.expirationTimes = createLaneMap(NoTimestamp);
                    this.pendingLanes = NoLanes;
                    this.suspendedLanes = NoLanes;
                    this.pingedLanes = NoLanes;
                    this.expiredLanes = NoLanes;
                    this.mutableReadLanes = NoLanes;
                    this.finishedLanes = NoLanes;
                    this.entangledLanes = NoLanes;
                    this.entanglements = createLaneMap(NoLanes);
                    this.identifierPrefix = identifierPrefix;
                    this.onRecoverableError = onRecoverableError;
                    {
                        this.mutableSourceEagerHydrationData = null;
                    }
                    {
                        this.effectDuration = 0;
                        this.passiveEffectDuration = 0;
                    }
                    {
                        this.memoizedUpdaters = /* @__PURE__ */ new Set();
                        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
                        for(var _i = 0; _i < TotalLanes; _i++){
                            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
                        }
                    }
                    {
                        switch(tag){
                            case ConcurrentRoot:
                                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                                break;
                            case LegacyRoot:
                                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                                break;
                        }
                    }
                }
                function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
                    var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
                    root2.current = uninitializedFiber;
                    uninitializedFiber.stateNode = root2;
                    {
                        var _initialState = {
                            element: initialChildren,
                            isDehydrated: hydrate2,
                            cache: null,
                            // not enabled yet
                            transitions: null,
                            pendingSuspenseBoundaries: null
                        };
                        uninitializedFiber.memoizedState = _initialState;
                    }
                    initializeUpdateQueue(uninitializedFiber);
                    return root2;
                }
                var ReactVersion = "18.3.1";
                function createPortal(children, containerInfo, implementation) {
                    var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
                    {
                        checkKeyStringCoercion(key);
                    }
                    return {
                        // This tag allow us to uniquely identify this as a React Portal
                        $$typeof: REACT_PORTAL_TYPE,
                        key: key == null ? null : "" + key,
                        children: children,
                        containerInfo: containerInfo,
                        implementation: implementation
                    };
                }
                var didWarnAboutNestedUpdates;
                var didWarnAboutFindNodeInStrictMode;
                {
                    didWarnAboutNestedUpdates = false;
                    didWarnAboutFindNodeInStrictMode = {};
                }
                function getContextForSubtree(parentComponent) {
                    if (!parentComponent) {
                        return emptyContextObject;
                    }
                    var fiber = get2(parentComponent);
                    var parentContext = findCurrentUnmaskedContext(fiber);
                    if (fiber.tag === ClassComponent) {
                        var Component3 = fiber.type;
                        if (isContextProvider(Component3)) {
                            return processChildContext(fiber, Component3, parentContext);
                        }
                    }
                    return parentContext;
                }
                function findHostInstanceWithWarning(component, methodName) {
                    {
                        var fiber = get2(component);
                        if (fiber === void 0) {
                            if (typeof component.render === "function") {
                                throw new Error("Unable to find node on an unmounted component.");
                            } else {
                                var keys2 = Object.keys(component).join(",");
                                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                            }
                        }
                        var hostFiber = findCurrentHostFiber(fiber);
                        if (hostFiber === null) {
                            return null;
                        }
                        if (hostFiber.mode & StrictLegacyMode) {
                            var componentName = getComponentNameFromFiber(fiber) || "Component";
                            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                                didWarnAboutFindNodeInStrictMode[componentName] = true;
                                var previousFiber = current;
                                try {
                                    setCurrentFiber(hostFiber);
                                    if (fiber.mode & StrictLegacyMode) {
                                        error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                                    } else {
                                        error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                                    }
                                } finally{
                                    if (previousFiber) {
                                        setCurrentFiber(previousFiber);
                                    } else {
                                        resetCurrentFiber();
                                    }
                                }
                            }
                        }
                        return hostFiber.stateNode;
                    }
                }
                function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var hydrate2 = false;
                    var initialChildren = null;
                    return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                }
                function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
                    var hydrate2 = true;
                    var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    root2.context = getContextForSubtree(null);
                    var current2 = root2.current;
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(current2);
                    var update = createUpdate(eventTime, lane);
                    update.callback = callback !== void 0 && callback !== null ? callback : null;
                    enqueueUpdate(current2, update, lane);
                    scheduleInitialHydrationOnRoot(root2, lane, eventTime);
                    return root2;
                }
                function updateContainer(element, container, parentComponent, callback) {
                    {
                        onScheduleRoot(container, element);
                    }
                    var current$1 = container.current;
                    var eventTime = requestEventTime();
                    var lane = requestUpdateLane(current$1);
                    {
                        markRenderScheduled(lane);
                    }
                    var context = getContextForSubtree(parentComponent);
                    if (container.context === null) {
                        container.context = context;
                    } else {
                        container.pendingContext = context;
                    }
                    {
                        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                            didWarnAboutNestedUpdates = true;
                            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
                        }
                    }
                    var update = createUpdate(eventTime, lane);
                    update.payload = {
                        element: element
                    };
                    callback = callback === void 0 ? null : callback;
                    if (callback !== null) {
                        {
                            if (typeof callback !== "function") {
                                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                            }
                        }
                        update.callback = callback;
                    }
                    var root2 = enqueueUpdate(current$1, update, lane);
                    if (root2 !== null) {
                        scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
                        entangleTransitions(root2, current$1, lane);
                    }
                    return lane;
                }
                function getPublicRootInstance(container) {
                    var containerFiber = container.current;
                    if (!containerFiber.child) {
                        return null;
                    }
                    switch(containerFiber.child.tag){
                        case HostComponent:
                            return getPublicInstance(containerFiber.child.stateNode);
                        default:
                            return containerFiber.child.stateNode;
                    }
                }
                function attemptSynchronousHydration$1(fiber) {
                    switch(fiber.tag){
                        case HostRoot:
                            {
                                var root2 = fiber.stateNode;
                                if (isRootDehydrated(root2)) {
                                    var lanes = getHighestPriorityPendingLanes(root2);
                                    flushRoot(root2, lanes);
                                }
                                break;
                            }
                        case SuspenseComponent:
                            {
                                flushSync(function() {
                                    var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                                    if (root3 !== null) {
                                        var eventTime = requestEventTime();
                                        scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                                    }
                                });
                                var retryLane = SyncLane;
                                markRetryLaneIfNotHydrated(fiber, retryLane);
                                break;
                            }
                    }
                }
                function markRetryLaneImpl(fiber, retryLane) {
                    var suspenseState = fiber.memoizedState;
                    if (suspenseState !== null && suspenseState.dehydrated !== null) {
                        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
                    }
                }
                function markRetryLaneIfNotHydrated(fiber, retryLane) {
                    markRetryLaneImpl(fiber, retryLane);
                    var alternate = fiber.alternate;
                    if (alternate) {
                        markRetryLaneImpl(alternate, retryLane);
                    }
                }
                function attemptContinuousHydration$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var lane = SelectiveHydrationLane;
                    var root2 = enqueueConcurrentRenderForLane(fiber, lane);
                    if (root2 !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                    }
                    markRetryLaneIfNotHydrated(fiber, lane);
                }
                function attemptHydrationAtCurrentPriority$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var lane = requestUpdateLane(fiber);
                    var root2 = enqueueConcurrentRenderForLane(fiber, lane);
                    if (root2 !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                    }
                    markRetryLaneIfNotHydrated(fiber, lane);
                }
                function findHostInstanceWithNoPortals(fiber) {
                    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    return hostFiber.stateNode;
                }
                var shouldErrorImpl = function shouldErrorImpl(fiber) {
                    return null;
                };
                function shouldError(fiber) {
                    return shouldErrorImpl(fiber);
                }
                var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
                    return false;
                };
                function shouldSuspend(fiber) {
                    return shouldSuspendImpl(fiber);
                }
                var overrideHookState = null;
                var overrideHookStateDeletePath = null;
                var overrideHookStateRenamePath = null;
                var overrideProps = null;
                var overridePropsDeletePath = null;
                var overridePropsRenamePath = null;
                var scheduleUpdate = null;
                var setErrorHandler = null;
                var setSuspenseHandler = null;
                {
                    var copyWithDeleteImpl = function copyWithDeleteImpl1(obj, path, index2) {
                        var key = path[index2];
                        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
                        if (index2 + 1 === path.length) {
                            if (isArray(updated)) {
                                updated.splice(key, 1);
                            } else {
                                delete updated[key];
                            }
                            return updated;
                        }
                        updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
                        return updated;
                    };
                    var copyWithDelete = function copyWithDelete(obj, path) {
                        return copyWithDeleteImpl(obj, path, 0);
                    };
                    var copyWithRenameImpl = function copyWithRenameImpl1(obj, oldPath, newPath, index2) {
                        var oldKey = oldPath[index2];
                        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
                        if (index2 + 1 === oldPath.length) {
                            var newKey = newPath[index2];
                            updated[newKey] = updated[oldKey];
                            if (isArray(updated)) {
                                updated.splice(oldKey, 1);
                            } else {
                                delete updated[oldKey];
                            }
                        } else {
                            updated[oldKey] = copyWithRenameImpl(// $FlowFixMe number or string is fine here
                            obj[oldKey], oldPath, newPath, index2 + 1);
                        }
                        return updated;
                    };
                    var copyWithRename = function copyWithRename(obj, oldPath, newPath) {
                        if (oldPath.length !== newPath.length) {
                            warn("copyWithRename() expects paths of the same length");
                            return;
                        } else {
                            for(var i = 0; i < newPath.length - 1; i++){
                                if (oldPath[i] !== newPath[i]) {
                                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                                    return;
                                }
                            }
                        }
                        return copyWithRenameImpl(obj, oldPath, newPath, 0);
                    };
                    var copyWithSetImpl = function copyWithSetImpl1(obj, path, index2, value) {
                        if (index2 >= path.length) {
                            return value;
                        }
                        var key = path[index2];
                        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
                        updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
                        return updated;
                    };
                    var copyWithSet = function copyWithSet(obj, path, value) {
                        return copyWithSetImpl(obj, path, 0, value);
                    };
                    var findHook = function findHook(fiber, id) {
                        var currentHook2 = fiber.memoizedState;
                        while(currentHook2 !== null && id > 0){
                            currentHook2 = currentHook2.next;
                            id--;
                        }
                        return currentHook2;
                    };
                    overrideHookState = function overrideHookState(fiber, id, path, value) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithSet(hook.memoizedState, path, value);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root2 !== null) {
                                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideHookStateDeletePath = function overrideHookStateDeletePath(fiber, id, path) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithDelete(hook.memoizedState, path);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root2 !== null) {
                                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideHookStateRenamePath = function overrideHookStateRenamePath(fiber, id, oldPath, newPath) {
                        var hook = findHook(fiber, id);
                        if (hook !== null) {
                            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                            hook.memoizedState = newState;
                            hook.baseState = newState;
                            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                            if (root2 !== null) {
                                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                            }
                        }
                    };
                    overrideProps = function overrideProps(fiber, path, value) {
                        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    overridePropsDeletePath = function overridePropsDeletePath(fiber, path) {
                        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    overridePropsRenamePath = function overridePropsRenamePath(fiber, oldPath, newPath) {
                        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
                        if (fiber.alternate) {
                            fiber.alternate.pendingProps = fiber.pendingProps;
                        }
                        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    scheduleUpdate = function scheduleUpdate(fiber) {
                        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                        if (root2 !== null) {
                            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                        }
                    };
                    setErrorHandler = function setErrorHandler(newShouldErrorImpl) {
                        shouldErrorImpl = newShouldErrorImpl;
                    };
                    setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
                        shouldSuspendImpl = newShouldSuspendImpl;
                    };
                }
                function findHostInstanceByFiber(fiber) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    return hostFiber.stateNode;
                }
                function emptyFindFiberByHostInstance(instance) {
                    return null;
                }
                function getCurrentFiberForDevTools() {
                    return current;
                }
                function injectIntoDevTools(devToolsConfig) {
                    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
                    var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
                    return injectInternals({
                        bundleType: devToolsConfig.bundleType,
                        version: devToolsConfig.version,
                        rendererPackageName: devToolsConfig.rendererPackageName,
                        rendererConfig: devToolsConfig.rendererConfig,
                        overrideHookState: overrideHookState,
                        overrideHookStateDeletePath: overrideHookStateDeletePath,
                        overrideHookStateRenamePath: overrideHookStateRenamePath,
                        overrideProps: overrideProps,
                        overridePropsDeletePath: overridePropsDeletePath,
                        overridePropsRenamePath: overridePropsRenamePath,
                        setErrorHandler: setErrorHandler,
                        setSuspenseHandler: setSuspenseHandler,
                        scheduleUpdate: scheduleUpdate,
                        currentDispatcherRef: ReactCurrentDispatcher2,
                        findHostInstanceByFiber: findHostInstanceByFiber,
                        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
                        // React Refresh
                        findHostInstancesForRefresh: findHostInstancesForRefresh,
                        scheduleRefresh: scheduleRefresh,
                        scheduleRoot: scheduleRoot,
                        setRefreshHandler: setRefreshHandler,
                        // Enables DevTools to append owner stacks to error messages in DEV mode.
                        getCurrentFiber: getCurrentFiberForDevTools,
                        // Enables DevTools to detect reconciler version rather than renderer version
                        // which may not match for third party renderers.
                        reconcilerVersion: ReactVersion
                    });
                }
                var defaultOnRecoverableError = typeof reportError === "function" ? // In modern browsers, reportError will dispatch an error event,
                // emulating an uncaught JavaScript error.
                reportError : function defaultOnRecoverableError(error2) {
                    console["error"](error2);
                };
                function ReactDOMRoot(internalRoot) {
                    this._internalRoot = internalRoot;
                }
                ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
                    var root2 = this._internalRoot;
                    if (root2 === null) {
                        throw new Error("Cannot update an unmounted root.");
                    }
                    {
                        if (typeof arguments[1] === "function") {
                            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
                        } else if (isValidContainer(arguments[1])) {
                            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
                        } else if (typeof arguments[1] !== "undefined") {
                            error("You passed a second argument to root.render(...) but it only accepts one argument.");
                        }
                        var container = root2.containerInfo;
                        if (container.nodeType !== COMMENT_NODE) {
                            var hostInstance = findHostInstanceWithNoPortals(root2.current);
                            if (hostInstance) {
                                if (hostInstance.parentNode !== container) {
                                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                                }
                            }
                        }
                    }
                    updateContainer(children, root2, null, null);
                };
                ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
                    {
                        if (typeof arguments[0] === "function") {
                            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
                        }
                    }
                    var root2 = this._internalRoot;
                    if (root2 !== null) {
                        this._internalRoot = null;
                        var container = root2.containerInfo;
                        {
                            if (isAlreadyRendering()) {
                                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                            }
                        }
                        flushSync(function() {
                            updateContainer(null, root2, null, null);
                        });
                        unmarkContainerAsRoot(container);
                    }
                };
                function createRoot2(container, options2) {
                    if (!isValidContainer(container)) {
                        throw new Error("createRoot(...): Target container is not a DOM element.");
                    }
                    warnIfReactDOMContainerInDEV(container);
                    var isStrictMode = false;
                    var concurrentUpdatesByDefaultOverride = false;
                    var identifierPrefix = "";
                    var onRecoverableError = defaultOnRecoverableError;
                    var transitionCallbacks = null;
                    if (options2 !== null && options2 !== void 0) {
                        {
                            if (options2.hydrate) {
                                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                            } else {
                                if ((typeof options2 === "undefined" ? "undefined" : _type_of(options2)) === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                                }
                            }
                        }
                        if (options2.unstable_strictMode === true) {
                            isStrictMode = true;
                        }
                        if (options2.identifierPrefix !== void 0) {
                            identifierPrefix = options2.identifierPrefix;
                        }
                        if (options2.onRecoverableError !== void 0) {
                            onRecoverableError = options2.onRecoverableError;
                        }
                        if (options2.transitionCallbacks !== void 0) {
                            transitionCallbacks = options2.transitionCallbacks;
                        }
                    }
                    var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    markContainerAsRoot(root2.current, container);
                    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                    listenToAllSupportedEvents(rootContainerElement);
                    return new ReactDOMRoot(root2);
                }
                function ReactDOMHydrationRoot(internalRoot) {
                    this._internalRoot = internalRoot;
                }
                function scheduleHydration(target) {
                    if (target) {
                        queueExplicitHydrationTarget(target);
                    }
                }
                ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
                function hydrateRoot(container, initialChildren, options2) {
                    if (!isValidContainer(container)) {
                        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
                    }
                    warnIfReactDOMContainerInDEV(container);
                    {
                        if (initialChildren === void 0) {
                            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
                        }
                    }
                    var hydrationCallbacks = options2 != null ? options2 : null;
                    var mutableSources = options2 != null && options2.hydratedSources || null;
                    var isStrictMode = false;
                    var concurrentUpdatesByDefaultOverride = false;
                    var identifierPrefix = "";
                    var onRecoverableError = defaultOnRecoverableError;
                    if (options2 !== null && options2 !== void 0) {
                        if (options2.unstable_strictMode === true) {
                            isStrictMode = true;
                        }
                        if (options2.identifierPrefix !== void 0) {
                            identifierPrefix = options2.identifierPrefix;
                        }
                        if (options2.onRecoverableError !== void 0) {
                            onRecoverableError = options2.onRecoverableError;
                        }
                    }
                    var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
                    markContainerAsRoot(root2.current, container);
                    listenToAllSupportedEvents(container);
                    if (mutableSources) {
                        for(var i = 0; i < mutableSources.length; i++){
                            var mutableSource = mutableSources[i];
                            registerMutableSourceForHydration(root2, mutableSource);
                        }
                    }
                    return new ReactDOMHydrationRoot(root2);
                }
                function isValidContainer(node2) {
                    return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
                }
                function isValidContainerLegacy(node2) {
                    return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
                }
                function warnIfReactDOMContainerInDEV(container) {
                    {
                        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
                        }
                        if (isContainerMarkedAsRoot(container)) {
                            if (container._reactRootContainer) {
                                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                            } else {
                                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                            }
                        }
                    }
                }
                var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
                var topLevelUpdateWarnings;
                {
                    topLevelUpdateWarnings = function topLevelUpdateWarnings(container) {
                        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                            if (hostInstance) {
                                if (hostInstance.parentNode !== container) {
                                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                                }
                            }
                        }
                        var isRootRenderedBySomeReact = !!container._reactRootContainer;
                        var rootEl = getReactRootElementInContainer(container);
                        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
                        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
                        }
                        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
                        }
                    };
                }
                function getReactRootElementInContainer(container) {
                    if (!container) {
                        return null;
                    }
                    if (container.nodeType === DOCUMENT_NODE) {
                        return container.documentElement;
                    } else {
                        return container.firstChild;
                    }
                }
                function noopOnRecoverableError() {}
                function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
                    if (isHydrationContainer) {
                        if (typeof callback === "function") {
                            var originalCallback = callback;
                            callback = function callback() {
                                var instance = getPublicRootInstance(root2);
                                originalCallback.call(instance);
                            };
                        }
                        var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
                        false, // isStrictMode
                        false, // concurrentUpdatesByDefaultOverride,
                        "", // identifierPrefix
                        noopOnRecoverableError);
                        container._reactRootContainer = root2;
                        markContainerAsRoot(root2.current, container);
                        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                        listenToAllSupportedEvents(rootContainerElement);
                        flushSync();
                        return root2;
                    } else {
                        var rootSibling;
                        while(rootSibling = container.lastChild){
                            container.removeChild(rootSibling);
                        }
                        if (typeof callback === "function") {
                            var _originalCallback = callback;
                            callback = function callback() {
                                var instance = getPublicRootInstance(_root);
                                _originalCallback.call(instance);
                            };
                        }
                        var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
                        false, // isStrictMode
                        false, // concurrentUpdatesByDefaultOverride,
                        "", // identifierPrefix
                        noopOnRecoverableError);
                        container._reactRootContainer = _root;
                        markContainerAsRoot(_root.current, container);
                        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                        listenToAllSupportedEvents(_rootContainerElement);
                        flushSync(function() {
                            updateContainer(initialChildren, _root, parentComponent, callback);
                        });
                        return _root;
                    }
                }
                function warnOnInvalidCallback$1(callback, callerName) {
                    {
                        if (callback !== null && typeof callback !== "function") {
                            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
                        }
                    }
                }
                function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
                    {
                        topLevelUpdateWarnings(container);
                        warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
                    }
                    var maybeRoot = container._reactRootContainer;
                    var root2;
                    if (!maybeRoot) {
                        root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
                    } else {
                        root2 = maybeRoot;
                        if (typeof callback === "function") {
                            var originalCallback = callback;
                            callback = function callback() {
                                var instance = getPublicRootInstance(root2);
                                originalCallback.call(instance);
                            };
                        }
                        updateContainer(children, root2, parentComponent, callback);
                    }
                    return getPublicRootInstance(root2);
                }
                var didWarnAboutFindDOMNode = false;
                function findDOMNode2(componentOrElement) {
                    {
                        if (!didWarnAboutFindDOMNode) {
                            didWarnAboutFindDOMNode = true;
                            error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
                        }
                        var owner = ReactCurrentOwner$3.current;
                        if (owner !== null && owner.stateNode !== null) {
                            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                            if (!warnedAboutRefsInRender) {
                                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                            }
                            owner.stateNode._warnedAboutRefsInRender = true;
                        }
                    }
                    if (componentOrElement == null) {
                        return null;
                    }
                    if (componentOrElement.nodeType === ELEMENT_NODE) {
                        return componentOrElement;
                    }
                    {
                        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
                    }
                }
                function hydrate(element, container, callback) {
                    {
                        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
                        }
                    }
                    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
                }
                function render2(element, container, callback) {
                    {
                        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
                        }
                    }
                    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
                }
                function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
                    {
                        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
                    }
                    if (!isValidContainerLegacy(containerNode)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    if (parentComponent == null || !has(parentComponent)) {
                        throw new Error("parentComponent must be a valid React Component");
                    }
                    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
                }
                var didWarnAboutUnmountComponentAtNode = false;
                function unmountComponentAtNode2(container) {
                    {
                        if (!didWarnAboutUnmountComponentAtNode) {
                            didWarnAboutUnmountComponentAtNode = true;
                            error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
                        }
                    }
                    if (!isValidContainerLegacy(container)) {
                        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
                        if (isModernRoot) {
                            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
                        }
                    }
                    if (container._reactRootContainer) {
                        {
                            var rootEl = getReactRootElementInContainer(container);
                            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                            if (renderedByDifferentReact) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                            }
                        }
                        flushSync(function() {
                            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                                container._reactRootContainer = null;
                                unmarkContainerAsRoot(container);
                            });
                        });
                        return true;
                    } else {
                        {
                            var _rootEl = getReactRootElementInContainer(container);
                            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                            if (hasNonRootReactChild) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                            }
                        }
                        return false;
                    }
                }
                setAttemptSynchronousHydration(attemptSynchronousHydration$1);
                setAttemptContinuousHydration(attemptContinuousHydration$1);
                setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
                setGetCurrentUpdatePriority(getCurrentUpdatePriority);
                setAttemptHydrationAtPriority(runWithPriority);
                {
                    if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
                    Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
                    Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
                        error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
                    }
                }
                setRestoreImplementation(restoreControlledState$3);
                setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
                function createPortal$1(children, container) {
                    var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    if (!isValidContainer(container)) {
                        throw new Error("Target container is not a DOM element.");
                    }
                    return createPortal(children, container, null, key);
                }
                function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
                    return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
                }
                var Internals = {
                    usingClientEntryPoint: false,
                    // Keep in sync with ReactTestUtils.js.
                    // This is an array for better minification.
                    Events: [
                        getInstanceFromNode,
                        getNodeFromInstance,
                        getFiberCurrentPropsFromNode,
                        enqueueStateRestore,
                        restoreStateIfNeeded,
                        batchedUpdates$1
                    ]
                };
                function createRoot$1(container, options2) {
                    {
                        if (!Internals.usingClientEntryPoint && true) {
                            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
                        }
                    }
                    return createRoot2(container, options2);
                }
                function hydrateRoot$1(container, initialChildren, options2) {
                    {
                        if (!Internals.usingClientEntryPoint && true) {
                            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
                        }
                    }
                    return hydrateRoot(container, initialChildren, options2);
                }
                function flushSync$1(fn) {
                    {
                        if (isAlreadyRendering()) {
                            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
                        }
                    }
                    return flushSync(fn);
                }
                var foundDevTools = injectIntoDevTools({
                    findFiberByHostInstance: getClosestInstanceFromNode,
                    bundleType: 1,
                    version: ReactVersion,
                    rendererPackageName: "react-dom"
                });
                {
                    if (!foundDevTools && canUseDOM && window.top === window.self) {
                        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                            var protocol = window.location.protocol;
                            if (/^(https?|file):$/.test(protocol)) {
                                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                            }
                        }
                    }
                }
                exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
                exports2.createPortal = createPortal$1;
                exports2.createRoot = createRoot$1;
                exports2.findDOMNode = findDOMNode2;
                exports2.flushSync = flushSync$1;
                exports2.hydrate = hydrate;
                exports2.hydrateRoot = hydrateRoot$1;
                exports2.render = render2;
                exports2.unmountComponentAtNode = unmountComponentAtNode2;
                exports2.unstable_batchedUpdates = batchedUpdates$1;
                exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
                exports2.version = ReactVersion;
                if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                    __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
                }
            })();
        }
    }
});
// ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js
var require_react_dom = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js": function(exports2, module2) {
        "use strict";
        function checkDCE() {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
                return;
            }
            if (process.env.NODE_ENV !== "production") {
                throw new Error("^_^");
            }
            try {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
            } catch (err) {
                console.error(err);
            }
        }
        if (process.env.NODE_ENV === "production") {
            checkDCE();
            module2.exports = require_react_dom_production_min();
        } else {
            module2.exports = require_react_dom_development();
        }
    }
});
// ../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
    "../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/cjs/react-is.production.min.js": function(exports2) {
        "use strict";
        var b = Symbol.for("react.element");
        var c = Symbol.for("react.portal");
        var d = Symbol.for("react.fragment");
        var e = Symbol.for("react.strict_mode");
        var f = Symbol.for("react.profiler");
        var g = Symbol.for("react.provider");
        var h = Symbol.for("react.context");
        var k = Symbol.for("react.server_context");
        var l = Symbol.for("react.forward_ref");
        var m = Symbol.for("react.suspense");
        var n = Symbol.for("react.suspense_list");
        var p = Symbol.for("react.memo");
        var q = Symbol.for("react.lazy");
        var t = Symbol.for("react.offscreen");
        var u;
        u = Symbol.for("react.module.reference");
        function v(a) {
            if ("object" === (typeof a === "undefined" ? "undefined" : _type_of(a)) && null !== a) {
                var r = a.$$typeof;
                switch(r){
                    case b:
                        switch(a = a.type, a){
                            case d:
                            case f:
                            case e:
                            case m:
                            case n:
                                return a;
                            default:
                                switch(a = a && a.$$typeof, a){
                                    case k:
                                    case h:
                                    case l:
                                    case q:
                                    case p:
                                    case g:
                                        return a;
                                    default:
                                        return r;
                                }
                        }
                    case c:
                        return r;
                }
            }
        }
        exports2.ContextConsumer = h;
        exports2.ContextProvider = g;
        exports2.Element = b;
        exports2.ForwardRef = l;
        exports2.Fragment = d;
        exports2.Lazy = q;
        exports2.Memo = p;
        exports2.Portal = c;
        exports2.Profiler = f;
        exports2.StrictMode = e;
        exports2.Suspense = m;
        exports2.SuspenseList = n;
        exports2.isAsyncMode = function() {
            return false;
        };
        exports2.isConcurrentMode = function() {
            return false;
        };
        exports2.isContextConsumer = function(a) {
            return v(a) === h;
        };
        exports2.isContextProvider = function(a) {
            return v(a) === g;
        };
        exports2.isElement = function(a) {
            return "object" === (typeof a === "undefined" ? "undefined" : _type_of(a)) && null !== a && a.$$typeof === b;
        };
        exports2.isForwardRef = function(a) {
            return v(a) === l;
        };
        exports2.isFragment = function(a) {
            return v(a) === d;
        };
        exports2.isLazy = function(a) {
            return v(a) === q;
        };
        exports2.isMemo = function(a) {
            return v(a) === p;
        };
        exports2.isPortal = function(a) {
            return v(a) === c;
        };
        exports2.isProfiler = function(a) {
            return v(a) === f;
        };
        exports2.isStrictMode = function(a) {
            return v(a) === e;
        };
        exports2.isSuspense = function(a) {
            return v(a) === m;
        };
        exports2.isSuspenseList = function(a) {
            return v(a) === n;
        };
        exports2.isValidElementType = function(a) {
            return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === (typeof a === "undefined" ? "undefined" : _type_of(a)) && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
        };
        exports2.typeOf = v;
    }
});
// ../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
    "../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/cjs/react-is.development.js": function(exports2) {
        "use strict";
        if (process.env.NODE_ENV !== "production") {
            (function() {
                "use strict";
                var REACT_ELEMENT_TYPE = Symbol.for("react.element");
                var REACT_PORTAL_TYPE = Symbol.for("react.portal");
                var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
                var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
                var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
                var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
                var REACT_CONTEXT_TYPE = Symbol.for("react.context");
                var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
                var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
                var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
                var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
                var REACT_MEMO_TYPE = Symbol.for("react.memo");
                var REACT_LAZY_TYPE = Symbol.for("react.lazy");
                var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
                var enableScopeAPI = false;
                var enableCacheElement = false;
                var enableTransitionTracing = false;
                var enableLegacyHidden = false;
                var enableDebugTracing = false;
                var REACT_MODULE_REFERENCE;
                {
                    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
                }
                function isValidElementType(type) {
                    if (typeof type === "string" || typeof type === "function") {
                        return true;
                    }
                    if (type === REACT_FRAGMENT_TYPE2 || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                        return true;
                    }
                    if ((typeof type === "undefined" ? "undefined" : _type_of(type)) === "object" && type !== null) {
                        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                        // types supported by any Flight configuration anywhere since
                        // we don't know which Flight build this will end up being used
                        // with.
                        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                            return true;
                        }
                    }
                    return false;
                }
                function typeOf(object) {
                    if ((typeof object === "undefined" ? "undefined" : _type_of(object)) === "object" && object !== null) {
                        var $$typeof = object.$$typeof;
                        switch($$typeof){
                            case REACT_ELEMENT_TYPE:
                                var type = object.type;
                                switch(type){
                                    case REACT_FRAGMENT_TYPE2:
                                    case REACT_PROFILER_TYPE:
                                    case REACT_STRICT_MODE_TYPE:
                                    case REACT_SUSPENSE_TYPE:
                                    case REACT_SUSPENSE_LIST_TYPE:
                                        return type;
                                    default:
                                        var $$typeofType = type && type.$$typeof;
                                        switch($$typeofType){
                                            case REACT_SERVER_CONTEXT_TYPE:
                                            case REACT_CONTEXT_TYPE:
                                            case REACT_FORWARD_REF_TYPE:
                                            case REACT_LAZY_TYPE:
                                            case REACT_MEMO_TYPE:
                                            case REACT_PROVIDER_TYPE:
                                                return $$typeofType;
                                            default:
                                                return $$typeof;
                                        }
                                }
                            case REACT_PORTAL_TYPE:
                                return $$typeof;
                        }
                    }
                    return void 0;
                }
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element2 = REACT_ELEMENT_TYPE;
                var ForwardRef2 = REACT_FORWARD_REF_TYPE;
                var Fragment4 = REACT_FRAGMENT_TYPE2;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;
                var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
                var hasWarnedAboutDeprecatedIsAsyncMode = false;
                var hasWarnedAboutDeprecatedIsConcurrentMode = false;
                function isAsyncMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                            hasWarnedAboutDeprecatedIsAsyncMode = true;
                            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
                        }
                    }
                    return false;
                }
                function isConcurrentMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                            hasWarnedAboutDeprecatedIsConcurrentMode = true;
                            console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
                        }
                    }
                    return false;
                }
                function isContextConsumer(object) {
                    return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                    return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                    return (typeof object === "undefined" ? "undefined" : _type_of(object)) === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
                function isForwardRef(object) {
                    return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment3(object) {
                    return typeOf(object) === REACT_FRAGMENT_TYPE2;
                }
                function isLazy(object) {
                    return typeOf(object) === REACT_LAZY_TYPE;
                }
                function isMemo2(object) {
                    return typeOf(object) === REACT_MEMO_TYPE;
                }
                function isPortal(object) {
                    return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isProfiler(object) {
                    return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isStrictMode(object) {
                    return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }
                function isSuspense(object) {
                    return typeOf(object) === REACT_SUSPENSE_TYPE;
                }
                function isSuspenseList(object) {
                    return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
                }
                exports2.ContextConsumer = ContextConsumer;
                exports2.ContextProvider = ContextProvider;
                exports2.Element = Element2;
                exports2.ForwardRef = ForwardRef2;
                exports2.Fragment = Fragment4;
                exports2.Lazy = Lazy;
                exports2.Memo = Memo;
                exports2.Portal = Portal;
                exports2.Profiler = Profiler;
                exports2.StrictMode = StrictMode;
                exports2.Suspense = Suspense;
                exports2.SuspenseList = SuspenseList;
                exports2.isAsyncMode = isAsyncMode;
                exports2.isConcurrentMode = isConcurrentMode;
                exports2.isContextConsumer = isContextConsumer;
                exports2.isContextProvider = isContextProvider;
                exports2.isElement = isElement;
                exports2.isForwardRef = isForwardRef;
                exports2.isFragment = isFragment3;
                exports2.isLazy = isLazy;
                exports2.isMemo = isMemo2;
                exports2.isPortal = isPortal;
                exports2.isProfiler = isProfiler;
                exports2.isStrictMode = isStrictMode;
                exports2.isSuspense = isSuspense;
                exports2.isSuspenseList = isSuspenseList;
                exports2.isValidElementType = isValidElementType;
                exports2.typeOf = typeOf;
            })();
        }
    }
});
// ../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/index.js
var require_react_is = __commonJS({
    "../../node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/index.js": function(exports2, module2) {
        "use strict";
        if (process.env.NODE_ENV === "production") {
            module2.exports = require_react_is_production_min();
        } else {
            module2.exports = require_react_is_development();
        }
    }
});
// src/index.ts
var index_exports = {};
__export(index_exports, {
    Button: function() {
        return Button_default;
    }
});
module.exports = __toCommonJS(index_exports);
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function _extends(n) {
        for(var e = 1; e < arguments.length; e++){
            var t = arguments[e];
            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
    }, _extends.apply(null, arguments);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(o2) {
        return typeof o2;
    } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof(o);
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/React/isFragment.js
var REACT_ELEMENT_TYPE_18 = Symbol.for("react.element");
var REACT_ELEMENT_TYPE_19 = Symbol.for("react.transitional.element");
var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
function isFragment(object) {
    return(// Base object type
    object && _typeof(object) === "object" && // React Element type
    (object.$$typeof === REACT_ELEMENT_TYPE_18 || object.$$typeof === REACT_ELEMENT_TYPE_19) && // React Fragment type
    object.type === REACT_FRAGMENT_TYPE);
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Children/toArray.js
var import_react = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/warning.js
var warned = {};
var preWarningFns = [];
var preMessage = function preMessage2(fn) {
    preWarningFns.push(fn);
};
function warning(valid, message) {
    if (process.env.NODE_ENV !== "production" && !valid && console !== void 0) {
        var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
            return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
        }, message);
        if (finalMessage) {
            console.error("Warning: ".concat(finalMessage));
        }
    }
}
function note(valid, message) {
    if (process.env.NODE_ENV !== "production" && !valid && console !== void 0) {
        var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
            return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
        }, message);
        if (finalMessage) {
            console.warn("Note: ".concat(finalMessage));
        }
    }
}
function resetWarned() {
    warned = {};
}
function call(method, valid, message) {
    if (!valid && !warned[message]) {
        method(false, message);
        warned[message] = true;
    }
}
function warningOnce(valid, message) {
    call(warning, valid, message);
}
function noteOnce(valid, message) {
    call(note, valid, message);
}
warningOnce.preMessage = preMessage;
warningOnce.resetWarned = resetWarned;
warningOnce.noteOnce = noteOnce;
var warning_default = warningOnce;
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
    }) : e[r] = t, e;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
            return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread2(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
            _defineProperty(e, r2, t[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
            Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
        });
    }
    return e;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/findDOMNode.js
var import_react2 = __toESM(require("react"));
var import_react_dom = __toESM(require_react_dom());
function isDOM(node2) {
    return _instanceof(node2, HTMLElement) || _instanceof(node2, SVGElement);
}
function getDOM(node2) {
    if (node2 && _typeof(node2) === "object" && isDOM(node2.nativeElement)) {
        return node2.nativeElement;
    }
    if (isDOM(node2)) {
        return node2;
    }
    return null;
}
function findDOMNode(node2) {
    var domNode = getDOM(node2);
    if (domNode) {
        return domNode;
    }
    if (_instanceof(node2, import_react2.default.Component)) {
        var _ReactDOM$findDOMNode;
        return (_ReactDOM$findDOMNode = import_react_dom.default.findDOMNode) === null || _ReactDOM$findDOMNode === void 0 ? void 0 : _ReactDOM$findDOMNode.call(import_react_dom.default, node2);
    }
    return null;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/ref.js
var import_react3 = require("react");
var import_react_is = __toESM(require_react_is());
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useMemo.js
var React3 = __toESM(require("react"));
function useMemo(getValue2, condition, shouldUpdate) {
    var cacheRef = React3.useRef({});
    if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
        cacheRef.current.value = getValue2();
        cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/ref.js
var ReactMajorVersion = Number(import_react3.version.split(".")[0]);
var fillRef = function fillRef2(ref, node2) {
    if (typeof ref === "function") {
        ref(node2);
    } else if (_typeof(ref) === "object" && ref && "current" in ref) {
        ref.current = node2;
    }
};
var composeRef = function composeRef2() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){
        refs[_key] = arguments[_key];
    }
    var refList = refs.filter(Boolean);
    if (refList.length <= 1) {
        return refList[0];
    }
    return function(node2) {
        refs.forEach(function(ref) {
            fillRef(ref, node2);
        });
    };
};
var useComposeRef = function useComposeRef2() {
    for(var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
        refs[_key2] = arguments[_key2];
    }
    return useMemo(function() {
        return composeRef.apply(void 0, refs);
    }, refs, function(prev2, next2) {
        return prev2.length !== next2.length || prev2.every(function(ref, i) {
            return ref !== next2[i];
        });
    });
};
var supportRef = function supportRef2(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    if (!nodeOrComponent) {
        return false;
    }
    if (isReactElement(nodeOrComponent) && ReactMajorVersion >= 19) {
        return true;
    }
    var type = (0, import_react_is.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
    if (typeof type === "function" && !((_type$prototype = type.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render) && type.$$typeof !== import_react_is.ForwardRef) {
        return false;
    }
    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render) && nodeOrComponent.$$typeof !== import_react_is.ForwardRef) {
        return false;
    }
    return true;
};
function isReactElement(node2) {
    return /* @__PURE__ */ (0, import_react3.isValidElement)(node2) && !isFragment(node2);
}
var getNodeRef = function getNodeRef2(node2) {
    if (node2 && isReactElement(node2)) {
        var ele = node2;
        return ele.props.propertyIsEnumerable("ref") ? ele.props.ref : ele.ref;
    }
    return null;
};
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a, n) {
    if (!_instanceof(a, n)) throw new TypeError("Cannot call a class as a function");
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties1(e, r) {
    for(var t = 0; t < r.length; t++){
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
}
function _createClass(e, r, t) {
    return r && _defineProperties1(e.prototype, r), t && _defineProperties1(e, t), Object.defineProperty(e, "prototype", {
        writable: false
    }), e;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(t2, e2) {
        return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: true,
            configurable: true
        }
    }), Object.defineProperty(t, "prototype", {
        writable: false
    }), e && _setPrototypeOf(t, e);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
    }, _getPrototypeOf(t);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (t2) {}
    return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
    })();
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t, e) {
    if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t) {
    var r = _isNativeReflectConstruct();
    return function() {
        var e, o = _getPrototypeOf(t);
        if (r) {
            var s = _getPrototypeOf(this).constructor;
            e = Reflect.construct(o, arguments, s);
        } else e = o.apply(this, arguments);
        return _possibleConstructorReturn(this, e);
    };
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
    return n;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(r, a) {
    if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = ({}).toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/raf.js
var raf = function raf2(callback) {
    return +setTimeout(callback, 16);
};
var caf = function caf2(num) {
    return clearTimeout(num);
};
if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
    raf = function raf3(callback) {
        return window.requestAnimationFrame(callback);
    };
    caf = function caf3(handle) {
        return window.cancelAnimationFrame(handle);
    };
}
var rafUUID = 0;
var rafIds = /* @__PURE__ */ new Map();
function cleanup(id) {
    rafIds.delete(id);
}
var wrapperRaf = function wrapperRaf2(callback) {
    var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    rafUUID += 1;
    var id = rafUUID;
    function callRef(leftTimes) {
        if (leftTimes === 0) {
            cleanup(id);
            callback();
        } else {
            var realId = raf(function() {
                callRef(leftTimes - 1);
            });
            rafIds.set(id, realId);
        }
    }
    callRef(times);
    return id;
};
wrapperRaf.cancel = function(id) {
    var realId = rafIds.get(id);
    cleanup(id);
    return caf(realId);
};
if (process.env.NODE_ENV !== "production") {
    wrapperRaf.ids = function() {
        return rafIds;
    };
}
var raf_default = wrapperRaf;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/index.js
var React33 = __toESM(require("react"));
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t) return;
                f = false;
            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true);
        } catch (r2) {
            o = true, n = r2;
        } finally{
            try {
                if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
// ../../node_modules/.pnpm/@emotion+hash@0.8.0/node_modules/@emotion/hash/dist/hash.esm.js
function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 255;
            h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}
var hash_esm_default = murmur2;
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/canUseDom.js
function canUseDom() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/contains.js
function contains(root, n) {
    if (!root) {
        return false;
    }
    if (root.contains) {
        return root.contains(n);
    }
    var node2 = n;
    while(node2){
        if (node2 === root) {
            return true;
        }
        node2 = node2.parentNode;
    }
    return false;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/dynamicCSS.js
var APPEND_ORDER = "data-rc-order";
var APPEND_PRIORITY = "data-rc-priority";
var MARK_KEY = "rc-util-key";
var containerCache = /* @__PURE__ */ new Map();
function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
    if (mark) {
        return mark.startsWith("data-") ? mark : "data-".concat(mark);
    }
    return MARK_KEY;
}
function getContainer(option) {
    if (option.attachTo) {
        return option.attachTo;
    }
    var head = document.querySelector("head");
    return head || document.body;
}
function getOrder(prepend) {
    if (prepend === "queue") {
        return "prependQueue";
    }
    return prepend ? "prepend" : "append";
}
function findStyles(container) {
    return Array.from((containerCache.get(container) || container).children).filter(function(node2) {
        return node2.tagName === "STYLE";
    });
}
function injectCSS(css) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!canUseDom()) {
        return null;
    }
    var csp = option.csp, prepend = option.prepend, _option$priority = option.priority, priority = _option$priority === void 0 ? 0 : _option$priority;
    var mergedOrder = getOrder(prepend);
    var isPrependQueue = mergedOrder === "prependQueue";
    var styleNode = document.createElement("style");
    styleNode.setAttribute(APPEND_ORDER, mergedOrder);
    if (isPrependQueue && priority) {
        styleNode.setAttribute(APPEND_PRIORITY, "".concat(priority));
    }
    if (csp !== null && csp !== void 0 && csp.nonce) {
        styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
    }
    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (prepend) {
        if (isPrependQueue) {
            var existStyle = (option.styles || findStyles(container)).filter(function(node2) {
                if (![
                    "prepend",
                    "prependQueue"
                ].includes(node2.getAttribute(APPEND_ORDER))) {
                    return false;
                }
                var nodePriority = Number(node2.getAttribute(APPEND_PRIORITY) || 0);
                return priority >= nodePriority;
            });
            if (existStyle.length) {
                container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
                return styleNode;
            }
        }
        container.insertBefore(styleNode, firstChild);
    } else {
        container.appendChild(styleNode);
    }
    return styleNode;
}
function findExistNode(key) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var container = getContainer(option);
    return (option.styles || findStyles(container)).find(function(node2) {
        return node2.getAttribute(getMark(option)) === key;
    });
}
function removeCSS(key) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var existNode = findExistNode(key, option);
    if (existNode) {
        var container = getContainer(option);
        container.removeChild(existNode);
    }
}
function syncRealContainer(container, option) {
    var cachedRealContainer = containerCache.get(container);
    if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
        var placeholderStyle = injectCSS("", option);
        var parentNode = placeholderStyle.parentNode;
        containerCache.set(container, parentNode);
        container.removeChild(placeholderStyle);
    }
}
function updateCSS(css, key) {
    var originOption = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var container = getContainer(originOption);
    var styles = findStyles(container);
    var option = _objectSpread2(_objectSpread2({}, originOption), {}, {
        styles: styles
    });
    syncRealContainer(container, option);
    var existNode = findExistNode(key, option);
    if (existNode) {
        var _option$csp, _option$csp2;
        if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
            var _option$csp3;
            existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
        }
        if (existNode.innerHTML !== css) {
            existNode.innerHTML = css;
        }
        return existNode;
    }
    var newNode = injectCSS(css, option);
    newNode.setAttribute(getMark(option), key);
    return newNode;
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useCacheToken.js
var import_react4 = require("react");
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {
        if (-1 !== e.indexOf(n)) continue;
        t[n] = r[n];
    }
    return t;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o, r, i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        for(r = 0; r < n.length; r++)o = n[r], -1 === t.indexOf(o) && ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/isEqual.js
function isEqual(obj1, obj2) {
    var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var refSet = /* @__PURE__ */ new Set();
    function deepEqual(a, b) {
        var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        var circular = refSet.has(a);
        warning_default(!circular, "Warning: There may be circular references");
        if (circular) {
            return false;
        }
        if (a === b) {
            return true;
        }
        if (shallow && level > 1) {
            return false;
        }
        refSet.add(a);
        var newLevel = level + 1;
        if (Array.isArray(a)) {
            if (!Array.isArray(b) || a.length !== b.length) {
                return false;
            }
            for(var i = 0; i < a.length; i++){
                if (!deepEqual(a[i], b[i], newLevel)) {
                    return false;
                }
            }
            return true;
        }
        if (a && b && _typeof(a) === "object" && _typeof(b) === "object") {
            var keys2 = Object.keys(a);
            if (keys2.length !== Object.keys(b).length) {
                return false;
            }
            return keys2.every(function(key) {
                return deepEqual(a[key], b[key], newLevel);
            });
        }
        return false;
    }
    return deepEqual(obj1, obj2);
}
var isEqual_default = isEqual;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/StyleContext.js
var React4 = __toESM(require("react"));
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/Cache.js
var SPLIT = "%";
function pathKey(keys2) {
    return keys2.join(SPLIT);
}
var Entity = /* @__PURE__ */ function() {
    function Entity2(instanceId) {
        _classCallCheck(this, Entity2);
        _defineProperty(this, "instanceId", void 0);
        _defineProperty(this, "cache", /* @__PURE__ */ new Map());
        this.instanceId = instanceId;
    }
    _createClass(Entity2, [
        {
            key: "get",
            value: function get2(keys2) {
                return this.opGet(pathKey(keys2));
            }
        },
        {
            key: "opGet",
            value: function opGet(keyPathStr) {
                return this.cache.get(keyPathStr) || null;
            }
        },
        {
            key: "update",
            value: function update(keys2, valueFn) {
                return this.opUpdate(pathKey(keys2), valueFn);
            }
        },
        {
            key: "opUpdate",
            value: function opUpdate(keyPathStr, valueFn) {
                var prevValue = this.cache.get(keyPathStr);
                var nextValue = valueFn(prevValue);
                if (nextValue === null) {
                    this.cache.delete(keyPathStr);
                } else {
                    this.cache.set(keyPathStr, nextValue);
                }
            }
        }
    ]);
    return Entity2;
}();
var Cache_default = Entity;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/StyleContext.js
var ATTR_TOKEN = "data-token-hash";
var ATTR_MARK = "data-css-hash";
var ATTR_CACHE_PATH = "data-cache-path";
var CSS_IN_JS_INSTANCE = "__cssinjs_instance__";
function createCache() {
    var cssinjsInstanceId = Math.random().toString(12).slice(2);
    if (typeof document !== "undefined" && document.head && document.body) {
        var styles = document.body.querySelectorAll("style[".concat(ATTR_MARK, "]")) || [];
        var firstChild = document.head.firstChild;
        Array.from(styles).forEach(function(style2) {
            style2[CSS_IN_JS_INSTANCE] = style2[CSS_IN_JS_INSTANCE] || cssinjsInstanceId;
            if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
                document.head.insertBefore(style2, firstChild);
            }
        });
        var styleHash = {};
        Array.from(document.querySelectorAll("style[".concat(ATTR_MARK, "]"))).forEach(function(style2) {
            var hash = style2.getAttribute(ATTR_MARK);
            if (styleHash[hash]) {
                if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
                    var _style$parentNode;
                    (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 || _style$parentNode.removeChild(style2);
                }
            } else {
                styleHash[hash] = true;
            }
        });
    }
    return new Cache_default(cssinjsInstanceId);
}
var StyleContext = /* @__PURE__ */ React4.createContext({
    hashPriority: "low",
    cache: createCache(),
    defaultCache: true
});
var StyleContext_default = StyleContext;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/theme/calc/CSSCalculator.js
var CALC_UNIT = "CALC_UNIT";
var regexp = new RegExp(CALC_UNIT, "g");
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/theme/ThemeCache.js
function sameDerivativeOption(left, right) {
    if (left.length !== right.length) {
        return false;
    }
    for(var i = 0; i < left.length; i++){
        if (left[i] !== right[i]) {
            return false;
        }
    }
    return true;
}
var ThemeCache = /* @__PURE__ */ function() {
    function ThemeCache2() {
        _classCallCheck(this, ThemeCache2);
        _defineProperty(this, "cache", void 0);
        _defineProperty(this, "keys", void 0);
        _defineProperty(this, "cacheCallTimes", void 0);
        this.cache = /* @__PURE__ */ new Map();
        this.keys = [];
        this.cacheCallTimes = 0;
    }
    _createClass(ThemeCache2, [
        {
            key: "size",
            value: function size() {
                return this.keys.length;
            }
        },
        {
            key: "internalGet",
            value: function internalGet(derivativeOption) {
                var _cache2, _cache3;
                var updateCallTimes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                var cache = {
                    map: this.cache
                };
                derivativeOption.forEach(function(derivative2) {
                    if (!cache) {
                        cache = void 0;
                    } else {
                        var _cache;
                        cache = (_cache = cache) === null || _cache === void 0 || (_cache = _cache.map) === null || _cache === void 0 ? void 0 : _cache.get(derivative2);
                    }
                });
                if ((_cache2 = cache) !== null && _cache2 !== void 0 && _cache2.value && updateCallTimes) {
                    cache.value[1] = this.cacheCallTimes++;
                }
                return (_cache3 = cache) === null || _cache3 === void 0 ? void 0 : _cache3.value;
            }
        },
        {
            key: "get",
            value: function get2(derivativeOption) {
                var _this$internalGet;
                return (_this$internalGet = this.internalGet(derivativeOption, true)) === null || _this$internalGet === void 0 ? void 0 : _this$internalGet[0];
            }
        },
        {
            key: "has",
            value: function has(derivativeOption) {
                return !!this.internalGet(derivativeOption);
            }
        },
        {
            key: "set",
            value: function set2(derivativeOption, value) {
                var _this = this;
                if (!this.has(derivativeOption)) {
                    if (this.size() + 1 > ThemeCache2.MAX_CACHE_SIZE + ThemeCache2.MAX_CACHE_OFFSET) {
                        var _this$keys$reduce = this.keys.reduce(function(result, key) {
                            var _result = _slicedToArray(result, 2), callTimes = _result[1];
                            if (_this.internalGet(key)[1] < callTimes) {
                                return [
                                    key,
                                    _this.internalGet(key)[1]
                                ];
                            }
                            return result;
                        }, [
                            this.keys[0],
                            this.cacheCallTimes
                        ]), _this$keys$reduce2 = _slicedToArray(_this$keys$reduce, 1), targetKey = _this$keys$reduce2[0];
                        this.delete(targetKey);
                    }
                    this.keys.push(derivativeOption);
                }
                var cache = this.cache;
                derivativeOption.forEach(function(derivative2, index) {
                    if (index === derivativeOption.length - 1) {
                        cache.set(derivative2, {
                            value: [
                                value,
                                _this.cacheCallTimes++
                            ]
                        });
                    } else {
                        var cacheValue = cache.get(derivative2);
                        if (!cacheValue) {
                            cache.set(derivative2, {
                                map: /* @__PURE__ */ new Map()
                            });
                        } else if (!cacheValue.map) {
                            cacheValue.map = /* @__PURE__ */ new Map();
                        }
                        cache = cache.get(derivative2).map;
                    }
                });
            }
        },
        {
            key: "deleteByPath",
            value: function deleteByPath(currentCache, derivatives) {
                var cache = currentCache.get(derivatives[0]);
                if (derivatives.length === 1) {
                    var _cache$value;
                    if (!cache.map) {
                        currentCache.delete(derivatives[0]);
                    } else {
                        currentCache.set(derivatives[0], {
                            map: cache.map
                        });
                    }
                    return (_cache$value = cache.value) === null || _cache$value === void 0 ? void 0 : _cache$value[0];
                }
                var result = this.deleteByPath(cache.map, derivatives.slice(1));
                if ((!cache.map || cache.map.size === 0) && !cache.value) {
                    currentCache.delete(derivatives[0]);
                }
                return result;
            }
        },
        {
            key: "delete",
            value: function _delete(derivativeOption) {
                if (this.has(derivativeOption)) {
                    this.keys = this.keys.filter(function(item) {
                        return !sameDerivativeOption(item, derivativeOption);
                    });
                    return this.deleteByPath(this.cache, derivativeOption);
                }
                return void 0;
            }
        }
    ]);
    return ThemeCache2;
}();
_defineProperty(ThemeCache, "MAX_CACHE_SIZE", 20);
_defineProperty(ThemeCache, "MAX_CACHE_OFFSET", 5);
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/theme/Theme.js
var uuid = 0;
var Theme = /* @__PURE__ */ function() {
    function Theme2(derivatives) {
        _classCallCheck(this, Theme2);
        _defineProperty(this, "derivatives", void 0);
        _defineProperty(this, "id", void 0);
        this.derivatives = Array.isArray(derivatives) ? derivatives : [
            derivatives
        ];
        this.id = uuid;
        if (derivatives.length === 0) {
            warning(derivatives.length > 0, "[Ant Design CSS-in-JS] Theme should have at least one derivative function.");
        }
        uuid += 1;
    }
    _createClass(Theme2, [
        {
            key: "getDerivativeToken",
            value: function getDerivativeToken(token2) {
                return this.derivatives.reduce(function(result, derivative2) {
                    return derivative2(token2, result);
                }, void 0);
            }
        }
    ]);
    return Theme2;
}();
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/theme/createTheme.js
var cacheThemes = new ThemeCache();
function createTheme(derivatives) {
    var derivativeArr = Array.isArray(derivatives) ? derivatives : [
        derivatives
    ];
    if (!cacheThemes.has(derivativeArr)) {
        cacheThemes.set(derivativeArr, new Theme(derivativeArr));
    }
    return cacheThemes.get(derivativeArr);
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/util/index.js
var resultCache = /* @__PURE__ */ new WeakMap();
var RESULT_VALUE = {};
function memoResult(callback, deps) {
    var current = resultCache;
    for(var i = 0; i < deps.length; i += 1){
        var dep = deps[i];
        if (!current.has(dep)) {
            current.set(dep, /* @__PURE__ */ new WeakMap());
        }
        current = current.get(dep);
    }
    if (!current.has(RESULT_VALUE)) {
        current.set(RESULT_VALUE, callback());
    }
    return current.get(RESULT_VALUE);
}
var flattenTokenCache = /* @__PURE__ */ new WeakMap();
function flattenToken(token2) {
    var str = flattenTokenCache.get(token2) || "";
    if (!str) {
        Object.keys(token2).forEach(function(key) {
            var value = token2[key];
            str += key;
            if (_instanceof(value, Theme)) {
                str += value.id;
            } else if (value && _typeof(value) === "object") {
                str += flattenToken(value);
            } else {
                str += value;
            }
        });
        str = hash_esm_default(str);
        flattenTokenCache.set(token2, str);
    }
    return str;
}
function token2key(token2, salt) {
    return hash_esm_default("".concat(salt, "_").concat(flattenToken(token2)));
}
var randomSelectorKey = "random-".concat(Date.now(), "-").concat(Math.random()).replace(/\./g, "");
var isClientSide = canUseDom();
function unit(num) {
    if (typeof num === "number") {
        return "".concat(num, "px");
    }
    return num;
}
function toStyleStr(style2, tokenKey, styleId) {
    var _objectSpread22;
    var customizeAttrs = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var plain = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    if (plain) {
        return style2;
    }
    var attrs = _objectSpread2(_objectSpread2({}, customizeAttrs), {}, (_objectSpread22 = {}, _defineProperty(_objectSpread22, ATTR_TOKEN, tokenKey), _defineProperty(_objectSpread22, ATTR_MARK, styleId), _objectSpread22));
    var attrStr = Object.keys(attrs).map(function(attr) {
        var val = attrs[attr];
        return val ? "".concat(attr, '="').concat(val, '"') : null;
    }).filter(function(v) {
        return v;
    }).join(" ");
    return "<style ".concat(attrStr, ">").concat(style2, "</style>");
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/util/css-variables.js
var token2CSSVar = function token2CSSVar2(token2) {
    var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return "--".concat(prefix ? "".concat(prefix, "-") : "").concat(token2).replace(/([a-z0-9])([A-Z])/g, "$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g, "$1-$2").replace(/([a-z])([A-Z0-9])/g, "$1-$2").toLowerCase();
};
var serializeCSSVar = function serializeCSSVar2(cssVars, hashId, options) {
    if (!Object.keys(cssVars).length) {
        return "";
    }
    return ".".concat(hashId).concat(options !== null && options !== void 0 && options.scope ? ".".concat(options.scope) : "", "{").concat(Object.entries(cssVars).map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
        return "".concat(key, ":").concat(value, ";");
    }).join(""), "}");
};
var transformToken = function transformToken2(token2, themeKey, config) {
    var cssVars = {};
    var result = {};
    Object.entries(token2).forEach(function(_ref3) {
        var _config$preserve, _config$ignore;
        var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], value = _ref4[1];
        if (config !== null && config !== void 0 && (_config$preserve = config.preserve) !== null && _config$preserve !== void 0 && _config$preserve[key]) {
            result[key] = value;
        } else if ((typeof value === "string" || typeof value === "number") && !(config !== null && config !== void 0 && (_config$ignore = config.ignore) !== null && _config$ignore !== void 0 && _config$ignore[key])) {
            var _config$unitless;
            var cssVar = token2CSSVar(key, config === null || config === void 0 ? void 0 : config.prefix);
            cssVars[cssVar] = typeof value === "number" && !(config !== null && config !== void 0 && (_config$unitless = config.unitless) !== null && _config$unitless !== void 0 && _config$unitless[key]) ? "".concat(value, "px") : String(value);
            result[key] = "var(".concat(cssVar, ")");
        }
    });
    return [
        result,
        serializeCSSVar(cssVars, themeKey, {
            scope: config === null || config === void 0 ? void 0 : config.scope
        })
    ];
};
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useGlobalCache.js
var React8 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useLayoutEffect.js
var React5 = __toESM(require("react"));
var useInternalLayoutEffect = process.env.NODE_ENV !== "test" && canUseDom() ? React5.useLayoutEffect : React5.useEffect;
var useLayoutEffect2 = function useLayoutEffect3(callback, deps) {
    var firstMountRef = React5.useRef(true);
    useInternalLayoutEffect(function() {
        return callback(firstMountRef.current);
    }, deps);
    useInternalLayoutEffect(function() {
        firstMountRef.current = false;
        return function() {
            firstMountRef.current = true;
        };
    }, []);
};
var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
    useLayoutEffect2(function(firstMount) {
        if (!firstMount) {
            return callback();
        }
    }, deps);
};
var useLayoutEffect_default = useLayoutEffect2;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js
var React6 = __toESM(require("react"));
var fullClone = _objectSpread2({}, React6);
var useInsertionEffect = fullClone.useInsertionEffect;
var useInsertionEffectPolyfill = function useInsertionEffectPolyfill2(renderEffect, effect, deps) {
    React6.useMemo(renderEffect, deps);
    useLayoutEffect_default(function() {
        return effect(true);
    }, deps);
};
var useCompatibleInsertionEffect = useInsertionEffect ? function useCompatibleInsertionEffect(renderEffect, effect, deps) {
    return useInsertionEffect(function() {
        renderEffect();
        return effect();
    }, deps);
} : useInsertionEffectPolyfill;
var useCompatibleInsertionEffect_default = useCompatibleInsertionEffect;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js
var React7 = __toESM(require("react"));
var fullClone2 = _objectSpread2({}, React7);
var useInsertionEffect2 = fullClone2.useInsertionEffect;
var useCleanupRegister = function useCleanupRegister2(deps) {
    var effectCleanups = [];
    var cleanupFlag = false;
    function register(fn) {
        if (cleanupFlag) {
            if (process.env.NODE_ENV !== "production") {
                warning(false, "[Ant Design CSS-in-JS] You are registering a cleanup function after unmount, which will not have any effect.");
            }
            return;
        }
        effectCleanups.push(fn);
    }
    React7.useEffect(function() {
        cleanupFlag = false;
        return function() {
            cleanupFlag = true;
            if (effectCleanups.length) {
                effectCleanups.forEach(function(fn) {
                    return fn();
                });
            }
        };
    }, deps);
    return register;
};
var useRun = function useRun2() {
    return function(fn) {
        fn();
    };
};
var useEffectCleanupRegister = typeof useInsertionEffect2 !== "undefined" ? useCleanupRegister : useRun;
var useEffectCleanupRegister_default = useEffectCleanupRegister;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useHMR.js
function useProdHMR() {
    return false;
}
var webpackHMR = false;
function useDevHMR() {
    return webpackHMR;
}
var useHMR_default = process.env.NODE_ENV === "production" ? useProdHMR : useDevHMR;
if (process.env.NODE_ENV !== "production" && typeof module !== "undefined" && module && module.hot && typeof window !== "undefined") {
    win = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : null;
    if (win && typeof win.webpackHotUpdate === "function") {
        originWebpackHotUpdate = win.webpackHotUpdate;
        win.webpackHotUpdate = function() {
            webpackHMR = true;
            setTimeout(function() {
                webpackHMR = false;
            }, 0);
            return originWebpackHotUpdate.apply(void 0, arguments);
        };
    }
}
var win;
var originWebpackHotUpdate;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useGlobalCache.js
function useGlobalCache(prefix, keyPath, cacheFn, onCacheRemove, onCacheEffect) {
    var _React$useContext = React8.useContext(StyleContext_default), globalCache = _React$useContext.cache;
    var fullPath = [
        prefix
    ].concat(_toConsumableArray(keyPath));
    var fullPathStr = pathKey(fullPath);
    var register = useEffectCleanupRegister_default([
        fullPathStr
    ]);
    var HMRUpdate = useHMR_default();
    var buildCache = function buildCache2(updater) {
        globalCache.opUpdate(fullPathStr, function(prevCache) {
            var _ref = prevCache || [
                void 0,
                void 0
            ], _ref2 = _slicedToArray(_ref, 2), _ref2$ = _ref2[0], times = _ref2$ === void 0 ? 0 : _ref2$, cache = _ref2[1];
            var tmpCache = cache;
            if (process.env.NODE_ENV !== "production" && cache && HMRUpdate) {
                onCacheRemove === null || onCacheRemove === void 0 || onCacheRemove(tmpCache, HMRUpdate);
                tmpCache = null;
            }
            var mergedCache = tmpCache || cacheFn();
            var data = [
                times,
                mergedCache
            ];
            return updater ? updater(data) : data;
        });
    };
    React8.useMemo(function() {
        buildCache();
    }, /* eslint-disable react-hooks/exhaustive-deps */ [
        fullPathStr
    ]);
    var cacheEntity = globalCache.opGet(fullPathStr);
    if (process.env.NODE_ENV !== "production" && !cacheEntity) {
        buildCache();
        cacheEntity = globalCache.opGet(fullPathStr);
    }
    var cacheContent = cacheEntity[1];
    useCompatibleInsertionEffect_default(function() {
        onCacheEffect === null || onCacheEffect === void 0 || onCacheEffect(cacheContent);
    }, function(polyfill) {
        buildCache(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2), times = _ref4[0], cache = _ref4[1];
            if (polyfill && times === 0) {
                onCacheEffect === null || onCacheEffect === void 0 || onCacheEffect(cacheContent);
            }
            return [
                times + 1,
                cache
            ];
        });
        return function() {
            globalCache.opUpdate(fullPathStr, function(prevCache) {
                var _ref5 = prevCache || [], _ref6 = _slicedToArray(_ref5, 2), _ref6$ = _ref6[0], times = _ref6$ === void 0 ? 0 : _ref6$, cache = _ref6[1];
                var nextCount = times - 1;
                if (nextCount === 0) {
                    register(function() {
                        if (polyfill || !globalCache.opGet(fullPathStr)) {
                            onCacheRemove === null || onCacheRemove === void 0 || onCacheRemove(cache, false);
                        }
                    });
                    return null;
                }
                return [
                    times - 1,
                    cache
                ];
            });
        };
    }, [
        fullPathStr
    ]);
    return cacheContent;
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useCacheToken.js
var EMPTY_OVERRIDE = {};
var hashPrefix = process.env.NODE_ENV !== "production" ? "css-dev-only-do-not-override" : "css";
var tokenKeys = /* @__PURE__ */ new Map();
function recordCleanToken(tokenKey) {
    tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) + 1);
}
function removeStyleTags(key, instanceId) {
    if (typeof document !== "undefined") {
        var styles = document.querySelectorAll("style[".concat(ATTR_TOKEN, '="').concat(key, '"]'));
        styles.forEach(function(style2) {
            if (style2[CSS_IN_JS_INSTANCE] === instanceId) {
                var _style$parentNode;
                (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 || _style$parentNode.removeChild(style2);
            }
        });
    }
}
var TOKEN_THRESHOLD = 0;
function cleanTokenStyle(tokenKey, instanceId) {
    tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) - 1);
    var tokenKeyList = Array.from(tokenKeys.keys());
    var cleanableKeyList = tokenKeyList.filter(function(key) {
        var count = tokenKeys.get(key) || 0;
        return count <= 0;
    });
    if (tokenKeyList.length - cleanableKeyList.length > TOKEN_THRESHOLD) {
        cleanableKeyList.forEach(function(key) {
            removeStyleTags(key, instanceId);
            tokenKeys.delete(key);
        });
    }
}
var getComputedToken = function getComputedToken2(originToken, overrideToken, theme, format) {
    var derivativeToken = theme.getDerivativeToken(originToken);
    var mergedDerivativeToken = _objectSpread2(_objectSpread2({}, derivativeToken), overrideToken);
    if (format) {
        mergedDerivativeToken = format(mergedDerivativeToken);
    }
    return mergedDerivativeToken;
};
var TOKEN_PREFIX = "token";
function useCacheToken(theme, tokens) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var _useContext = (0, import_react4.useContext)(StyleContext_default), instanceId = _useContext.cache.instanceId, container = _useContext.container;
    var _option$salt = option.salt, salt = _option$salt === void 0 ? "" : _option$salt, _option$override = option.override, override = _option$override === void 0 ? EMPTY_OVERRIDE : _option$override, formatToken2 = option.formatToken, compute = option.getComputedToken, cssVar = option.cssVar;
    var mergedToken = memoResult(function() {
        return Object.assign.apply(Object, [
            {}
        ].concat(_toConsumableArray(tokens)));
    }, tokens);
    var tokenStr = flattenToken(mergedToken);
    var overrideTokenStr = flattenToken(override);
    var cssVarStr = cssVar ? flattenToken(cssVar) : "";
    var cachedToken = useGlobalCache(TOKEN_PREFIX, [
        salt,
        theme.id,
        tokenStr,
        overrideTokenStr,
        cssVarStr
    ], function() {
        var _cssVar$key;
        var mergedDerivativeToken = compute ? compute(mergedToken, override, theme) : getComputedToken(mergedToken, override, theme, formatToken2);
        var actualToken = _objectSpread2({}, mergedDerivativeToken);
        var cssVarsStr = "";
        if (!!cssVar) {
            var _transformToken = transformToken(mergedDerivativeToken, cssVar.key, {
                prefix: cssVar.prefix,
                ignore: cssVar.ignore,
                unitless: cssVar.unitless,
                preserve: cssVar.preserve
            });
            var _transformToken2 = _slicedToArray(_transformToken, 2);
            mergedDerivativeToken = _transformToken2[0];
            cssVarsStr = _transformToken2[1];
        }
        var tokenKey = token2key(mergedDerivativeToken, salt);
        mergedDerivativeToken._tokenKey = tokenKey;
        actualToken._tokenKey = token2key(actualToken, salt);
        var themeKey = (_cssVar$key = cssVar === null || cssVar === void 0 ? void 0 : cssVar.key) !== null && _cssVar$key !== void 0 ? _cssVar$key : tokenKey;
        mergedDerivativeToken._themeKey = themeKey;
        recordCleanToken(themeKey);
        var hashId = "".concat(hashPrefix, "-").concat(hash_esm_default(tokenKey));
        mergedDerivativeToken._hashId = hashId;
        return [
            mergedDerivativeToken,
            hashId,
            actualToken,
            cssVarsStr,
            (cssVar === null || cssVar === void 0 ? void 0 : cssVar.key) || ""
        ];
    }, function(cache) {
        cleanTokenStyle(cache[0]._themeKey, instanceId);
    }, function(_ref) {
        var _ref2 = _slicedToArray(_ref, 4), token2 = _ref2[0], cssVarsStr = _ref2[3];
        if (cssVar && cssVarsStr) {
            var style2 = updateCSS(cssVarsStr, hash_esm_default("css-variables-".concat(token2._themeKey)), {
                mark: ATTR_MARK,
                prepend: "queue",
                attachTo: container,
                priority: -999
            });
            style2[CSS_IN_JS_INSTANCE] = instanceId;
            style2.setAttribute(ATTR_TOKEN, token2._themeKey);
        }
    });
    return cachedToken;
}
var extract = function extract2(cache, effectStyles, options) {
    var _cache = _slicedToArray(cache, 5), realToken = _cache[2], styleStr = _cache[3], cssVarKey = _cache[4];
    var _ref3 = options || {}, plain = _ref3.plain;
    if (!styleStr) {
        return null;
    }
    var styleId = realToken._tokenKey;
    var order = -999;
    var sharedAttrs = {
        "data-rc-order": "prependQueue",
        "data-rc-priority": "".concat(order)
    };
    var styleText = toStyleStr(styleStr, cssVarKey, styleId, sharedAttrs, plain);
    return [
        order,
        styleId,
        styleText
    ];
};
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useCSSVarRegister.js
var import_react5 = require("react");
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useStyleRegister.js
var React9 = __toESM(require("react"));
// ../../node_modules/.pnpm/@emotion+unitless@0.7.5/node_modules/@emotion/unitless/dist/unitless.esm.js
var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
var unitless_esm_default = unitlessKeys;
// ../../node_modules/.pnpm/stylis@4.3.6/node_modules/stylis/src/Enum.js
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var NAMESPACE = "@namespace";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
// ../../node_modules/.pnpm/stylis@4.3.6/node_modules/stylis/src/Utility.js
var abs = Math.abs;
var from = String.fromCharCode;
function trim(value) {
    return value.trim();
}
function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
}
function indexof(value, search, position2) {
    return value.indexOf(search, position2);
}
function charat(value, index) {
    return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
    return value.slice(begin, end);
}
function strlen(value) {
    return value.length;
}
function sizeof(value) {
    return value.length;
}
function append(value, array) {
    return array.push(value), value;
}
// ../../node_modules/.pnpm/stylis@4.3.6/node_modules/stylis/src/Tokenizer.js
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length2, siblings) {
    return {
        value: value,
        root: root,
        parent: parent,
        type: type,
        props: props,
        children: children,
        line: line,
        column: column,
        length: length2,
        return: "",
        siblings: siblings
    };
}
function char() {
    return character;
}
function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10) column = 1, line--;
    return character;
}
function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10) column = 1, line++;
    return character;
}
function peek() {
    return charat(characters, position);
}
function caret() {
    return position;
}
function slice(begin, end) {
    return substr(characters, begin, end);
}
function token(type) {
    switch(type){
        // \0 \t \n \r \s whitespace token
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        // ! + , / > @ ~ isolate token
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        // ; { } breakpoint token
        case 59:
        case 123:
        case 125:
            return 4;
        // : accompanied token
        case 58:
            return 3;
        // " ' ( [ opening delimit token
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        // ) ] closing delimit token
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
    return characters = "", value;
}
function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
    while(character = peek())if (character < 33) next();
    else break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
    while(--count && next())if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
    while(next())switch(character){
        // ] ) " '
        case type:
            return position;
        // " '
        case 34:
        case 39:
            if (type !== 34 && type !== 39) delimiter(character);
            break;
        // (
        case 40:
            if (type === 41) delimiter(type);
            break;
        // \
        case 92:
            next();
            break;
    }
    return position;
}
function commenter(type, index) {
    while(next())if (type + character === 47 + 10) break;
    else if (type + character === 42 + 42 && peek() === 47) break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index) {
    while(!token(peek()))next();
    return slice(index, position);
}
// ../../node_modules/.pnpm/stylis@4.3.6/node_modules/stylis/src/Parser.js
function compile(value) {
    return dealloc(parse("", null, null, null, [
        ""
    ], value = alloc(value), 0, [
        0
    ], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while(scanning)switch(previous = character2, character2 = next()){
        // (
        case 40:
            if (previous != 108 && charat(characters2, length2 - 1) == 58) {
                if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f", abs(index ? points[index - 1] : 0)) != -1) ampersand = -1;
                break;
            }
        // " ' [
        case 34:
        case 39:
        case 91:
            characters2 += delimit(character2);
            break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
            characters2 += whitespace(previous);
            break;
        // \
        case 92:
            characters2 += escaping(caret() - 1, 7);
            continue;
        // /
        case 47:
            switch(peek()){
                case 42:
                case 47:
                    append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
                    if ((token(previous || 1) == 5 || token(peek() || 1) == 5) && strlen(characters2) && substr(characters2, -1, void 0) !== " ") characters2 += " ";
                    break;
                default:
                    characters2 += "/";
            }
            break;
        // {
        case 123 * variable:
            points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
            switch(character2){
                // \0 }
                case 0:
                case 125:
                    scanning = 0;
                // ;
                case 59 + offset:
                    if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
                    if (property > 0 && (strlen(characters2) - length2 || variable === 0 && previous === 47)) append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1, declarations) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2, declarations), declarations);
                    break;
                // @ ;
                case 59:
                    characters2 += ";";
                // { rule/at-rule
                default:
                    append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2, rulesets), rulesets);
                    if (character2 === 123) if (offset === 0) parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                    else {
                        switch(atrule){
                            // c(ontainer)
                            case 99:
                                if (charat(characters2, 3) === 110) break;
                            // l(ayer)
                            case 108:
                                if (charat(characters2, 2) === 97) break;
                            default:
                                offset = 0;
                            // d(ocument) m(edia) s(upports)
                            case 100:
                            case 109:
                            case 115:
                        }
                        if (offset) parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2, children), children), rules, children, length2, points, rule ? props : children);
                        else parse(characters2, reference, reference, reference, [
                            ""
                        ], children, 0, points, children);
                    }
            }
            index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
            break;
        // :
        case 58:
            length2 = 1 + strlen(characters2), property = previous;
        default:
            if (variable < 1) {
                if (character2 == 123) --variable;
                else if (character2 == 125 && variable++ == 0 && prev() == 125) continue;
            }
            switch(characters2 += from(character2), character2 * variable){
                // &
                case 38:
                    ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
                    break;
                // ,
                case 44:
                    points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
                    break;
                // @
                case 64:
                    if (peek() === 45) characters2 += delimit(next());
                    atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
                    break;
                // -
                case 45:
                    if (previous === 45 && strlen(characters2) == 2) variable = 0;
            }
    }
    return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2, siblings) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [
        ""
    ];
    var size = sizeof(rule);
    for(var i = 0, j = 0, k = 0; i < index; ++i)for(var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x]))) props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2, siblings);
}
function comment(value, root, parent, siblings) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
}
function declaration(value, root, parent, length2, siblings) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
}
// ../../node_modules/.pnpm/stylis@4.3.6/node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
    var output = "";
    for(var i = 0; i < children.length; i++)output += callback(children[i], i, children, callback) || "";
    return output;
}
function stringify(element, index, children, callback) {
    switch(element.type){
        case LAYER:
            if (element.children.length) break;
        case IMPORT:
        case NAMESPACE:
        case DECLARATION:
            return element.return = element.return || element.value;
        case COMMENT:
            return "";
        case KEYFRAMES:
            return element.return = element.value + "{" + serialize(element.children, callback) + "}";
        case RULESET:
            if (!strlen(element.value = element.props.join(","))) return "";
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/linters/utils.js
function lintWarning(message, info) {
    var path = info.path, parentSelectors = info.parentSelectors;
    warning_default(false, "[Ant Design CSS-in-JS] ".concat(path ? "Error in ".concat(path, ": ") : "").concat(message).concat(parentSelectors.length ? " Selector: ".concat(parentSelectors.join(" | ")) : ""));
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/linters/contentQuotesLinter.js
var linter = function linter2(key, value, info) {
    if (key === "content") {
        var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        var contentValues = [
            "normal",
            "none",
            "initial",
            "inherit",
            "unset"
        ];
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
            lintWarning("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"".concat(value, "\"'`."), info);
        }
    }
};
var contentQuotesLinter_default = linter;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/linters/hashedAnimationLinter.js
var linter3 = function linter4(key, value, info) {
    if (key === "animation") {
        if (info.hashId && value !== "none") {
            lintWarning("You seem to be using hashed animation '".concat(value, "', in which case 'animationName' with Keyframe as value is recommended."), info);
        }
    }
};
var hashedAnimationLinter_default = linter3;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/util/cacheMapUtil.js
var ATTR_CACHE_MAP = "data-ant-cssinjs-cache-path";
var CSS_FILE_STYLE = "_FILE_STYLE__";
var cachePathMap;
var fromCSSFile = true;
function prepare() {
    if (!cachePathMap) {
        cachePathMap = {};
        if (canUseDom()) {
            var div = document.createElement("div");
            div.className = ATTR_CACHE_MAP;
            div.style.position = "fixed";
            div.style.visibility = "hidden";
            div.style.top = "-9999px";
            document.body.appendChild(div);
            var content = getComputedStyle(div).content || "";
            content = content.replace(/^"/, "").replace(/"$/, "");
            content.split(";").forEach(function(item) {
                var _item$split = item.split(":"), _item$split2 = _slicedToArray(_item$split, 2), path = _item$split2[0], hash = _item$split2[1];
                cachePathMap[path] = hash;
            });
            var inlineMapStyle = document.querySelector("style[".concat(ATTR_CACHE_MAP, "]"));
            if (inlineMapStyle) {
                var _inlineMapStyle$paren;
                fromCSSFile = false;
                (_inlineMapStyle$paren = inlineMapStyle.parentNode) === null || _inlineMapStyle$paren === void 0 || _inlineMapStyle$paren.removeChild(inlineMapStyle);
            }
            document.body.removeChild(div);
        }
    }
}
function existPath(path) {
    prepare();
    return !!cachePathMap[path];
}
function getStyleAndHash(path) {
    var hash = cachePathMap[path];
    var styleStr = null;
    if (hash && canUseDom()) {
        if (fromCSSFile) {
            styleStr = CSS_FILE_STYLE;
        } else {
            var _style = document.querySelector("style[".concat(ATTR_MARK, '="').concat(cachePathMap[path], '"]'));
            if (_style) {
                styleStr = _style.innerHTML;
            } else {
                delete cachePathMap[path];
            }
        }
    }
    return [
        styleStr,
        hash
    ];
}
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useStyleRegister.js
var SKIP_CHECK = "_skip_check_";
var MULTI_VALUE = "_multi_value_";
function normalizeStyle(styleStr) {
    var serialized = serialize(compile(styleStr), stringify);
    return serialized.replace(/\{%%%\:[^;];}/g, ";");
}
function isCompoundCSSProperty(value) {
    return _typeof(value) === "object" && value && (SKIP_CHECK in value || MULTI_VALUE in value);
}
function injectSelectorHash(key, hashId, hashPriority) {
    if (!hashId) {
        return key;
    }
    var hashClassName = ".".concat(hashId);
    var hashSelector = hashPriority === "low" ? ":where(".concat(hashClassName, ")") : hashClassName;
    var keys2 = key.split(",").map(function(k) {
        var _firstPath$match;
        var fullPath = k.trim().split(/\s+/);
        var firstPath = fullPath[0] || "";
        var htmlElement = ((_firstPath$match = firstPath.match(/^\w+/)) === null || _firstPath$match === void 0 ? void 0 : _firstPath$match[0]) || "";
        firstPath = "".concat(htmlElement).concat(hashSelector).concat(firstPath.slice(htmlElement.length));
        return [
            firstPath
        ].concat(_toConsumableArray(fullPath.slice(1))).join(" ");
    });
    return keys2.join(",");
}
var parseStyle = function parseStyle2(interpolation) {
    var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        root: true,
        parentSelectors: []
    }, root = _ref.root, injectHash = _ref.injectHash, parentSelectors = _ref.parentSelectors;
    var hashId = config.hashId, layer = config.layer, path = config.path, hashPriority = config.hashPriority, _config$transformers = config.transformers, transformers = _config$transformers === void 0 ? [] : _config$transformers, _config$linters = config.linters, linters = _config$linters === void 0 ? [] : _config$linters;
    var styleStr = "";
    var effectStyle = {};
    function parseKeyframes(keyframes) {
        var animationName = keyframes.getName(hashId);
        if (!effectStyle[animationName]) {
            var _parseStyle = parseStyle2(keyframes.style, config, {
                root: false,
                parentSelectors: parentSelectors
            }), _parseStyle2 = _slicedToArray(_parseStyle, 1), _parsedStr = _parseStyle2[0];
            effectStyle[animationName] = "@keyframes ".concat(keyframes.getName(hashId)).concat(_parsedStr);
        }
    }
    function flattenList(list) {
        var fullList = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        list.forEach(function(item) {
            if (Array.isArray(item)) {
                flattenList(item, fullList);
            } else if (item) {
                fullList.push(item);
            }
        });
        return fullList;
    }
    var flattenStyleList = flattenList(Array.isArray(interpolation) ? interpolation : [
        interpolation
    ]);
    flattenStyleList.forEach(function(originStyle) {
        var style2 = typeof originStyle === "string" && !root ? {} : originStyle;
        if (typeof style2 === "string") {
            styleStr += "".concat(style2, "\n");
        } else if (style2._keyframe) {
            parseKeyframes(style2);
        } else {
            var mergedStyle = transformers.reduce(function(prev2, trans) {
                var _trans$visit;
                return (trans === null || trans === void 0 || (_trans$visit = trans.visit) === null || _trans$visit === void 0 ? void 0 : _trans$visit.call(trans, prev2)) || prev2;
            }, style2);
            Object.keys(mergedStyle).forEach(function(key) {
                var value = mergedStyle[key];
                if (_typeof(value) === "object" && value && (key !== "animationName" || !value._keyframe) && !isCompoundCSSProperty(value)) {
                    var subInjectHash = false;
                    var mergedKey = key.trim();
                    var nextRoot = false;
                    if ((root || injectHash) && hashId) {
                        if (mergedKey.startsWith("@")) {
                            subInjectHash = true;
                        } else if (mergedKey === "&") {
                            mergedKey = injectSelectorHash("", hashId, hashPriority);
                        } else {
                            mergedKey = injectSelectorHash(key, hashId, hashPriority);
                        }
                    } else if (root && !hashId && (mergedKey === "&" || mergedKey === "")) {
                        mergedKey = "";
                        nextRoot = true;
                    }
                    var _parseStyle3 = parseStyle2(value, config, {
                        root: nextRoot,
                        injectHash: subInjectHash,
                        parentSelectors: [].concat(_toConsumableArray(parentSelectors), [
                            mergedKey
                        ])
                    }), _parseStyle4 = _slicedToArray(_parseStyle3, 2), _parsedStr2 = _parseStyle4[0], childEffectStyle = _parseStyle4[1];
                    effectStyle = _objectSpread2(_objectSpread2({}, effectStyle), childEffectStyle);
                    styleStr += "".concat(mergedKey).concat(_parsedStr2);
                } else {
                    var appendStyle2 = function appendStyle2(cssKey, cssValue) {
                        if (process.env.NODE_ENV !== "production" && (_typeof(value) !== "object" || !(value !== null && value !== void 0 && value[SKIP_CHECK]))) {
                            [
                                contentQuotesLinter_default,
                                hashedAnimationLinter_default
                            ].concat(_toConsumableArray(linters)).forEach(function(linter5) {
                                return linter5(cssKey, cssValue, {
                                    path: path,
                                    hashId: hashId,
                                    parentSelectors: parentSelectors
                                });
                            });
                        }
                        var styleName = cssKey.replace(/[A-Z]/g, function(match) {
                            return "-".concat(match.toLowerCase());
                        });
                        var formatValue = cssValue;
                        if (!unitless_esm_default[cssKey] && typeof formatValue === "number" && formatValue !== 0) {
                            formatValue = "".concat(formatValue, "px");
                        }
                        if (cssKey === "animationName" && cssValue !== null && cssValue !== void 0 && cssValue._keyframe) {
                            parseKeyframes(cssValue);
                            formatValue = cssValue.getName(hashId);
                        }
                        styleStr += "".concat(styleName, ":").concat(formatValue, ";");
                    };
                    var appendStyle = appendStyle2;
                    var _value;
                    var actualValue = (_value = value === null || value === void 0 ? void 0 : value.value) !== null && _value !== void 0 ? _value : value;
                    if (_typeof(value) === "object" && value !== null && value !== void 0 && value[MULTI_VALUE] && Array.isArray(actualValue)) {
                        actualValue.forEach(function(item) {
                            appendStyle2(key, item);
                        });
                    } else {
                        appendStyle2(key, actualValue);
                    }
                }
            });
        }
    });
    if (!root) {
        styleStr = "{".concat(styleStr, "}");
    } else if (layer) {
        if (styleStr) {
            styleStr = "@layer ".concat(layer.name, " {").concat(styleStr, "}");
        }
        if (layer.dependencies) {
            effectStyle["@layer ".concat(layer.name)] = layer.dependencies.map(function(deps) {
                return "@layer ".concat(deps, ", ").concat(layer.name, ";");
            }).join("\n");
        }
    }
    return [
        styleStr,
        effectStyle
    ];
};
function uniqueHash(path, styleStr) {
    return hash_esm_default("".concat(path.join("%")).concat(styleStr));
}
function Empty() {
    return null;
}
var STYLE_PREFIX = "style";
function useStyleRegister(info, styleFn) {
    var token2 = info.token, path = info.path, hashId = info.hashId, layer = info.layer, nonce = info.nonce, clientOnly = info.clientOnly, _info$order = info.order, order = _info$order === void 0 ? 0 : _info$order;
    var _React$useContext = React9.useContext(StyleContext_default), autoClear = _React$useContext.autoClear, mock = _React$useContext.mock, defaultCache = _React$useContext.defaultCache, hashPriority = _React$useContext.hashPriority, container = _React$useContext.container, ssrInline = _React$useContext.ssrInline, transformers = _React$useContext.transformers, linters = _React$useContext.linters, cache = _React$useContext.cache, enableLayer = _React$useContext.layer;
    var tokenKey = token2._tokenKey;
    var fullPath = [
        tokenKey
    ];
    if (enableLayer) {
        fullPath.push("layer");
    }
    fullPath.push.apply(fullPath, _toConsumableArray(path));
    var isMergedClientSide = isClientSide;
    if (process.env.NODE_ENV !== "production" && mock !== void 0) {
        isMergedClientSide = mock === "client";
    }
    var _useGlobalCache = useGlobalCache(STYLE_PREFIX, fullPath, // Create cache if needed
    function() {
        var cachePath = fullPath.join("|");
        if (existPath(cachePath)) {
            var _getStyleAndHash = getStyleAndHash(cachePath), _getStyleAndHash2 = _slicedToArray(_getStyleAndHash, 2), inlineCacheStyleStr = _getStyleAndHash2[0], styleHash = _getStyleAndHash2[1];
            if (inlineCacheStyleStr) {
                return [
                    inlineCacheStyleStr,
                    tokenKey,
                    styleHash,
                    {},
                    clientOnly,
                    order
                ];
            }
        }
        var styleObj = styleFn();
        var _parseStyle5 = parseStyle(styleObj, {
            hashId: hashId,
            hashPriority: hashPriority,
            layer: enableLayer ? layer : void 0,
            path: path.join("-"),
            transformers: transformers,
            linters: linters
        }), _parseStyle6 = _slicedToArray(_parseStyle5, 2), parsedStyle = _parseStyle6[0], effectStyle = _parseStyle6[1];
        var styleStr = normalizeStyle(parsedStyle);
        var styleId = uniqueHash(fullPath, styleStr);
        return [
            styleStr,
            tokenKey,
            styleId,
            effectStyle,
            clientOnly,
            order
        ];
    }, // Remove cache if no need
    function(_ref2, fromHMR) {
        var _ref3 = _slicedToArray(_ref2, 3), styleId = _ref3[2];
        if ((fromHMR || autoClear) && isClientSide) {
            removeCSS(styleId, {
                mark: ATTR_MARK
            });
        }
    }, // Effect: Inject style here
    function(_ref4) {
        var _ref5 = _slicedToArray(_ref4, 4), styleStr = _ref5[0], _ = _ref5[1], styleId = _ref5[2], effectStyle = _ref5[3];
        if (isMergedClientSide && styleStr !== CSS_FILE_STYLE) {
            var mergedCSSConfig = {
                mark: ATTR_MARK,
                prepend: enableLayer ? false : "queue",
                attachTo: container,
                priority: order
            };
            var nonceStr = typeof nonce === "function" ? nonce() : nonce;
            if (nonceStr) {
                mergedCSSConfig.csp = {
                    nonce: nonceStr
                };
            }
            var effectLayerKeys = [];
            var effectRestKeys = [];
            Object.keys(effectStyle).forEach(function(key) {
                if (key.startsWith("@layer")) {
                    effectLayerKeys.push(key);
                } else {
                    effectRestKeys.push(key);
                }
            });
            effectLayerKeys.forEach(function(effectKey) {
                updateCSS(normalizeStyle(effectStyle[effectKey]), "_layer-".concat(effectKey), _objectSpread2(_objectSpread2({}, mergedCSSConfig), {}, {
                    prepend: true
                }));
            });
            var style2 = updateCSS(styleStr, styleId, mergedCSSConfig);
            style2[CSS_IN_JS_INSTANCE] = cache.instanceId;
            style2.setAttribute(ATTR_TOKEN, tokenKey);
            if (process.env.NODE_ENV !== "production") {
                style2.setAttribute(ATTR_CACHE_PATH, fullPath.join("|"));
            }
            effectRestKeys.forEach(function(effectKey) {
                updateCSS(normalizeStyle(effectStyle[effectKey]), "_effect-".concat(effectKey), mergedCSSConfig);
            });
        }
    }), _useGlobalCache2 = _slicedToArray(_useGlobalCache, 3), cachedStyleStr = _useGlobalCache2[0], cachedTokenKey = _useGlobalCache2[1], cachedStyleId = _useGlobalCache2[2];
    return function(node2) {
        var styleNode;
        if (!ssrInline || isMergedClientSide || !defaultCache) {
            styleNode = /* @__PURE__ */ React9.createElement(Empty, null);
        } else {
            var _ref6;
            styleNode = /* @__PURE__ */ React9.createElement("style", _extends({}, (_ref6 = {}, _defineProperty(_ref6, ATTR_TOKEN, cachedTokenKey), _defineProperty(_ref6, ATTR_MARK, cachedStyleId), _ref6), {
                dangerouslySetInnerHTML: {
                    __html: cachedStyleStr
                }
            }));
        }
        return /* @__PURE__ */ React9.createElement(React9.Fragment, null, styleNode, node2);
    };
}
var extract3 = function extract4(cache, effectStyles, options) {
    var _cache = _slicedToArray(cache, 6), styleStr = _cache[0], tokenKey = _cache[1], styleId = _cache[2], effectStyle = _cache[3], clientOnly = _cache[4], order = _cache[5];
    var _ref7 = options || {}, plain = _ref7.plain;
    if (clientOnly) {
        return null;
    }
    var keyStyleText = styleStr;
    var sharedAttrs = {
        "data-rc-order": "prependQueue",
        "data-rc-priority": "".concat(order)
    };
    keyStyleText = toStyleStr(styleStr, tokenKey, styleId, sharedAttrs, plain);
    if (effectStyle) {
        Object.keys(effectStyle).forEach(function(effectKey) {
            if (!effectStyles[effectKey]) {
                effectStyles[effectKey] = true;
                var effectStyleStr = normalizeStyle(effectStyle[effectKey]);
                var effectStyleHTML = toStyleStr(effectStyleStr, tokenKey, "_effect-".concat(effectKey), sharedAttrs, plain);
                if (effectKey.startsWith("@layer")) {
                    keyStyleText = effectStyleHTML + keyStyleText;
                } else {
                    keyStyleText += effectStyleHTML;
                }
            }
        });
    }
    return [
        order,
        styleId,
        keyStyleText
    ];
};
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/hooks/useCSSVarRegister.js
var CSS_VAR_PREFIX = "cssVar";
var useCSSVarRegister = function useCSSVarRegister2(config, fn) {
    var key = config.key, prefix = config.prefix, unitless2 = config.unitless, ignore2 = config.ignore, token2 = config.token, _config$scope = config.scope, scope = _config$scope === void 0 ? "" : _config$scope;
    var _useContext = (0, import_react5.useContext)(StyleContext_default), instanceId = _useContext.cache.instanceId, container = _useContext.container;
    var tokenKey = token2._tokenKey;
    var stylePath = [].concat(_toConsumableArray(config.path), [
        key,
        scope,
        tokenKey
    ]);
    var cache = useGlobalCache(CSS_VAR_PREFIX, stylePath, function() {
        var originToken = fn();
        var _transformToken = transformToken(originToken, key, {
            prefix: prefix,
            unitless: unitless2,
            ignore: ignore2,
            scope: scope
        }), _transformToken2 = _slicedToArray(_transformToken, 2), mergedToken = _transformToken2[0], cssVarsStr = _transformToken2[1];
        var styleId = uniqueHash(stylePath, cssVarsStr);
        return [
            mergedToken,
            cssVarsStr,
            styleId,
            key
        ];
    }, function(_ref) {
        var _ref2 = _slicedToArray(_ref, 3), styleId = _ref2[2];
        if (isClientSide) {
            removeCSS(styleId, {
                mark: ATTR_MARK
            });
        }
    }, function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 3), cssVarsStr = _ref4[1], styleId = _ref4[2];
        if (!cssVarsStr) {
            return;
        }
        var style2 = updateCSS(cssVarsStr, styleId, {
            mark: ATTR_MARK,
            prepend: "queue",
            attachTo: container,
            priority: -999
        });
        style2[CSS_IN_JS_INSTANCE] = instanceId;
        style2.setAttribute(ATTR_TOKEN, key);
    });
    return cache;
};
var extract5 = function extract6(cache, effectStyles, options) {
    var _cache = _slicedToArray(cache, 4), styleStr = _cache[1], styleId = _cache[2], cssVarKey = _cache[3];
    var _ref5 = options || {}, plain = _ref5.plain;
    if (!styleStr) {
        return null;
    }
    var order = -999;
    var sharedAttrs = {
        "data-rc-order": "prependQueue",
        "data-rc-priority": "".concat(order)
    };
    var styleText = toStyleStr(styleStr, cssVarKey, styleId, sharedAttrs, plain);
    return [
        order,
        styleId,
        styleText
    ];
};
var useCSSVarRegister_default = useCSSVarRegister;
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/extractStyle.js
var _ExtractStyleFns;
var ExtractStyleFns = (_ExtractStyleFns = {}, _defineProperty(_ExtractStyleFns, STYLE_PREFIX, extract3), _defineProperty(_ExtractStyleFns, TOKEN_PREFIX, extract), _defineProperty(_ExtractStyleFns, CSS_VAR_PREFIX, extract5), _ExtractStyleFns);
// ../../node_modules/.pnpm/@ant-design+cssinjs@1.23.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js
function noSplit(list) {
    list.notSplit = true;
    return list;
}
var keyMap = {
    // Inset
    inset: [
        "top",
        "right",
        "bottom",
        "left"
    ],
    insetBlock: [
        "top",
        "bottom"
    ],
    insetBlockStart: [
        "top"
    ],
    insetBlockEnd: [
        "bottom"
    ],
    insetInline: [
        "left",
        "right"
    ],
    insetInlineStart: [
        "left"
    ],
    insetInlineEnd: [
        "right"
    ],
    // Margin
    marginBlock: [
        "marginTop",
        "marginBottom"
    ],
    marginBlockStart: [
        "marginTop"
    ],
    marginBlockEnd: [
        "marginBottom"
    ],
    marginInline: [
        "marginLeft",
        "marginRight"
    ],
    marginInlineStart: [
        "marginLeft"
    ],
    marginInlineEnd: [
        "marginRight"
    ],
    // Padding
    paddingBlock: [
        "paddingTop",
        "paddingBottom"
    ],
    paddingBlockStart: [
        "paddingTop"
    ],
    paddingBlockEnd: [
        "paddingBottom"
    ],
    paddingInline: [
        "paddingLeft",
        "paddingRight"
    ],
    paddingInlineStart: [
        "paddingLeft"
    ],
    paddingInlineEnd: [
        "paddingRight"
    ],
    // Border
    borderBlock: noSplit([
        "borderTop",
        "borderBottom"
    ]),
    borderBlockStart: noSplit([
        "borderTop"
    ]),
    borderBlockEnd: noSplit([
        "borderBottom"
    ]),
    borderInline: noSplit([
        "borderLeft",
        "borderRight"
    ]),
    borderInlineStart: noSplit([
        "borderLeft"
    ]),
    borderInlineEnd: noSplit([
        "borderRight"
    ]),
    // Border width
    borderBlockWidth: [
        "borderTopWidth",
        "borderBottomWidth"
    ],
    borderBlockStartWidth: [
        "borderTopWidth"
    ],
    borderBlockEndWidth: [
        "borderBottomWidth"
    ],
    borderInlineWidth: [
        "borderLeftWidth",
        "borderRightWidth"
    ],
    borderInlineStartWidth: [
        "borderLeftWidth"
    ],
    borderInlineEndWidth: [
        "borderRightWidth"
    ],
    // Border style
    borderBlockStyle: [
        "borderTopStyle",
        "borderBottomStyle"
    ],
    borderBlockStartStyle: [
        "borderTopStyle"
    ],
    borderBlockEndStyle: [
        "borderBottomStyle"
    ],
    borderInlineStyle: [
        "borderLeftStyle",
        "borderRightStyle"
    ],
    borderInlineStartStyle: [
        "borderLeftStyle"
    ],
    borderInlineEndStyle: [
        "borderRightStyle"
    ],
    // Border color
    borderBlockColor: [
        "borderTopColor",
        "borderBottomColor"
    ],
    borderBlockStartColor: [
        "borderTopColor"
    ],
    borderBlockEndColor: [
        "borderBottomColor"
    ],
    borderInlineColor: [
        "borderLeftColor",
        "borderRightColor"
    ],
    borderInlineStartColor: [
        "borderLeftColor"
    ],
    borderInlineEndColor: [
        "borderRightColor"
    ],
    // Border radius
    borderStartStartRadius: [
        "borderTopLeftRadius"
    ],
    borderStartEndRadius: [
        "borderTopRightRadius"
    ],
    borderEndStartRadius: [
        "borderBottomLeftRadius"
    ],
    borderEndEndRadius: [
        "borderBottomRightRadius"
    ]
};
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/Context.js
var import_react6 = require("react");
var IconContext = /* @__PURE__ */ (0, import_react6.createContext)({});
var Context_default = IconContext;
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(r) {
    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/utils/get.js
function get(entity, path) {
    var current = entity;
    for(var i = 0; i < path.length; i += 1){
        if (current === null || current === void 0) {
            return void 0;
        }
        current = current[path[i]];
    }
    return current;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/utils/set.js
function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) {
        return value;
    }
    var _paths = _toArray(paths), path = _paths[0], restPath = _paths.slice(1);
    var clone;
    if (!entity && typeof path === "number") {
        clone = [];
    } else if (Array.isArray(entity)) {
        clone = _toConsumableArray(entity);
    } else {
        clone = _objectSpread2({}, entity);
    }
    if (removeIfUndefined && value === void 0 && restPath.length === 1) {
        delete clone[path][restPath[0]];
    } else {
        clone[path] = internalSet(clone[path], restPath, value, removeIfUndefined);
    }
    return clone;
}
function set(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (paths.length && removeIfUndefined && value === void 0 && !get(entity, paths.slice(0, -1))) {
        return entity;
    }
    return internalSet(entity, paths, value, removeIfUndefined);
}
function isObject(obj) {
    return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
function createEmpty(source) {
    return Array.isArray(source) ? [] : {};
}
var keys = typeof Reflect === "undefined" ? Object.keys : Reflect.ownKeys;
function merge() {
    for(var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++){
        sources[_key] = arguments[_key];
    }
    var clone = createEmpty(sources[0]);
    sources.forEach(function(src) {
        function internalMerge(path, parentLoopSet) {
            var loopSet = new Set(parentLoopSet);
            var value = get(src, path);
            var isArr = Array.isArray(value);
            if (isArr || isObject(value)) {
                if (!loopSet.has(value)) {
                    loopSet.add(value);
                    var originValue = get(clone, path);
                    if (isArr) {
                        clone = set(clone, path, []);
                    } else if (!originValue || _typeof(originValue) !== "object") {
                        clone = set(clone, path, createEmpty(value));
                    }
                    keys(value).forEach(function(key) {
                        internalMerge([].concat(_toConsumableArray(path), [
                            key
                        ]), loopSet);
                    });
                }
            } else {
                clone = set(clone, path, value);
            }
        }
        internalMerge([]);
    });
    return clone;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/warning.js
var React10 = __toESM(require("react"));
function noop() {}
var deprecatedWarnList = null;
function resetWarned2() {
    deprecatedWarnList = null;
    resetWarned();
}
var warning2 = noop;
if (process.env.NODE_ENV !== "production") {
    warning2 = function(valid, component, message) {
        warning_default(valid, "[antd: ".concat(component, "] ").concat(message));
        if (process.env.NODE_ENV === "test") {
            resetWarned2();
        }
    };
}
var WarningContext = /* @__PURE__ */ React10.createContext({});
var devUseWarning = process.env.NODE_ENV !== "production" ? function(component) {
    var strict = React10.useContext(WarningContext).strict;
    var typeWarning = function(valid, type, message) {
        if (!valid) {
            if (strict === false && type === "deprecated") {
                var existWarning = deprecatedWarnList;
                if (!deprecatedWarnList) {
                    deprecatedWarnList = {};
                }
                deprecatedWarnList[component] = deprecatedWarnList[component] || [];
                if (!deprecatedWarnList[component].includes(message || "")) {
                    deprecatedWarnList[component].push(message || "");
                }
                if (!existWarning) {
                    console.warn("[antd] There exists deprecated usage in your code:", deprecatedWarnList);
                }
            } else {
                process.env.NODE_ENV !== "production" ? warning2(valid, component, message) : void 0;
            }
        }
    };
    typeWarning.deprecated = function(valid, oldProp, newProp, message) {
        typeWarning(valid, "deprecated", "`".concat(oldProp, "` is deprecated. Please use `").concat(newProp, "` instead.").concat(message ? " ".concat(message) : ""));
    };
    return typeWarning;
} : function() {
    var noopWarning = function() {};
    noopWarning.deprecated = noop;
    return noopWarning;
};
var warning_default2 = warning2;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/form/validateMessagesContext.js
var import_react7 = require("react");
var validateMessagesContext_default = /* @__PURE__ */ (0, import_react7.createContext)(void 0);
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/locale/index.js
var React11 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-pagination@5.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-pagination/es/locale/en_US.js
var locale = {
    // Options
    items_per_page: "/ page",
    jump_to: "Go to",
    jump_to_confirm: "confirm",
    page: "Page",
    // Pagination
    prev_page: "Previous Page",
    next_page: "Next Page",
    prev_5: "Previous 5 Pages",
    next_5: "Next 5 Pages",
    prev_3: "Previous 3 Pages",
    next_3: "Next 3 Pages",
    page_size: "Page Size"
};
var en_US_default = locale;
// ../../node_modules/.pnpm/rc-picker@4.11.3_date-fns@2.30.0_dayjs@1.11.13_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-picker/es/locale/common.js
var commonLocale = {
    yearFormat: "YYYY",
    dayFormat: "D",
    cellMeridiemFormat: "A",
    monthBeforeYear: true
};
// ../../node_modules/.pnpm/rc-picker@4.11.3_date-fns@2.30.0_dayjs@1.11.13_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-picker/es/locale/en_US.js
var locale2 = _objectSpread2(_objectSpread2({}, commonLocale), {}, {
    locale: "en_US",
    today: "Today",
    now: "Now",
    backToToday: "Back to today",
    ok: "OK",
    clear: "Clear",
    week: "Week",
    month: "Month",
    year: "Year",
    timeSelect: "select time",
    dateSelect: "select date",
    weekSelect: "Choose a week",
    monthSelect: "Choose a month",
    yearSelect: "Choose a year",
    decadeSelect: "Choose a decade",
    dateFormat: "M/D/YYYY",
    dateTimeFormat: "M/D/YYYY HH:mm:ss",
    previousMonth: "Previous month (PageUp)",
    nextMonth: "Next month (PageDown)",
    previousYear: "Last year (Control + left)",
    nextYear: "Next year (Control + right)",
    previousDecade: "Last decade",
    nextDecade: "Next decade",
    previousCentury: "Last century",
    nextCentury: "Next century"
});
var en_US_default2 = locale2;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/time-picker/locale/en_US.js
var locale3 = {
    placeholder: "Select time",
    rangePlaceholder: [
        "Start time",
        "End time"
    ]
};
var en_US_default3 = locale3;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/date-picker/locale/en_US.js
var locale4 = {
    lang: Object.assign({
        placeholder: "Select date",
        yearPlaceholder: "Select year",
        quarterPlaceholder: "Select quarter",
        monthPlaceholder: "Select month",
        weekPlaceholder: "Select week",
        rangePlaceholder: [
            "Start date",
            "End date"
        ],
        rangeYearPlaceholder: [
            "Start year",
            "End year"
        ],
        rangeQuarterPlaceholder: [
            "Start quarter",
            "End quarter"
        ],
        rangeMonthPlaceholder: [
            "Start month",
            "End month"
        ],
        rangeWeekPlaceholder: [
            "Start week",
            "End week"
        ]
    }, en_US_default2),
    timePickerLocale: Object.assign({}, en_US_default3)
};
var en_US_default4 = locale4;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/calendar/locale/en_US.js
var en_US_default5 = en_US_default4;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/locale/en_US.js
var typeTemplate = "${label} is not a valid ${type}";
var localeValues = {
    locale: "en",
    Pagination: en_US_default,
    DatePicker: en_US_default4,
    TimePicker: en_US_default3,
    Calendar: en_US_default5,
    global: {
        placeholder: "Please select"
    },
    Table: {
        filterTitle: "Filter menu",
        filterConfirm: "OK",
        filterReset: "Reset",
        filterEmptyText: "No filters",
        filterCheckAll: "Select all items",
        filterSearchPlaceholder: "Search in filters",
        emptyText: "No data",
        selectAll: "Select current page",
        selectInvert: "Invert current page",
        selectNone: "Clear all data",
        selectionAll: "Select all data",
        sortTitle: "Sort",
        expand: "Expand row",
        collapse: "Collapse row",
        triggerDesc: "Click to sort descending",
        triggerAsc: "Click to sort ascending",
        cancelSort: "Click to cancel sorting"
    },
    Tour: {
        Next: "Next",
        Previous: "Previous",
        Finish: "Finish"
    },
    Modal: {
        okText: "OK",
        cancelText: "Cancel",
        justOkText: "OK"
    },
    Popconfirm: {
        okText: "OK",
        cancelText: "Cancel"
    },
    Transfer: {
        titles: [
            "",
            ""
        ],
        searchPlaceholder: "Search here",
        itemUnit: "item",
        itemsUnit: "items",
        remove: "Remove",
        selectCurrent: "Select current page",
        removeCurrent: "Remove current page",
        selectAll: "Select all data",
        deselectAll: "Deselect all data",
        removeAll: "Remove all data",
        selectInvert: "Invert current page"
    },
    Upload: {
        uploading: "Uploading...",
        removeFile: "Remove file",
        uploadError: "Upload error",
        previewFile: "Preview file",
        downloadFile: "Download file"
    },
    Empty: {
        description: "No data"
    },
    Icon: {
        icon: "icon"
    },
    Text: {
        edit: "Edit",
        copy: "Copy",
        copied: "Copied",
        expand: "Expand",
        collapse: "Collapse"
    },
    Form: {
        optional: "(optional)",
        defaultValidateMessages: {
            default: "Field validation error for ${label}",
            required: "Please enter ${label}",
            enum: "${label} must be one of [${enum}]",
            whitespace: "${label} cannot be a blank character",
            date: {
                format: "${label} date format is invalid",
                parse: "${label} cannot be converted to a date",
                invalid: "${label} is an invalid date"
            },
            types: {
                string: typeTemplate,
                method: typeTemplate,
                array: typeTemplate,
                object: typeTemplate,
                number: typeTemplate,
                date: typeTemplate,
                boolean: typeTemplate,
                integer: typeTemplate,
                float: typeTemplate,
                regexp: typeTemplate,
                email: typeTemplate,
                url: typeTemplate,
                hex: typeTemplate
            },
            string: {
                len: "${label} must be ${len} characters",
                min: "${label} must be at least ${min} characters",
                max: "${label} must be up to ${max} characters",
                range: "${label} must be between ${min}-${max} characters"
            },
            number: {
                len: "${label} must be equal to ${len}",
                min: "${label} must be minimum ${min}",
                max: "${label} must be maximum ${max}",
                range: "${label} must be between ${min}-${max}"
            },
            array: {
                len: "Must be ${len} ${label}",
                min: "At least ${min} ${label}",
                max: "At most ${max} ${label}",
                range: "The amount of ${label} must be between ${min}-${max}"
            },
            pattern: {
                mismatch: "${label} does not match the pattern ${pattern}"
            }
        }
    },
    Image: {
        preview: "Preview"
    },
    QRCode: {
        expired: "QR code expired",
        refresh: "Refresh",
        scanned: "Scanned"
    },
    ColorPicker: {
        presetEmpty: "Empty",
        transparent: "Transparent",
        singleColor: "Single",
        gradientColor: "Gradient"
    }
};
var en_US_default6 = localeValues;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/modal/locale.js
var runtimeLocale = Object.assign({}, en_US_default6.Modal);
var localeList = [];
var generateLocale = function() {
    return localeList.reduce(function(merged, locale5) {
        return Object.assign(Object.assign({}, merged), locale5);
    }, en_US_default6.Modal);
};
function changeConfirmLocale(newLocale) {
    if (newLocale) {
        var cloneLocale = Object.assign({}, newLocale);
        localeList.push(cloneLocale);
        runtimeLocale = generateLocale();
        return function() {
            localeList = localeList.filter(function(locale5) {
                return locale5 !== cloneLocale;
            });
            runtimeLocale = generateLocale();
        };
    }
    runtimeLocale = Object.assign({}, en_US_default6.Modal);
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/locale/context.js
var import_react8 = require("react");
var LocaleContext = /* @__PURE__ */ (0, import_react8.createContext)(void 0);
var context_default = LocaleContext;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/locale/index.js
var ANT_MARK = "internalMark";
var LocaleProvider = function(props) {
    var tmp = props.locale, locale5 = tmp === void 0 ? {} : tmp, children = props.children, _ANT_MARK__ = props._ANT_MARK__;
    if (process.env.NODE_ENV !== "production") {
        var warning4 = devUseWarning("LocaleProvider");
        process.env.NODE_ENV !== "production" ? warning4(_ANT_MARK__ === ANT_MARK, "deprecated", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale") : void 0;
    }
    React11.useEffect(function() {
        var clearLocale = changeConfirmLocale(locale5 === null || locale5 === void 0 ? void 0 : locale5.Modal);
        return clearLocale;
    }, [
        locale5
    ]);
    var getMemoizedContextValue = React11.useMemo(function() {
        return Object.assign(Object.assign({}, locale5), {
            exist: true
        });
    }, [
        locale5
    ]);
    return /* @__PURE__ */ React11.createElement(context_default.Provider, {
        value: getMemoizedContextValue
    }, children);
};
if (process.env.NODE_ENV !== "production") {
    LocaleProvider.displayName = "LocaleProvider";
}
var locale_default = LocaleProvider;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/context.js
var import_react9 = __toESM(require("react"));
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/seed.js
var defaultPresetColors = {
    blue: "#1677FF",
    purple: "#722ED1",
    cyan: "#13C2C2",
    green: "#52C41A",
    magenta: "#EB2F96",
    /**
   * @deprecated Use magenta instead
   */ pink: "#EB2F96",
    red: "#F5222D",
    orange: "#FA8C16",
    yellow: "#FADB14",
    volcano: "#FA541C",
    geekblue: "#2F54EB",
    gold: "#FAAD14",
    lime: "#A0D911"
};
var seedToken = Object.assign(Object.assign({}, defaultPresetColors), {
    // Color
    colorPrimary: "#1677ff",
    colorSuccess: "#52c41a",
    colorWarning: "#faad14",
    colorError: "#ff4d4f",
    colorInfo: "#1677ff",
    colorLink: "",
    colorTextBase: "",
    colorBgBase: "",
    // Font
    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",
    fontFamilyCode: "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",
    fontSize: 14,
    // Line
    lineWidth: 1,
    lineType: "solid",
    // Motion
    motionUnit: 0.1,
    motionBase: 0,
    motionEaseOutCirc: "cubic-bezier(0.08, 0.82, 0.17, 1)",
    motionEaseInOutCirc: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
    motionEaseOut: "cubic-bezier(0.215, 0.61, 0.355, 1)",
    motionEaseInOut: "cubic-bezier(0.645, 0.045, 0.355, 1)",
    motionEaseOutBack: "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
    motionEaseInBack: "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
    motionEaseInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
    motionEaseOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
    // Radius
    borderRadius: 6,
    // Size
    sizeUnit: 4,
    sizeStep: 4,
    sizePopupArrow: 16,
    // Control Base
    controlHeight: 32,
    // zIndex
    zIndexBase: 0,
    zIndexPopupBase: 1e3,
    // Image
    opacityImage: 1,
    // Wireframe
    wireframe: false,
    // Motion
    motion: true
});
var seed_default = seedToken;
// ../../node_modules/.pnpm/@ant-design+fast-color@2.0.6/node_modules/@ant-design/fast-color/es/FastColor.js
var round = Math.round;
function splitColorStr(str, parseNum) {
    var match = str.replace(/^[^(]*\((.*)/, "$1").replace(/\).*/, "").match(/\d*\.?\d+%?/g) || [];
    var numList = match.map(function(item) {
        return parseFloat(item);
    });
    for(var i = 0; i < 3; i += 1){
        numList[i] = parseNum(numList[i] || 0, match[i] || "", i);
    }
    if (match[3]) {
        numList[3] = match[3].includes("%") ? numList[3] / 100 : numList[3];
    } else {
        numList[3] = 1;
    }
    return numList;
}
var parseHSVorHSL = function(num, _, index) {
    return index === 0 ? num : num / 100;
};
function limitRange(value, max) {
    var mergedMax = max || 255;
    if (value > mergedMax) {
        return mergedMax;
    }
    if (value < 0) {
        return 0;
    }
    return value;
}
var FastColor = /*#__PURE__*/ function() {
    function _FastColor(input) {
        _class_call_check(this, _FastColor);
        var matchFormat = function matchFormat(str) {
            return str[0] in input && str[1] in input && str[2] in input;
        };
        _defineProperty(this, "isValid", true);
        _defineProperty(this, "r", 0);
        _defineProperty(this, "g", 0);
        _defineProperty(this, "b", 0);
        _defineProperty(this, "a", 1);
        _defineProperty(this, "_h", void 0);
        _defineProperty(this, "_s", void 0);
        _defineProperty(this, "_l", void 0);
        _defineProperty(this, "_v", void 0);
        _defineProperty(this, "_max", void 0);
        _defineProperty(this, "_min", void 0);
        _defineProperty(this, "_brightness", void 0);
        if (!input) {} else if (typeof input === "string") {
            var matchPrefix2 = function matchPrefix2(prefix) {
                return trimStr.startsWith(prefix);
            };
            var matchPrefix = matchPrefix2;
            var trimStr = input.trim();
            if (/^#?[A-F\d]{3,8}$/i.test(trimStr)) {
                this.fromHexString(trimStr);
            } else if (matchPrefix2("rgb")) {
                this.fromRgbString(trimStr);
            } else if (matchPrefix2("hsl")) {
                this.fromHslString(trimStr);
            } else if (matchPrefix2("hsv") || matchPrefix2("hsb")) {
                this.fromHsvString(trimStr);
            }
        } else if (_instanceof(input, _FastColor)) {
            this.r = input.r;
            this.g = input.g;
            this.b = input.b;
            this.a = input.a;
            this._h = input._h;
            this._s = input._s;
            this._l = input._l;
            this._v = input._v;
        } else if (matchFormat("rgb")) {
            this.r = limitRange(input.r);
            this.g = limitRange(input.g);
            this.b = limitRange(input.b);
            this.a = typeof input.a === "number" ? limitRange(input.a, 1) : 1;
        } else if (matchFormat("hsl")) {
            this.fromHsl(input);
        } else if (matchFormat("hsv")) {
            this.fromHsv(input);
        } else {
            throw new Error("@ant-design/fast-color: unsupported input " + JSON.stringify(input));
        }
    }
    _create_class(_FastColor, [
        {
            // ======================= Setter =======================
            key: "setR",
            value: function setR(value) {
                return this._sc("r", value);
            }
        },
        {
            key: "setG",
            value: function setG(value) {
                return this._sc("g", value);
            }
        },
        {
            key: "setB",
            value: function setB(value) {
                return this._sc("b", value);
            }
        },
        {
            key: "setA",
            value: function setA(value) {
                return this._sc("a", value, 1);
            }
        },
        {
            key: "setHue",
            value: function setHue(value) {
                var hsv = this.toHsv();
                hsv.h = value;
                return this._c(hsv);
            }
        },
        {
            // ======================= Getter =======================
            /**
   * Returns the perceived luminance of a color, from 0-1.
   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
   */ key: "getLuminance",
            value: function getLuminance() {
                function adjustGamma(raw) {
                    var val = raw / 255;
                    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
                }
                var R = adjustGamma(this.r);
                var G = adjustGamma(this.g);
                var B = adjustGamma(this.b);
                return 0.2126 * R + 0.7152 * G + 0.0722 * B;
            }
        },
        {
            key: "getHue",
            value: function getHue() {
                if (typeof this._h === "undefined") {
                    var delta = this.getMax() - this.getMin();
                    if (delta === 0) {
                        this._h = 0;
                    } else {
                        this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));
                    }
                }
                return this._h;
            }
        },
        {
            key: "getSaturation",
            value: function getSaturation() {
                if (typeof this._s === "undefined") {
                    var delta = this.getMax() - this.getMin();
                    if (delta === 0) {
                        this._s = 0;
                    } else {
                        this._s = delta / this.getMax();
                    }
                }
                return this._s;
            }
        },
        {
            key: "getLightness",
            value: function getLightness() {
                if (typeof this._l === "undefined") {
                    this._l = (this.getMax() + this.getMin()) / 510;
                }
                return this._l;
            }
        },
        {
            key: "getValue",
            value: function getValue() {
                if (typeof this._v === "undefined") {
                    this._v = this.getMax() / 255;
                }
                return this._v;
            }
        },
        {
            /**
   * Returns the perceived brightness of the color, from 0-255.
   * Note: this is not the b of HSB
   * @see http://www.w3.org/TR/AERT#color-contrast
   */ key: "getBrightness",
            value: function getBrightness() {
                if (typeof this._brightness === "undefined") {
                    this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1e3;
                }
                return this._brightness;
            }
        },
        {
            // ======================== Func ========================
            key: "darken",
            value: function darken() {
                var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
                var h = this.getHue();
                var s = this.getSaturation();
                var l = this.getLightness() - amount / 100;
                if (l < 0) {
                    l = 0;
                }
                return this._c({
                    h: h,
                    s: s,
                    l: l,
                    a: this.a
                });
            }
        },
        {
            key: "lighten",
            value: function lighten() {
                var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
                var h = this.getHue();
                var s = this.getSaturation();
                var l = this.getLightness() + amount / 100;
                if (l > 1) {
                    l = 1;
                }
                return this._c({
                    h: h,
                    s: s,
                    l: l,
                    a: this.a
                });
            }
        },
        {
            /**
   * Mix the current color a given amount with another color, from 0 to 100.
   * 0 means no mixing (return current color).
   */ key: "mix",
            value: function mix(input) {
                var _this = this;
                var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;
                var color = this._c(input);
                var p = amount / 100;
                var calc = function(key) {
                    return (color[key] - _this[key]) * p + _this[key];
                };
                var rgba = {
                    r: round(calc("r")),
                    g: round(calc("g")),
                    b: round(calc("b")),
                    a: round(calc("a") * 100) / 100
                };
                return this._c(rgba);
            }
        },
        {
            /**
   * Mix the color with pure white, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return white.
   */ key: "tint",
            value: function tint() {
                var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
                return this.mix({
                    r: 255,
                    g: 255,
                    b: 255,
                    a: 1
                }, amount);
            }
        },
        {
            /**
   * Mix the color with pure black, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return black.
   */ key: "shade",
            value: function shade() {
                var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
                return this.mix({
                    r: 0,
                    g: 0,
                    b: 0,
                    a: 1
                }, amount);
            }
        },
        {
            key: "onBackground",
            value: function onBackground(background) {
                var _this = this;
                var bg = this._c(background);
                var alpha = this.a + bg.a * (1 - this.a);
                var calc = function(key) {
                    return round((_this[key] * _this.a + bg[key] * bg.a * (1 - _this.a)) / alpha);
                };
                return this._c({
                    r: calc("r"),
                    g: calc("g"),
                    b: calc("b"),
                    a: alpha
                });
            }
        },
        {
            // ======================= Status =======================
            key: "isDark",
            value: function isDark() {
                return this.getBrightness() < 128;
            }
        },
        {
            key: "isLight",
            value: function isLight() {
                return this.getBrightness() >= 128;
            }
        },
        {
            // ======================== MISC ========================
            key: "equals",
            value: function equals(other) {
                return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return this._c(this);
            }
        },
        {
            // ======================= Format =======================
            key: "toHexString",
            value: function toHexString() {
                var hex = "#";
                var rHex = (this.r || 0).toString(16);
                hex += rHex.length === 2 ? rHex : "0" + rHex;
                var gHex = (this.g || 0).toString(16);
                hex += gHex.length === 2 ? gHex : "0" + gHex;
                var bHex = (this.b || 0).toString(16);
                hex += bHex.length === 2 ? bHex : "0" + bHex;
                if (typeof this.a === "number" && this.a >= 0 && this.a < 1) {
                    var aHex = round(this.a * 255).toString(16);
                    hex += aHex.length === 2 ? aHex : "0" + aHex;
                }
                return hex;
            }
        },
        {
            /** CSS support color pattern */ key: "toHsl",
            value: function toHsl() {
                return {
                    h: this.getHue(),
                    s: this.getSaturation(),
                    l: this.getLightness(),
                    a: this.a
                };
            }
        },
        {
            /** CSS support color pattern */ key: "toHslString",
            value: function toHslString() {
                var h = this.getHue();
                var s = round(this.getSaturation() * 100);
                var l = round(this.getLightness() * 100);
                return this.a !== 1 ? "hsla(".concat(h, ",").concat(s, "%,").concat(l, "%,").concat(this.a, ")") : "hsl(".concat(h, ",").concat(s, "%,").concat(l, "%)");
            }
        },
        {
            /** Same as toHsb */ key: "toHsv",
            value: function toHsv() {
                return {
                    h: this.getHue(),
                    s: this.getSaturation(),
                    v: this.getValue(),
                    a: this.a
                };
            }
        },
        {
            key: "toRgb",
            value: function toRgb() {
                return {
                    r: this.r,
                    g: this.g,
                    b: this.b,
                    a: this.a
                };
            }
        },
        {
            key: "toRgbString",
            value: function toRgbString() {
                return this.a !== 1 ? "rgba(".concat(this.r, ",").concat(this.g, ",").concat(this.b, ",").concat(this.a, ")") : "rgb(".concat(this.r, ",").concat(this.g, ",").concat(this.b, ")");
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.toRgbString();
            }
        },
        {
            // ====================== Privates ======================
            /** Return a new FastColor object with one channel changed */ key: "_sc",
            value: function _sc(rgb, value, max) {
                var clone = this.clone();
                clone[rgb] = limitRange(value, max);
                return clone;
            }
        },
        {
            key: "_c",
            value: function _c(input) {
                return new this.constructor(input);
            }
        },
        {
            key: "getMax",
            value: function getMax() {
                if (typeof this._max === "undefined") {
                    this._max = Math.max(this.r, this.g, this.b);
                }
                return this._max;
            }
        },
        {
            key: "getMin",
            value: function getMin() {
                if (typeof this._min === "undefined") {
                    this._min = Math.min(this.r, this.g, this.b);
                }
                return this._min;
            }
        },
        {
            key: "fromHexString",
            value: function fromHexString(trimStr) {
                var withoutPrefix = trimStr.replace("#", "");
                function connectNum(index1, index2) {
                    return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);
                }
                if (withoutPrefix.length < 6) {
                    this.r = connectNum(0);
                    this.g = connectNum(1);
                    this.b = connectNum(2);
                    this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;
                } else {
                    this.r = connectNum(0, 1);
                    this.g = connectNum(2, 3);
                    this.b = connectNum(4, 5);
                    this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;
                }
            }
        },
        {
            key: "fromHsl",
            value: function fromHsl(param) {
                var h = param.h, s = param.s, l = param.l, a = param.a;
                this._h = h % 360;
                this._s = s;
                this._l = l;
                this.a = typeof a === "number" ? a : 1;
                if (s <= 0) {
                    var rgb = round(l * 255);
                    this.r = rgb;
                    this.g = rgb;
                    this.b = rgb;
                }
                var r = 0, g = 0, b = 0;
                var huePrime = h / 60;
                var chroma = (1 - Math.abs(2 * l - 1)) * s;
                var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
                if (huePrime >= 0 && huePrime < 1) {
                    r = chroma;
                    g = secondComponent;
                } else if (huePrime >= 1 && huePrime < 2) {
                    r = secondComponent;
                    g = chroma;
                } else if (huePrime >= 2 && huePrime < 3) {
                    g = chroma;
                    b = secondComponent;
                } else if (huePrime >= 3 && huePrime < 4) {
                    g = secondComponent;
                    b = chroma;
                } else if (huePrime >= 4 && huePrime < 5) {
                    r = secondComponent;
                    b = chroma;
                } else if (huePrime >= 5 && huePrime < 6) {
                    r = chroma;
                    b = secondComponent;
                }
                var lightnessModification = l - chroma / 2;
                this.r = round((r + lightnessModification) * 255);
                this.g = round((g + lightnessModification) * 255);
                this.b = round((b + lightnessModification) * 255);
            }
        },
        {
            key: "fromHsv",
            value: function fromHsv(param) {
                var h = param.h, s = param.s, v = param.v, a = param.a;
                this._h = h % 360;
                this._s = s;
                this._v = v;
                this.a = typeof a === "number" ? a : 1;
                var vv = round(v * 255);
                this.r = vv;
                this.g = vv;
                this.b = vv;
                if (s <= 0) {
                    return;
                }
                var hh = h / 60;
                var i = Math.floor(hh);
                var ff = hh - i;
                var p = round(v * (1 - s) * 255);
                var q = round(v * (1 - s * ff) * 255);
                var t = round(v * (1 - s * (1 - ff)) * 255);
                switch(i){
                    case 0:
                        this.g = t;
                        this.b = p;
                        break;
                    case 1:
                        this.r = q;
                        this.b = p;
                        break;
                    case 2:
                        this.r = p;
                        this.b = t;
                        break;
                    case 3:
                        this.r = p;
                        this.g = q;
                        break;
                    case 4:
                        this.r = t;
                        this.g = p;
                        break;
                    case 5:
                    default:
                        this.g = p;
                        this.b = q;
                        break;
                }
            }
        },
        {
            key: "fromHsvString",
            value: function fromHsvString(trimStr) {
                var cells = splitColorStr(trimStr, parseHSVorHSL);
                this.fromHsv({
                    h: cells[0],
                    s: cells[1],
                    v: cells[2],
                    a: cells[3]
                });
            }
        },
        {
            key: "fromHslString",
            value: function fromHslString(trimStr) {
                var cells = splitColorStr(trimStr, parseHSVorHSL);
                this.fromHsl({
                    h: cells[0],
                    s: cells[1],
                    l: cells[2],
                    a: cells[3]
                });
            }
        },
        {
            key: "fromRgbString",
            value: function fromRgbString(trimStr) {
                var cells = splitColorStr(trimStr, function(num, txt) {
                    return(// Convert percentage to number. e.g. 50% -> 128
                    txt.includes("%") ? round(num / 100 * 255) : num);
                });
                this.r = cells[0];
                this.g = cells[1];
                this.b = cells[2];
                this.a = cells[3];
            }
        }
    ]);
    return _FastColor;
}();
// ../../node_modules/.pnpm/@ant-design+colors@7.2.0/node_modules/@ant-design/colors/es/generate.js
var hueStep = 2;
var saturationStep = 0.16;
var saturationStep2 = 0.05;
var brightnessStep1 = 0.05;
var brightnessStep2 = 0.15;
var lightColorCount = 5;
var darkColorCount = 4;
var darkColorMap = [
    {
        index: 7,
        amount: 15
    },
    {
        index: 6,
        amount: 25
    },
    {
        index: 5,
        amount: 30
    },
    {
        index: 5,
        amount: 45
    },
    {
        index: 5,
        amount: 65
    },
    {
        index: 5,
        amount: 85
    },
    {
        index: 4,
        amount: 90
    },
    {
        index: 3,
        amount: 95
    },
    {
        index: 2,
        amount: 97
    },
    {
        index: 1,
        amount: 98
    }
];
function getHue(hsv, i, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
        hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    } else {
        hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    }
    if (hue < 0) {
        hue += 360;
    } else if (hue >= 360) {
        hue -= 360;
    }
    return hue;
}
function getSaturation(hsv, i, light) {
    if (hsv.h === 0 && hsv.s === 0) {
        return hsv.s;
    }
    var saturation;
    if (light) {
        saturation = hsv.s - saturationStep * i;
    } else if (i === darkColorCount) {
        saturation = hsv.s + saturationStep;
    } else {
        saturation = hsv.s + saturationStep2 * i;
    }
    if (saturation > 1) {
        saturation = 1;
    }
    if (light && i === lightColorCount && saturation > 0.1) {
        saturation = 0.1;
    }
    if (saturation < 0.06) {
        saturation = 0.06;
    }
    return Math.round(saturation * 100) / 100;
}
function getValue(hsv, i, light) {
    var value;
    if (light) {
        value = hsv.v + brightnessStep1 * i;
    } else {
        value = hsv.v - brightnessStep2 * i;
    }
    value = Math.max(0, Math.min(1, value));
    return Math.round(value * 100) / 100;
}
function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = new FastColor(color);
    var hsv = pColor.toHsv();
    for(var i = lightColorCount; i > 0; i -= 1){
        var c = new FastColor({
            h: getHue(hsv, i, true),
            s: getSaturation(hsv, i, true),
            v: getValue(hsv, i, true)
        });
        patterns.push(c);
    }
    patterns.push(pColor);
    for(var _i = 1; _i <= darkColorCount; _i += 1){
        var _c = new FastColor({
            h: getHue(hsv, _i),
            s: getSaturation(hsv, _i),
            v: getValue(hsv, _i)
        });
        patterns.push(_c);
    }
    if (opts.theme === "dark") {
        return darkColorMap.map(function(_ref) {
            var index = _ref.index, amount = _ref.amount;
            return new FastColor(opts.backgroundColor || "#141414").mix(patterns[index], amount).toHexString();
        });
    }
    return patterns.map(function(c2) {
        return c2.toHexString();
    });
}
// ../../node_modules/.pnpm/@ant-design+colors@7.2.0/node_modules/@ant-design/colors/es/presets.js
var presetPrimaryColors = {
    "red": "#F5222D",
    "volcano": "#FA541C",
    "orange": "#FA8C16",
    "gold": "#FAAD14",
    "yellow": "#FADB14",
    "lime": "#A0D911",
    "green": "#52C41A",
    "cyan": "#13C2C2",
    "blue": "#1677FF",
    "geekblue": "#2F54EB",
    "purple": "#722ED1",
    "magenta": "#EB2F96",
    "grey": "#666666"
};
var red = [
    "#fff1f0",
    "#ffccc7",
    "#ffa39e",
    "#ff7875",
    "#ff4d4f",
    "#f5222d",
    "#cf1322",
    "#a8071a",
    "#820014",
    "#5c0011"
];
red.primary = red[5];
var volcano = [
    "#fff2e8",
    "#ffd8bf",
    "#ffbb96",
    "#ff9c6e",
    "#ff7a45",
    "#fa541c",
    "#d4380d",
    "#ad2102",
    "#871400",
    "#610b00"
];
volcano.primary = volcano[5];
var orange = [
    "#fff7e6",
    "#ffe7ba",
    "#ffd591",
    "#ffc069",
    "#ffa940",
    "#fa8c16",
    "#d46b08",
    "#ad4e00",
    "#873800",
    "#612500"
];
orange.primary = orange[5];
var gold = [
    "#fffbe6",
    "#fff1b8",
    "#ffe58f",
    "#ffd666",
    "#ffc53d",
    "#faad14",
    "#d48806",
    "#ad6800",
    "#874d00",
    "#613400"
];
gold.primary = gold[5];
var yellow = [
    "#feffe6",
    "#ffffb8",
    "#fffb8f",
    "#fff566",
    "#ffec3d",
    "#fadb14",
    "#d4b106",
    "#ad8b00",
    "#876800",
    "#614700"
];
yellow.primary = yellow[5];
var lime = [
    "#fcffe6",
    "#f4ffb8",
    "#eaff8f",
    "#d3f261",
    "#bae637",
    "#a0d911",
    "#7cb305",
    "#5b8c00",
    "#3f6600",
    "#254000"
];
lime.primary = lime[5];
var green = [
    "#f6ffed",
    "#d9f7be",
    "#b7eb8f",
    "#95de64",
    "#73d13d",
    "#52c41a",
    "#389e0d",
    "#237804",
    "#135200",
    "#092b00"
];
green.primary = green[5];
var cyan = [
    "#e6fffb",
    "#b5f5ec",
    "#87e8de",
    "#5cdbd3",
    "#36cfc9",
    "#13c2c2",
    "#08979c",
    "#006d75",
    "#00474f",
    "#002329"
];
cyan.primary = cyan[5];
var blue = [
    "#e6f4ff",
    "#bae0ff",
    "#91caff",
    "#69b1ff",
    "#4096ff",
    "#1677ff",
    "#0958d9",
    "#003eb3",
    "#002c8c",
    "#001d66"
];
blue.primary = blue[5];
var geekblue = [
    "#f0f5ff",
    "#d6e4ff",
    "#adc6ff",
    "#85a5ff",
    "#597ef7",
    "#2f54eb",
    "#1d39c4",
    "#10239e",
    "#061178",
    "#030852"
];
geekblue.primary = geekblue[5];
var purple = [
    "#f9f0ff",
    "#efdbff",
    "#d3adf7",
    "#b37feb",
    "#9254de",
    "#722ed1",
    "#531dab",
    "#391085",
    "#22075e",
    "#120338"
];
purple.primary = purple[5];
var magenta = [
    "#fff0f6",
    "#ffd6e7",
    "#ffadd2",
    "#ff85c0",
    "#f759ab",
    "#eb2f96",
    "#c41d7f",
    "#9e1068",
    "#780650",
    "#520339"
];
magenta.primary = magenta[5];
var grey = [
    "#a6a6a6",
    "#999999",
    "#8c8c8c",
    "#808080",
    "#737373",
    "#666666",
    "#404040",
    "#1a1a1a",
    "#000000",
    "#000000"
];
grey.primary = grey[5];
var presetPalettes = {
    red: red,
    volcano: volcano,
    orange: orange,
    gold: gold,
    yellow: yellow,
    lime: lime,
    green: green,
    cyan: cyan,
    blue: blue,
    geekblue: geekblue,
    purple: purple,
    magenta: magenta,
    grey: grey
};
var redDark = [
    "#2a1215",
    "#431418",
    "#58181c",
    "#791a1f",
    "#a61d24",
    "#d32029",
    "#e84749",
    "#f37370",
    "#f89f9a",
    "#fac8c3"
];
redDark.primary = redDark[5];
var volcanoDark = [
    "#2b1611",
    "#441d12",
    "#592716",
    "#7c3118",
    "#aa3e19",
    "#d84a1b",
    "#e87040",
    "#f3956a",
    "#f8b692",
    "#fad4bc"
];
volcanoDark.primary = volcanoDark[5];
var orangeDark = [
    "#2b1d11",
    "#442a11",
    "#593815",
    "#7c4a15",
    "#aa6215",
    "#d87a16",
    "#e89a3c",
    "#f3b765",
    "#f8cf8d",
    "#fae3b7"
];
orangeDark.primary = orangeDark[5];
var goldDark = [
    "#2b2111",
    "#443111",
    "#594214",
    "#7c5914",
    "#aa7714",
    "#d89614",
    "#e8b339",
    "#f3cc62",
    "#f8df8b",
    "#faedb5"
];
goldDark.primary = goldDark[5];
var yellowDark = [
    "#2b2611",
    "#443b11",
    "#595014",
    "#7c6e14",
    "#aa9514",
    "#d8bd14",
    "#e8d639",
    "#f3ea62",
    "#f8f48b",
    "#fafab5"
];
yellowDark.primary = yellowDark[5];
var limeDark = [
    "#1f2611",
    "#2e3c10",
    "#3e4f13",
    "#536d13",
    "#6f9412",
    "#8bbb11",
    "#a9d134",
    "#c9e75d",
    "#e4f88b",
    "#f0fab5"
];
limeDark.primary = limeDark[5];
var greenDark = [
    "#162312",
    "#1d3712",
    "#274916",
    "#306317",
    "#3c8618",
    "#49aa19",
    "#6abe39",
    "#8fd460",
    "#b2e58b",
    "#d5f2bb"
];
greenDark.primary = greenDark[5];
var cyanDark = [
    "#112123",
    "#113536",
    "#144848",
    "#146262",
    "#138585",
    "#13a8a8",
    "#33bcb7",
    "#58d1c9",
    "#84e2d8",
    "#b2f1e8"
];
cyanDark.primary = cyanDark[5];
var blueDark = [
    "#111a2c",
    "#112545",
    "#15325b",
    "#15417e",
    "#1554ad",
    "#1668dc",
    "#3c89e8",
    "#65a9f3",
    "#8dc5f8",
    "#b7dcfa"
];
blueDark.primary = blueDark[5];
var geekblueDark = [
    "#131629",
    "#161d40",
    "#1c2755",
    "#203175",
    "#263ea0",
    "#2b4acb",
    "#5273e0",
    "#7f9ef3",
    "#a8c1f8",
    "#d2e0fa"
];
geekblueDark.primary = geekblueDark[5];
var purpleDark = [
    "#1a1325",
    "#24163a",
    "#301c4d",
    "#3e2069",
    "#51258f",
    "#642ab5",
    "#854eca",
    "#ab7ae0",
    "#cda8f0",
    "#ebd7fa"
];
purpleDark.primary = purpleDark[5];
var magentaDark = [
    "#291321",
    "#40162f",
    "#551c3b",
    "#75204f",
    "#a02669",
    "#cb2b83",
    "#e0529c",
    "#f37fb7",
    "#f8a8cc",
    "#fad2e3"
];
magentaDark.primary = magentaDark[5];
var greyDark = [
    "#151515",
    "#1f1f1f",
    "#2d2d2d",
    "#393939",
    "#494949",
    "#5a5a5a",
    "#6a6a6a",
    "#7b7b7b",
    "#888888",
    "#969696"
];
greyDark.primary = greyDark[5];
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genColorMapToken.js
function genColorMapToken(seed, _ref) {
    var generateColorPalettes2 = _ref.generateColorPalettes, generateNeutralColorPalettes2 = _ref.generateNeutralColorPalettes;
    var colorSuccessBase = seed.colorSuccess, colorWarningBase = seed.colorWarning, colorErrorBase = seed.colorError, colorInfoBase = seed.colorInfo, colorPrimaryBase = seed.colorPrimary, colorBgBase = seed.colorBgBase, colorTextBase = seed.colorTextBase;
    var primaryColors = generateColorPalettes2(colorPrimaryBase);
    var successColors = generateColorPalettes2(colorSuccessBase);
    var warningColors = generateColorPalettes2(colorWarningBase);
    var errorColors = generateColorPalettes2(colorErrorBase);
    var infoColors = generateColorPalettes2(colorInfoBase);
    var neutralColors = generateNeutralColorPalettes2(colorBgBase, colorTextBase);
    var colorLink = seed.colorLink || seed.colorInfo;
    var linkColors = generateColorPalettes2(colorLink);
    var colorErrorBgFilledHover = new FastColor(errorColors[1]).mix(new FastColor(errorColors[3]), 50).toHexString();
    return Object.assign(Object.assign({}, neutralColors), {
        colorPrimaryBg: primaryColors[1],
        colorPrimaryBgHover: primaryColors[2],
        colorPrimaryBorder: primaryColors[3],
        colorPrimaryBorderHover: primaryColors[4],
        colorPrimaryHover: primaryColors[5],
        colorPrimary: primaryColors[6],
        colorPrimaryActive: primaryColors[7],
        colorPrimaryTextHover: primaryColors[8],
        colorPrimaryText: primaryColors[9],
        colorPrimaryTextActive: primaryColors[10],
        colorSuccessBg: successColors[1],
        colorSuccessBgHover: successColors[2],
        colorSuccessBorder: successColors[3],
        colorSuccessBorderHover: successColors[4],
        colorSuccessHover: successColors[4],
        colorSuccess: successColors[6],
        colorSuccessActive: successColors[7],
        colorSuccessTextHover: successColors[8],
        colorSuccessText: successColors[9],
        colorSuccessTextActive: successColors[10],
        colorErrorBg: errorColors[1],
        colorErrorBgHover: errorColors[2],
        colorErrorBgFilledHover: colorErrorBgFilledHover,
        colorErrorBgActive: errorColors[3],
        colorErrorBorder: errorColors[3],
        colorErrorBorderHover: errorColors[4],
        colorErrorHover: errorColors[5],
        colorError: errorColors[6],
        colorErrorActive: errorColors[7],
        colorErrorTextHover: errorColors[8],
        colorErrorText: errorColors[9],
        colorErrorTextActive: errorColors[10],
        colorWarningBg: warningColors[1],
        colorWarningBgHover: warningColors[2],
        colorWarningBorder: warningColors[3],
        colorWarningBorderHover: warningColors[4],
        colorWarningHover: warningColors[4],
        colorWarning: warningColors[6],
        colorWarningActive: warningColors[7],
        colorWarningTextHover: warningColors[8],
        colorWarningText: warningColors[9],
        colorWarningTextActive: warningColors[10],
        colorInfoBg: infoColors[1],
        colorInfoBgHover: infoColors[2],
        colorInfoBorder: infoColors[3],
        colorInfoBorderHover: infoColors[4],
        colorInfoHover: infoColors[4],
        colorInfo: infoColors[6],
        colorInfoActive: infoColors[7],
        colorInfoTextHover: infoColors[8],
        colorInfoText: infoColors[9],
        colorInfoTextActive: infoColors[10],
        colorLinkHover: linkColors[4],
        colorLink: linkColors[6],
        colorLinkActive: linkColors[7],
        colorBgMask: new FastColor("#000").setA(0.45).toRgbString(),
        colorWhite: "#fff"
    });
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genRadius.js
var genRadius = function(radiusBase) {
    var radiusLG = radiusBase;
    var radiusSM = radiusBase;
    var radiusXS = radiusBase;
    var radiusOuter = radiusBase;
    if (radiusBase < 6 && radiusBase >= 5) {
        radiusLG = radiusBase + 1;
    } else if (radiusBase < 16 && radiusBase >= 6) {
        radiusLG = radiusBase + 2;
    } else if (radiusBase >= 16) {
        radiusLG = 16;
    }
    if (radiusBase < 7 && radiusBase >= 5) {
        radiusSM = 4;
    } else if (radiusBase < 8 && radiusBase >= 7) {
        radiusSM = 5;
    } else if (radiusBase < 14 && radiusBase >= 8) {
        radiusSM = 6;
    } else if (radiusBase < 16 && radiusBase >= 14) {
        radiusSM = 7;
    } else if (radiusBase >= 16) {
        radiusSM = 8;
    }
    if (radiusBase < 6 && radiusBase >= 2) {
        radiusXS = 1;
    } else if (radiusBase >= 6) {
        radiusXS = 2;
    }
    if (radiusBase > 4 && radiusBase < 8) {
        radiusOuter = 4;
    } else if (radiusBase >= 8) {
        radiusOuter = 6;
    }
    return {
        borderRadius: radiusBase,
        borderRadiusXS: radiusXS,
        borderRadiusSM: radiusSM,
        borderRadiusLG: radiusLG,
        borderRadiusOuter: radiusOuter
    };
};
var genRadius_default = genRadius;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genCommonMapToken.js
function genCommonMapToken(token2) {
    var motionUnit = token2.motionUnit, motionBase = token2.motionBase, borderRadius = token2.borderRadius, lineWidth = token2.lineWidth;
    return Object.assign({
        // motion
        motionDurationFast: "".concat((motionBase + motionUnit).toFixed(1), "s"),
        motionDurationMid: "".concat((motionBase + motionUnit * 2).toFixed(1), "s"),
        motionDurationSlow: "".concat((motionBase + motionUnit * 3).toFixed(1), "s"),
        // line
        lineWidthBold: lineWidth + 1
    }, genRadius_default(borderRadius));
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genControlHeight.js
var genControlHeight = function(token2) {
    var controlHeight = token2.controlHeight;
    return {
        controlHeightSM: controlHeight * 0.75,
        controlHeightXS: controlHeight * 0.5,
        controlHeightLG: controlHeight * 1.25
    };
};
var genControlHeight_default = genControlHeight;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genFontSizes.js
function getLineHeight(fontSize) {
    return (fontSize + 8) / fontSize;
}
function getFontSizes(base) {
    var fontSizes = Array.from({
        length: 10
    }).map(function(_, index) {
        var i = index - 1;
        var baseSize = base * Math.pow(Math.E, i / 5);
        var intSize = index > 1 ? Math.floor(baseSize) : Math.ceil(baseSize);
        return Math.floor(intSize / 2) * 2;
    });
    fontSizes[1] = base;
    return fontSizes.map(function(size) {
        return {
            size: size,
            lineHeight: getLineHeight(size)
        };
    });
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genFontMapToken.js
var genFontMapToken = function(fontSize) {
    var fontSizePairs = getFontSizes(fontSize);
    var fontSizes = fontSizePairs.map(function(pair) {
        return pair.size;
    });
    var lineHeights = fontSizePairs.map(function(pair) {
        return pair.lineHeight;
    });
    var fontSizeMD = fontSizes[1];
    var fontSizeSM = fontSizes[0];
    var fontSizeLG = fontSizes[2];
    var lineHeight = lineHeights[1];
    var lineHeightSM = lineHeights[0];
    var lineHeightLG = lineHeights[2];
    return {
        fontSizeSM: fontSizeSM,
        fontSize: fontSizeMD,
        fontSizeLG: fontSizeLG,
        fontSizeXL: fontSizes[3],
        fontSizeHeading1: fontSizes[6],
        fontSizeHeading2: fontSizes[5],
        fontSizeHeading3: fontSizes[4],
        fontSizeHeading4: fontSizes[3],
        fontSizeHeading5: fontSizes[2],
        lineHeight: lineHeight,
        lineHeightLG: lineHeightLG,
        lineHeightSM: lineHeightSM,
        fontHeight: Math.round(lineHeight * fontSizeMD),
        fontHeightLG: Math.round(lineHeightLG * fontSizeLG),
        fontHeightSM: Math.round(lineHeightSM * fontSizeSM),
        lineHeightHeading1: lineHeights[6],
        lineHeightHeading2: lineHeights[5],
        lineHeightHeading3: lineHeights[4],
        lineHeightHeading4: lineHeights[3],
        lineHeightHeading5: lineHeights[2]
    };
};
var genFontMapToken_default = genFontMapToken;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/shared/genSizeMapToken.js
function genSizeMapToken(token2) {
    var sizeUnit = token2.sizeUnit, sizeStep = token2.sizeStep;
    return {
        sizeXXL: sizeUnit * (sizeStep + 8),
        // 48
        sizeXL: sizeUnit * (sizeStep + 4),
        // 32
        sizeLG: sizeUnit * (sizeStep + 2),
        // 24
        sizeMD: sizeUnit * (sizeStep + 1),
        // 20
        sizeMS: sizeUnit * sizeStep,
        // 16
        size: sizeUnit * sizeStep,
        // 16
        sizeSM: sizeUnit * (sizeStep - 1),
        // 12
        sizeXS: sizeUnit * (sizeStep - 2),
        // 8
        sizeXXS: sizeUnit * (sizeStep - 3)
    };
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/default/colorAlgorithm.js
var getAlphaColor = function(baseColor, alpha) {
    return new FastColor(baseColor).setA(alpha).toRgbString();
};
var getSolidColor = function(baseColor, brightness) {
    var instance = new FastColor(baseColor);
    return instance.darken(brightness).toHexString();
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/default/colors.js
var generateColorPalettes = function(baseColor) {
    var colors = generate(baseColor);
    return {
        1: colors[0],
        2: colors[1],
        3: colors[2],
        4: colors[3],
        5: colors[4],
        6: colors[5],
        7: colors[6],
        8: colors[4],
        9: colors[5],
        10: colors[6]
    };
};
var generateNeutralColorPalettes = function(bgBaseColor, textBaseColor) {
    var colorBgBase = bgBaseColor || "#fff";
    var colorTextBase = textBaseColor || "#000";
    return {
        colorBgBase: colorBgBase,
        colorTextBase: colorTextBase,
        colorText: getAlphaColor(colorTextBase, 0.88),
        colorTextSecondary: getAlphaColor(colorTextBase, 0.65),
        colorTextTertiary: getAlphaColor(colorTextBase, 0.45),
        colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),
        colorFill: getAlphaColor(colorTextBase, 0.15),
        colorFillSecondary: getAlphaColor(colorTextBase, 0.06),
        colorFillTertiary: getAlphaColor(colorTextBase, 0.04),
        colorFillQuaternary: getAlphaColor(colorTextBase, 0.02),
        colorBgSolid: getAlphaColor(colorTextBase, 1),
        colorBgSolidHover: getAlphaColor(colorTextBase, 0.75),
        colorBgSolidActive: getAlphaColor(colorTextBase, 0.95),
        colorBgLayout: getSolidColor(colorBgBase, 4),
        colorBgContainer: getSolidColor(colorBgBase, 0),
        colorBgElevated: getSolidColor(colorBgBase, 0),
        colorBgSpotlight: getAlphaColor(colorTextBase, 0.85),
        colorBgBlur: "transparent",
        colorBorder: getSolidColor(colorBgBase, 15),
        colorBorderSecondary: getSolidColor(colorBgBase, 6)
    };
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/default/index.js
function derivative(token2) {
    presetPrimaryColors.pink = presetPrimaryColors.magenta;
    presetPalettes.pink = presetPalettes.magenta;
    var colorPalettes = Object.keys(defaultPresetColors).map(function(colorKey) {
        var colors = token2[colorKey] === presetPrimaryColors[colorKey] ? presetPalettes[colorKey] : generate(token2[colorKey]);
        return Array.from({
            length: 10
        }, function() {
            return 1;
        }).reduce(function(prev2, _, i) {
            prev2["".concat(colorKey, "-").concat(i + 1)] = colors[i];
            prev2["".concat(colorKey).concat(i + 1)] = colors[i];
            return prev2;
        }, {});
    }).reduce(function(prev2, cur) {
        prev2 = Object.assign(Object.assign({}, prev2), cur);
        return prev2;
    }, {});
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, token2), colorPalettes), genColorMapToken(token2, {
        generateColorPalettes: generateColorPalettes,
        generateNeutralColorPalettes: generateNeutralColorPalettes
    })), genFontMapToken_default(token2.fontSize)), genSizeMapToken(token2)), genControlHeight_default(token2)), genCommonMapToken(token2));
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/themes/default/theme.js
var defaultTheme = createTheme(derivative);
var theme_default = defaultTheme;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/context.js
var defaultConfig = {
    token: seed_default,
    override: {
        override: seed_default
    },
    hashed: true
};
var DesignTokenContext = /* @__PURE__ */ import_react9.default.createContext(defaultConfig);
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/context.js
var React13 = __toESM(require("react"));
var defaultPrefixCls = "ant";
var defaultIconPrefixCls = "anticon";
var defaultGetPrefixCls = function(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) {
        return customizePrefixCls;
    }
    return suffixCls ? "".concat(defaultPrefixCls, "-").concat(suffixCls) : defaultPrefixCls;
};
var ConfigContext = /* @__PURE__ */ React13.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls,
    iconPrefixCls: defaultIconPrefixCls
});
var ConfigConsumer = ConfigContext.Consumer;
var EMPTY_OBJECT = {};
function useComponentConfig(propName) {
    var context = React13.useContext(ConfigContext);
    var getPrefixCls = context.getPrefixCls, direction = context.direction, getPopupContainer = context.getPopupContainer;
    var propValue = context[propName];
    return Object.assign(Object.assign({
        classNames: EMPTY_OBJECT,
        styles: EMPTY_OBJECT
    }, propValue), {
        getPrefixCls: getPrefixCls,
        direction: direction,
        getPopupContainer: getPopupContainer
    });
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/cssVariables.js
var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
function getStyle(globalPrefixCls2, theme) {
    var variables = {};
    var formatColor = function(color, updater) {
        var clone = color.clone();
        clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;
        return clone.toRgbString();
    };
    var fillColor = function(colorVal, type) {
        var baseColor = new FastColor(colorVal);
        var colorPalettes = generate(baseColor.toRgbString());
        variables["".concat(type, "-color")] = formatColor(baseColor);
        variables["".concat(type, "-color-disabled")] = colorPalettes[1];
        variables["".concat(type, "-color-hover")] = colorPalettes[4];
        variables["".concat(type, "-color-active")] = colorPalettes[6];
        variables["".concat(type, "-color-outline")] = baseColor.clone().setA(0.2).toRgbString();
        variables["".concat(type, "-color-deprecated-bg")] = colorPalettes[0];
        variables["".concat(type, "-color-deprecated-border")] = colorPalettes[2];
    };
    if (theme.primaryColor) {
        fillColor(theme.primaryColor, "primary");
        var primaryColor = new FastColor(theme.primaryColor);
        var primaryColors = generate(primaryColor.toRgbString());
        primaryColors.forEach(function(color, index) {
            variables["primary-".concat(index + 1)] = color;
        });
        variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, function(c) {
            return c.lighten(35);
        });
        variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, function(c) {
            return c.lighten(20);
        });
        variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, function(c) {
            return c.tint(20);
        });
        variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, function(c) {
            return c.tint(50);
        });
        variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, function(c) {
            return c.setA(c.a * 0.12);
        });
        var primaryActiveColor = new FastColor(primaryColors[0]);
        variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, function(c) {
            return c.setA(c.a * 0.3);
        });
        variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, function(c) {
            return c.darken(2);
        });
    }
    if (theme.successColor) {
        fillColor(theme.successColor, "success");
    }
    if (theme.warningColor) {
        fillColor(theme.warningColor, "warning");
    }
    if (theme.errorColor) {
        fillColor(theme.errorColor, "error");
    }
    if (theme.infoColor) {
        fillColor(theme.infoColor, "info");
    }
    var cssList = Object.keys(variables).map(function(key) {
        return "--".concat(globalPrefixCls2, "-").concat(key, ": ").concat(variables[key], ";");
    });
    return "\n  :root {\n    ".concat(cssList.join("\n"), "\n  }\n  ").trim();
}
function registerTheme(globalPrefixCls2, theme) {
    var style2 = getStyle(globalPrefixCls2, theme);
    if (canUseDom()) {
        updateCSS(style2, "".concat(dynamicStyleMark, "-dynamic-theme"));
    } else {
        process.env.NODE_ENV !== "production" ? warning_default2(false, "ConfigProvider", "SSR do not support dynamic theme with css variables.") : void 0;
    }
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/DisabledContext.js
var React14 = __toESM(require("react"));
var DisabledContext = /* @__PURE__ */ React14.createContext(false);
var DisabledContextProvider = function(_ref) {
    var children = _ref.children, disabled = _ref.disabled;
    var originDisabled = React14.useContext(DisabledContext);
    return /* @__PURE__ */ React14.createElement(DisabledContext.Provider, {
        value: disabled !== null && disabled !== void 0 ? disabled : originDisabled
    }, children);
};
var DisabledContext_default = DisabledContext;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/hooks/useConfig.js
var import_react10 = require("react");
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/SizeContext.js
var React15 = __toESM(require("react"));
var SizeContext = /* @__PURE__ */ React15.createContext(void 0);
var SizeContextProvider = function(_ref) {
    var children = _ref.children, size = _ref.size;
    var originSize = React15.useContext(SizeContext);
    return /* @__PURE__ */ React15.createElement(SizeContext.Provider, {
        value: size || originSize
    }, children);
};
var SizeContext_default = SizeContext;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/hooks/useConfig.js
function useConfig() {
    var componentDisabled = (0, import_react10.useContext)(DisabledContext_default);
    var componentSize = (0, import_react10.useContext)(SizeContext_default);
    return {
        componentDisabled: componentDisabled,
        componentSize: componentSize
    };
}
var useConfig_default = useConfig;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/genStyleUtils.js
var import_react12 = __toESM(require("react"));
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/calc/calculator.js
var AbstractCalculator = /* @__PURE__ */ _createClass(function AbstractCalculator2() {
    _classCallCheck(this, AbstractCalculator2);
});
var calculator_default2 = AbstractCalculator;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/calc/CSSCalculator.js
var CALC_UNIT2 = "CALC_UNIT";
var regexp2 = new RegExp(CALC_UNIT2, "g");
function unit2(value) {
    if (typeof value === "number") {
        return "".concat(value).concat(CALC_UNIT2);
    }
    return value;
}
var CSSCalculator2 = /* @__PURE__ */ function(_AbstractCalculator) {
    _inherits(CSSCalculator3, _AbstractCalculator);
    var _super = _createSuper(CSSCalculator3);
    function CSSCalculator3(num, unitlessCssVar) {
        var _this;
        _classCallCheck(this, CSSCalculator3);
        _this = _super.call(this);
        _defineProperty(_assertThisInitialized(_this), "result", "");
        _defineProperty(_assertThisInitialized(_this), "unitlessCssVar", void 0);
        _defineProperty(_assertThisInitialized(_this), "lowPriority", void 0);
        var numType = _typeof(num);
        _this.unitlessCssVar = unitlessCssVar;
        if (_instanceof(num, CSSCalculator3)) {
            _this.result = "(".concat(num.result, ")");
        } else if (numType === "number") {
            _this.result = unit2(num);
        } else if (numType === "string") {
            _this.result = num;
        }
        return _this;
    }
    _createClass(CSSCalculator3, [
        {
            key: "add",
            value: function add(num) {
                if (_instanceof(num, CSSCalculator3)) {
                    this.result = "".concat(this.result, " + ").concat(num.getResult());
                } else if (typeof num === "number" || typeof num === "string") {
                    this.result = "".concat(this.result, " + ").concat(unit2(num));
                }
                this.lowPriority = true;
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(num) {
                if (_instanceof(num, CSSCalculator3)) {
                    this.result = "".concat(this.result, " - ").concat(num.getResult());
                } else if (typeof num === "number" || typeof num === "string") {
                    this.result = "".concat(this.result, " - ").concat(unit2(num));
                }
                this.lowPriority = true;
                return this;
            }
        },
        {
            key: "mul",
            value: function mul(num) {
                if (this.lowPriority) {
                    this.result = "(".concat(this.result, ")");
                }
                if (_instanceof(num, CSSCalculator3)) {
                    this.result = "".concat(this.result, " * ").concat(num.getResult(true));
                } else if (typeof num === "number" || typeof num === "string") {
                    this.result = "".concat(this.result, " * ").concat(num);
                }
                this.lowPriority = false;
                return this;
            }
        },
        {
            key: "div",
            value: function div(num) {
                if (this.lowPriority) {
                    this.result = "(".concat(this.result, ")");
                }
                if (_instanceof(num, CSSCalculator3)) {
                    this.result = "".concat(this.result, " / ").concat(num.getResult(true));
                } else if (typeof num === "number" || typeof num === "string") {
                    this.result = "".concat(this.result, " / ").concat(num);
                }
                this.lowPriority = false;
                return this;
            }
        },
        {
            key: "getResult",
            value: function getResult(force) {
                return this.lowPriority || force ? "(".concat(this.result, ")") : this.result;
            }
        },
        {
            key: "equal",
            value: function equal(options) {
                var _this2 = this;
                var _ref = options || {}, cssUnit = _ref.unit;
                var mergedUnit = true;
                if (typeof cssUnit === "boolean") {
                    mergedUnit = cssUnit;
                } else if (Array.from(this.unitlessCssVar).some(function(cssVar) {
                    return _this2.result.includes(cssVar);
                })) {
                    mergedUnit = false;
                }
                this.result = this.result.replace(regexp2, mergedUnit ? "px" : "");
                if (typeof this.lowPriority !== "undefined") {
                    return "calc(".concat(this.result, ")");
                }
                return this.result;
            }
        }
    ]);
    return CSSCalculator3;
}(calculator_default2);
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/calc/NumCalculator.js
var NumCalculator2 = /* @__PURE__ */ function(_AbstractCalculator) {
    _inherits(NumCalculator3, _AbstractCalculator);
    var _super = _createSuper(NumCalculator3);
    function NumCalculator3(num) {
        var _this;
        _classCallCheck(this, NumCalculator3);
        _this = _super.call(this);
        _defineProperty(_assertThisInitialized(_this), "result", 0);
        if (_instanceof(num, NumCalculator3)) {
            _this.result = num.result;
        } else if (typeof num === "number") {
            _this.result = num;
        }
        return _this;
    }
    _createClass(NumCalculator3, [
        {
            key: "add",
            value: function add(num) {
                if (_instanceof(num, NumCalculator3)) {
                    this.result += num.result;
                } else if (typeof num === "number") {
                    this.result += num;
                }
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(num) {
                if (_instanceof(num, NumCalculator3)) {
                    this.result -= num.result;
                } else if (typeof num === "number") {
                    this.result -= num;
                }
                return this;
            }
        },
        {
            key: "mul",
            value: function mul(num) {
                if (_instanceof(num, NumCalculator3)) {
                    this.result *= num.result;
                } else if (typeof num === "number") {
                    this.result *= num;
                }
                return this;
            }
        },
        {
            key: "div",
            value: function div(num) {
                if (_instanceof(num, NumCalculator3)) {
                    this.result /= num.result;
                } else if (typeof num === "number") {
                    this.result /= num;
                }
                return this;
            }
        },
        {
            key: "equal",
            value: function equal() {
                return this.result;
            }
        }
    ]);
    return NumCalculator3;
}(calculator_default2);
var NumCalculator_default = NumCalculator2;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/calc/index.js
var genCalc = function genCalc2(type, unitlessCssVar) {
    var Calculator = type === "css" ? CSSCalculator2 : NumCalculator_default;
    return function(num) {
        return new Calculator(num, unitlessCssVar);
    };
};
var calc_default2 = genCalc;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/getCompVarPrefix.js
var getCompVarPrefix = function getCompVarPrefix2(component, prefix) {
    return "".concat([
        prefix,
        component.replace(/([A-Z]+)([A-Z][a-z]+)/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2")
    ].filter(Boolean).join("-"));
};
var getCompVarPrefix_default = getCompVarPrefix;
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useEvent.js
var React16 = __toESM(require("react"));
function useEvent(callback) {
    var fnRef = React16.useRef();
    fnRef.current = callback;
    var memoFn = React16.useCallback(function() {
        var _fnRef$current;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [
            fnRef
        ].concat(args));
    }, []);
    return memoFn;
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useState.js
var React17 = __toESM(require("react"));
function useSafeState(defaultValue) {
    var destroyRef = React17.useRef(false);
    var _React$useState = React17.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    React17.useEffect(function() {
        destroyRef.current = false;
        return function() {
            destroyRef.current = true;
        };
    }, []);
    function safeSetState(updater, ignoreDestroy) {
        if (ignoreDestroy && destroyRef.current) {
            return;
        }
        setValue(updater);
    }
    return [
        value,
        safeSetState
    ];
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useMergedState.js
function hasValue(value) {
    return value !== void 0;
}
function useMergedState(defaultStateValue, option) {
    var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
    var _useState = useSafeState(function() {
        if (hasValue(value)) {
            return value;
        } else if (hasValue(defaultValue)) {
            return typeof defaultValue === "function" ? defaultValue() : defaultValue;
        } else {
            return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
        }
    }), _useState2 = _slicedToArray(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
    var mergedValue = value !== void 0 ? value : innerValue;
    var postMergedValue = postState ? postState(mergedValue) : mergedValue;
    var onChangeFn = useEvent(onChange);
    var _useState3 = useSafeState([
        mergedValue
    ]), _useState4 = _slicedToArray(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
    useLayoutUpdateEffect(function() {
        var prev2 = prevValue[0];
        if (innerValue !== prev2) {
            onChangeFn(innerValue, prev2);
        }
    }, [
        prevValue
    ]);
    useLayoutUpdateEffect(function() {
        if (!hasValue(value)) {
            setInnerValue(value);
        }
    }, [
        value
    ]);
    var triggerChange = useEvent(function(updater, ignoreDestroy) {
        setInnerValue(updater, ignoreDestroy);
        setPrevValue([
            mergedValue
        ], ignoreDestroy);
    });
    return [
        postMergedValue,
        triggerChange
    ];
}
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/getComponentToken.js
function getComponentToken(component, token2, defaultToken, options) {
    var customToken = _objectSpread2({}, token2[component]);
    if (options !== null && options !== void 0 && options.deprecatedTokens) {
        var deprecatedTokens = options.deprecatedTokens;
        deprecatedTokens.forEach(function(_ref) {
            var _ref2 = _slicedToArray(_ref, 2), oldTokenKey = _ref2[0], newTokenKey = _ref2[1];
            if (process.env.NODE_ENV !== "production") {
                warning_default(!(customToken !== null && customToken !== void 0 && customToken[oldTokenKey]), "Component Token `".concat(String(oldTokenKey), "` of ").concat(String(component), " is deprecated. Please use `").concat(String(newTokenKey), "` instead."));
            }
            if (customToken !== null && customToken !== void 0 && customToken[oldTokenKey] || customToken !== null && customToken !== void 0 && customToken[newTokenKey]) {
                var _customToken$newToken;
                (_customToken$newToken = customToken[newTokenKey]) !== null && _customToken$newToken !== void 0 ? _customToken$newToken : customToken[newTokenKey] = customToken === null || customToken === void 0 ? void 0 : customToken[oldTokenKey];
            }
        });
    }
    var mergedToken = _objectSpread2(_objectSpread2({}, defaultToken), customToken);
    Object.keys(mergedToken).forEach(function(key) {
        if (mergedToken[key] === token2[key]) {
            delete mergedToken[key];
        }
    });
    return mergedToken;
}
var getComponentToken_default = getComponentToken;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/statistic.js
var enableStatistic = process.env.NODE_ENV !== "production" || typeof CSSINJS_STATISTIC !== "undefined";
var recording = true;
function merge2() {
    for(var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++){
        objs[_key] = arguments[_key];
    }
    if (!enableStatistic) {
        return Object.assign.apply(Object, [
            {}
        ].concat(objs));
    }
    recording = false;
    var ret = {};
    objs.forEach(function(obj) {
        if (_typeof(obj) !== "object") {
            return;
        }
        var keys2 = Object.keys(obj);
        keys2.forEach(function(key) {
            Object.defineProperty(ret, key, {
                configurable: true,
                enumerable: true,
                get: function get2() {
                    return obj[key];
                }
            });
        });
    });
    recording = true;
    return ret;
}
var statistic = {};
function noop2() {}
var statisticToken = function statisticToken2(token2) {
    var tokenKeys2;
    var proxy = token2;
    var flush = noop2;
    if (enableStatistic && typeof Proxy !== "undefined") {
        tokenKeys2 = /* @__PURE__ */ new Set();
        proxy = new Proxy(token2, {
            get: function get2(obj, prop) {
                if (recording) {
                    var _tokenKeys;
                    (_tokenKeys = tokenKeys2) === null || _tokenKeys === void 0 || _tokenKeys.add(prop);
                }
                return obj[prop];
            }
        });
        flush = function flush2(componentName, componentToken) {
            var _statistic$componentN;
            statistic[componentName] = {
                global: Array.from(tokenKeys2),
                component: _objectSpread2(_objectSpread2({}, (_statistic$componentN = statistic[componentName]) === null || _statistic$componentN === void 0 ? void 0 : _statistic$componentN.component), componentToken)
            };
        };
    }
    return {
        token: proxy,
        keys: tokenKeys2,
        flush: flush
    };
};
var statistic_default = statisticToken;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/getDefaultComponentToken.js
function getDefaultComponentToken(component, token2, getDefaultToken) {
    if (typeof getDefaultToken === "function") {
        var _token$component;
        return getDefaultToken(merge2(token2, (_token$component = token2[component]) !== null && _token$component !== void 0 ? _token$component : {}));
    }
    return getDefaultToken !== null && getDefaultToken !== void 0 ? getDefaultToken : {};
}
var getDefaultComponentToken_default = getDefaultComponentToken;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/maxmin.js
function genMaxMin(type) {
    if (type === "js") {
        return {
            max: Math.max,
            min: Math.min
        };
    }
    return {
        max: function max() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return "max(".concat(args.map(function(value) {
                return unit(value);
            }).join(","), ")");
        },
        min: function min() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
                args[_key2] = arguments[_key2];
            }
            return "min(".concat(args.map(function(value) {
                return unit(value);
            }).join(","), ")");
        }
    };
}
var maxmin_default = genMaxMin;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js
var import_react11 = __toESM(require("react"));
var BEAT_LIMIT = 1e3 * 60 * 10;
var ArrayKeyMap = /* @__PURE__ */ function() {
    function ArrayKeyMap2() {
        _classCallCheck(this, ArrayKeyMap2);
        _defineProperty(this, "map", /* @__PURE__ */ new Map());
        _defineProperty(this, "objectIDMap", /* @__PURE__ */ new WeakMap());
        _defineProperty(this, "nextID", 0);
        _defineProperty(this, "lastAccessBeat", /* @__PURE__ */ new Map());
        _defineProperty(this, "accessBeat", 0);
    }
    _createClass(ArrayKeyMap2, [
        {
            key: "set",
            value: function set2(keys2, value) {
                this.clear();
                var compositeKey = this.getCompositeKey(keys2);
                this.map.set(compositeKey, value);
                this.lastAccessBeat.set(compositeKey, Date.now());
            }
        },
        {
            key: "get",
            value: function get2(keys2) {
                var compositeKey = this.getCompositeKey(keys2);
                var cache = this.map.get(compositeKey);
                this.lastAccessBeat.set(compositeKey, Date.now());
                this.accessBeat += 1;
                return cache;
            }
        },
        {
            key: "getCompositeKey",
            value: function getCompositeKey(keys2) {
                var _this = this;
                var ids = keys2.map(function(key) {
                    if (key && _typeof(key) === "object") {
                        return "obj_".concat(_this.getObjectID(key));
                    }
                    return "".concat(_typeof(key), "_").concat(key);
                });
                return ids.join("|");
            }
        },
        {
            key: "getObjectID",
            value: function getObjectID(obj) {
                if (this.objectIDMap.has(obj)) {
                    return this.objectIDMap.get(obj);
                }
                var id = this.nextID;
                this.objectIDMap.set(obj, id);
                this.nextID += 1;
                return id;
            }
        },
        {
            key: "clear",
            value: function clear() {
                var _this2 = this;
                if (this.accessBeat > 1e4) {
                    var now = Date.now();
                    this.lastAccessBeat.forEach(function(beat, key) {
                        if (now - beat > BEAT_LIMIT) {
                            _this2.map.delete(key);
                            _this2.lastAccessBeat.delete(key);
                        }
                    });
                    this.accessBeat = 0;
                }
            }
        }
    ]);
    return ArrayKeyMap2;
}();
var uniqueMap = new ArrayKeyMap();
function useUniqueMemo(memoFn, deps) {
    return import_react11.default.useMemo(function() {
        var cachedValue = uniqueMap.get(deps);
        if (cachedValue) {
            return cachedValue;
        }
        var newValue = memoFn();
        uniqueMap.set(deps, newValue);
        return newValue;
    }, deps);
}
var useUniqueMemo_default = useUniqueMemo;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/hooks/useCSP.js
var useDefaultCSP = function useDefaultCSP2() {
    return {};
};
var useCSP_default = useDefaultCSP;
// ../../node_modules/.pnpm/@ant-design+cssinjs-utils@1.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/cssinjs-utils/es/util/genStyleUtils.js
function genStyleUtils(config) {
    var _config$useCSP = config.useCSP, useCSP = _config$useCSP === void 0 ? useCSP_default : _config$useCSP, useToken2 = config.useToken, usePrefix = config.usePrefix, getResetStyles = config.getResetStyles, getCommonStyle = config.getCommonStyle, getCompUnitless = config.getCompUnitless;
    function genStyleHooks2(component, styleFn, getDefaultToken, options) {
        var componentName = Array.isArray(component) ? component[0] : component;
        function prefixToken(key) {
            return "".concat(String(componentName)).concat(key.slice(0, 1).toUpperCase()).concat(key.slice(1));
        }
        var originUnitless = (options === null || options === void 0 ? void 0 : options.unitless) || {};
        var originCompUnitless = typeof getCompUnitless === "function" ? getCompUnitless(component) : {};
        var compUnitless = _objectSpread2(_objectSpread2({}, originCompUnitless), {}, _defineProperty({}, prefixToken("zIndexPopup"), true));
        Object.keys(originUnitless).forEach(function(key) {
            compUnitless[prefixToken(key)] = originUnitless[key];
        });
        var mergedOptions = _objectSpread2(_objectSpread2({}, options), {}, {
            unitless: compUnitless,
            prefixToken: prefixToken
        });
        var useStyle = genComponentStyleHook2(component, styleFn, getDefaultToken, mergedOptions);
        var useCSSVar = genCSSVarRegister(componentName, getDefaultToken, mergedOptions);
        return function(prefixCls) {
            var rootCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : prefixCls;
            var _useStyle = useStyle(prefixCls, rootCls), _useStyle2 = _slicedToArray(_useStyle, 2), hashId = _useStyle2[1];
            var _useCSSVar = useCSSVar(rootCls), _useCSSVar2 = _slicedToArray(_useCSSVar, 2), wrapCSSVar = _useCSSVar2[0], cssVarCls = _useCSSVar2[1];
            return [
                wrapCSSVar,
                hashId,
                cssVarCls
            ];
        };
    }
    function genCSSVarRegister(component, getDefaultToken, options) {
        var compUnitless = options.unitless, _options$injectStyle = options.injectStyle, injectStyle = _options$injectStyle === void 0 ? true : _options$injectStyle, prefixToken = options.prefixToken, ignore2 = options.ignore;
        var CSSVarRegister = function CSSVarRegister2(_ref) {
            var rootCls = _ref.rootCls, _ref$cssVar = _ref.cssVar, cssVar = _ref$cssVar === void 0 ? {} : _ref$cssVar;
            var _useToken = useToken2(), realToken = _useToken.realToken;
            useCSSVarRegister_default({
                path: [
                    component
                ],
                prefix: cssVar.prefix,
                key: cssVar.key,
                unitless: compUnitless,
                ignore: ignore2,
                token: realToken,
                scope: rootCls
            }, function() {
                var defaultToken = getDefaultComponentToken_default(component, realToken, getDefaultToken);
                var componentToken = getComponentToken_default(component, realToken, defaultToken, {
                    deprecatedTokens: options === null || options === void 0 ? void 0 : options.deprecatedTokens
                });
                Object.keys(defaultToken).forEach(function(key) {
                    componentToken[prefixToken(key)] = componentToken[key];
                    delete componentToken[key];
                });
                return componentToken;
            });
            return null;
        };
        var useCSSVar = function useCSSVar2(rootCls) {
            var _useToken2 = useToken2(), cssVar = _useToken2.cssVar;
            return [
                function(node2) {
                    return injectStyle && cssVar ? /* @__PURE__ */ import_react12.default.createElement(import_react12.default.Fragment, null, /* @__PURE__ */ import_react12.default.createElement(CSSVarRegister, {
                        rootCls: rootCls,
                        cssVar: cssVar,
                        component: component
                    }), node2) : node2;
                },
                cssVar === null || cssVar === void 0 ? void 0 : cssVar.key
            ];
        };
        return useCSSVar;
    }
    function genComponentStyleHook2(componentName, styleFn, getDefaultToken) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        var cells = Array.isArray(componentName) ? componentName : [
            componentName,
            componentName
        ];
        var _cells = _slicedToArray(cells, 1), component = _cells[0];
        var concatComponent = cells.join("-");
        var mergedLayer = config.layer || {
            name: "antd"
        };
        return function(prefixCls) {
            var rootCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : prefixCls;
            var _useToken3 = useToken2(), theme = _useToken3.theme, realToken = _useToken3.realToken, hashId = _useToken3.hashId, token2 = _useToken3.token, cssVar = _useToken3.cssVar;
            var _usePrefix = usePrefix(), rootPrefixCls = _usePrefix.rootPrefixCls, iconPrefixCls = _usePrefix.iconPrefixCls;
            var csp = useCSP();
            var type = cssVar ? "css" : "js";
            var calc = useUniqueMemo_default(function() {
                var unitlessCssVar = /* @__PURE__ */ new Set();
                if (cssVar) {
                    Object.keys(options.unitless || {}).forEach(function(key) {
                        unitlessCssVar.add(token2CSSVar(key, cssVar.prefix));
                        unitlessCssVar.add(token2CSSVar(key, getCompVarPrefix_default(component, cssVar.prefix)));
                    });
                }
                return calc_default2(type, unitlessCssVar);
            }, [
                type,
                component,
                cssVar === null || cssVar === void 0 ? void 0 : cssVar.prefix
            ]);
            var _genMaxMin = maxmin_default(type), max = _genMaxMin.max, min = _genMaxMin.min;
            var sharedConfig = {
                theme: theme,
                token: token2,
                hashId: hashId,
                nonce: function nonce() {
                    return csp.nonce;
                },
                clientOnly: options.clientOnly,
                layer: mergedLayer,
                // antd is always at top of styles
                order: options.order || -999
            };
            if (typeof getResetStyles === "function") {
                useStyleRegister(_objectSpread2(_objectSpread2({}, sharedConfig), {}, {
                    clientOnly: false,
                    path: [
                        "Shared",
                        rootPrefixCls
                    ]
                }), function() {
                    return getResetStyles(token2, {
                        prefix: {
                            rootPrefixCls: rootPrefixCls,
                            iconPrefixCls: iconPrefixCls
                        },
                        csp: csp
                    });
                });
            }
            var wrapSSR = useStyleRegister(_objectSpread2(_objectSpread2({}, sharedConfig), {}, {
                path: [
                    concatComponent,
                    prefixCls,
                    iconPrefixCls
                ]
            }), function() {
                if (options.injectStyle === false) {
                    return [];
                }
                var _statisticToken = statistic_default(token2), proxyToken = _statisticToken.token, flush = _statisticToken.flush;
                var defaultComponentToken = getDefaultComponentToken_default(component, realToken, getDefaultToken);
                var componentCls = ".".concat(prefixCls);
                var componentToken = getComponentToken_default(component, realToken, defaultComponentToken, {
                    deprecatedTokens: options.deprecatedTokens
                });
                if (cssVar && defaultComponentToken && _typeof(defaultComponentToken) === "object") {
                    Object.keys(defaultComponentToken).forEach(function(key) {
                        defaultComponentToken[key] = "var(".concat(token2CSSVar(key, getCompVarPrefix_default(component, cssVar.prefix)), ")");
                    });
                }
                var mergedToken = merge2(proxyToken, {
                    componentCls: componentCls,
                    prefixCls: prefixCls,
                    iconCls: ".".concat(iconPrefixCls),
                    antCls: ".".concat(rootPrefixCls),
                    calc: calc,
                    // @ts-ignore
                    max: max,
                    // @ts-ignore
                    min: min
                }, cssVar ? defaultComponentToken : componentToken);
                var styleInterpolation = styleFn(mergedToken, {
                    hashId: hashId,
                    prefixCls: prefixCls,
                    rootPrefixCls: rootPrefixCls,
                    iconPrefixCls: iconPrefixCls
                });
                flush(component, componentToken);
                var commonStyle = typeof getCommonStyle === "function" ? getCommonStyle(mergedToken, prefixCls, rootCls, options.resetFont) : null;
                return [
                    options.resetStyle === false ? null : commonStyle,
                    styleInterpolation
                ];
            });
            return [
                wrapSSR,
                hashId
            ];
        };
    }
    function genSubStyleComponent2(componentName, styleFn, getDefaultToken) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        var useStyle = genComponentStyleHook2(componentName, styleFn, getDefaultToken, _objectSpread2({
            resetStyle: false,
            // Sub Style should default after root one
            order: -998
        }, options));
        var StyledComponent = function StyledComponent2(_ref2) {
            var prefixCls = _ref2.prefixCls, _ref2$rootCls = _ref2.rootCls, rootCls = _ref2$rootCls === void 0 ? prefixCls : _ref2$rootCls;
            useStyle(prefixCls, rootCls);
            return null;
        };
        if (process.env.NODE_ENV !== "production") {
            StyledComponent.displayName = "SubStyle_".concat(String(Array.isArray(componentName) ? componentName.join(".") : componentName));
        }
        return StyledComponent;
    }
    return {
        genStyleHooks: genStyleHooks2,
        genSubStyleComponent: genSubStyleComponent2,
        genComponentStyleHook: genComponentStyleHook2
    };
}
var genStyleUtils_default = genStyleUtils;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/interface/presetColors.js
var PresetColors = [
    "blue",
    "purple",
    "cyan",
    "green",
    "magenta",
    "pink",
    "red",
    "orange",
    "yellow",
    "volcano",
    "geekblue",
    "lime",
    "gold"
];
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/useToken.js
var import_react13 = __toESM(require("react"));
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/version/version.js
var version_default = "5.24.3";
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/version/index.js
var version_default2 = version_default;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/util/getAlphaColor.js
function isStableColor(color) {
    return color >= 0 && color <= 255;
}
function getAlphaColor2(frontColor, backgroundColor) {
    var _toRgb = new FastColor(frontColor).toRgb(), fR = _toRgb.r, fG = _toRgb.g, fB = _toRgb.b, originAlpha = _toRgb.a;
    if (originAlpha < 1) {
        return frontColor;
    }
    var _toRgb1 = new FastColor(backgroundColor).toRgb(), bR = _toRgb1.r, bG = _toRgb1.g, bB = _toRgb1.b;
    for(var fA = 0.01; fA <= 1; fA += 0.01){
        var r = Math.round((fR - bR * (1 - fA)) / fA);
        var g = Math.round((fG - bG * (1 - fA)) / fA);
        var b = Math.round((fB - bB * (1 - fA)) / fA);
        if (isStableColor(r) && isStableColor(g) && isStableColor(b)) {
            return new FastColor({
                r: r,
                g: g,
                b: b,
                a: Math.round(fA * 100) / 100
            }).toRgbString();
        }
    }
    return new FastColor({
        r: fR,
        g: fG,
        b: fB,
        a: 1
    }).toRgbString();
}
var getAlphaColor_default = getAlphaColor2;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/util/alias.js
var __rest = function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function formatToken(derivativeToken) {
    var override = derivativeToken.override, restToken = __rest(derivativeToken, [
        "override"
    ]);
    var overrideTokens = Object.assign({}, override);
    Object.keys(seed_default).forEach(function(token2) {
        delete overrideTokens[token2];
    });
    var mergedToken = Object.assign(Object.assign({}, restToken), overrideTokens);
    var screenXS = 480;
    var screenSM = 576;
    var screenMD = 768;
    var screenLG = 992;
    var screenXL = 1200;
    var screenXXL = 1600;
    if (mergedToken.motion === false) {
        var fastDuration = "0s";
        mergedToken.motionDurationFast = fastDuration;
        mergedToken.motionDurationMid = fastDuration;
        mergedToken.motionDurationSlow = fastDuration;
    }
    var aliasToken = Object.assign(Object.assign(Object.assign({}, mergedToken), {
        // ============== Background ============== //
        colorFillContent: mergedToken.colorFillSecondary,
        colorFillContentHover: mergedToken.colorFill,
        colorFillAlter: mergedToken.colorFillQuaternary,
        colorBgContainerDisabled: mergedToken.colorFillTertiary,
        // ============== Split ============== //
        colorBorderBg: mergedToken.colorBgContainer,
        colorSplit: getAlphaColor_default(mergedToken.colorBorderSecondary, mergedToken.colorBgContainer),
        // ============== Text ============== //
        colorTextPlaceholder: mergedToken.colorTextQuaternary,
        colorTextDisabled: mergedToken.colorTextQuaternary,
        colorTextHeading: mergedToken.colorText,
        colorTextLabel: mergedToken.colorTextSecondary,
        colorTextDescription: mergedToken.colorTextTertiary,
        colorTextLightSolid: mergedToken.colorWhite,
        colorHighlight: mergedToken.colorError,
        colorBgTextHover: mergedToken.colorFillSecondary,
        colorBgTextActive: mergedToken.colorFill,
        colorIcon: mergedToken.colorTextTertiary,
        colorIconHover: mergedToken.colorText,
        colorErrorOutline: getAlphaColor_default(mergedToken.colorErrorBg, mergedToken.colorBgContainer),
        colorWarningOutline: getAlphaColor_default(mergedToken.colorWarningBg, mergedToken.colorBgContainer),
        // Font
        fontSizeIcon: mergedToken.fontSizeSM,
        // Line
        lineWidthFocus: mergedToken.lineWidth * 3,
        // Control
        lineWidth: mergedToken.lineWidth,
        controlOutlineWidth: mergedToken.lineWidth * 2,
        // Checkbox size and expand icon size
        controlInteractiveSize: mergedToken.controlHeight / 2,
        controlItemBgHover: mergedToken.colorFillTertiary,
        controlItemBgActive: mergedToken.colorPrimaryBg,
        controlItemBgActiveHover: mergedToken.colorPrimaryBgHover,
        controlItemBgActiveDisabled: mergedToken.colorFill,
        controlTmpOutline: mergedToken.colorFillQuaternary,
        controlOutline: getAlphaColor_default(mergedToken.colorPrimaryBg, mergedToken.colorBgContainer),
        lineType: mergedToken.lineType,
        borderRadius: mergedToken.borderRadius,
        borderRadiusXS: mergedToken.borderRadiusXS,
        borderRadiusSM: mergedToken.borderRadiusSM,
        borderRadiusLG: mergedToken.borderRadiusLG,
        fontWeightStrong: 600,
        opacityLoading: 0.65,
        linkDecoration: "none",
        linkHoverDecoration: "none",
        linkFocusDecoration: "none",
        controlPaddingHorizontal: 12,
        controlPaddingHorizontalSM: 8,
        paddingXXS: mergedToken.sizeXXS,
        paddingXS: mergedToken.sizeXS,
        paddingSM: mergedToken.sizeSM,
        padding: mergedToken.size,
        paddingMD: mergedToken.sizeMD,
        paddingLG: mergedToken.sizeLG,
        paddingXL: mergedToken.sizeXL,
        paddingContentHorizontalLG: mergedToken.sizeLG,
        paddingContentVerticalLG: mergedToken.sizeMS,
        paddingContentHorizontal: mergedToken.sizeMS,
        paddingContentVertical: mergedToken.sizeSM,
        paddingContentHorizontalSM: mergedToken.size,
        paddingContentVerticalSM: mergedToken.sizeXS,
        marginXXS: mergedToken.sizeXXS,
        marginXS: mergedToken.sizeXS,
        marginSM: mergedToken.sizeSM,
        margin: mergedToken.size,
        marginMD: mergedToken.sizeMD,
        marginLG: mergedToken.sizeLG,
        marginXL: mergedToken.sizeXL,
        marginXXL: mergedToken.sizeXXL,
        boxShadow: "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowSecondary: "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowTertiary: "\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",
        screenXS: screenXS,
        screenXSMin: screenXS,
        screenXSMax: screenSM - 1,
        screenSM: screenSM,
        screenSMMin: screenSM,
        screenSMMax: screenMD - 1,
        screenMD: screenMD,
        screenMDMin: screenMD,
        screenMDMax: screenLG - 1,
        screenLG: screenLG,
        screenLGMin: screenLG,
        screenLGMax: screenXL - 1,
        screenXL: screenXL,
        screenXLMin: screenXL,
        screenXLMax: screenXXL - 1,
        screenXXL: screenXXL,
        screenXXLMin: screenXXL,
        boxShadowPopoverArrow: "2px 2px 5px rgba(0, 0, 0, 0.05)",
        boxShadowCard: "\n      0 1px 2px -2px ".concat(new FastColor("rgba(0, 0, 0, 0.16)").toRgbString(), ",\n      0 3px 6px 0 ").concat(new FastColor("rgba(0, 0, 0, 0.12)").toRgbString(), ",\n      0 5px 12px 4px ").concat(new FastColor("rgba(0, 0, 0, 0.09)").toRgbString(), "\n    "),
        boxShadowDrawerRight: "\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowDrawerLeft: "\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowDrawerUp: "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowDrawerDown: "\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        boxShadowTabsOverflowLeft: "inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",
        boxShadowTabsOverflowRight: "inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",
        boxShadowTabsOverflowTop: "inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",
        boxShadowTabsOverflowBottom: "inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"
    }), overrideTokens);
    return aliasToken;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/useToken.js
var __rest2 = function __rest2(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var unitless = {
    lineHeight: true,
    lineHeightSM: true,
    lineHeightLG: true,
    lineHeightHeading1: true,
    lineHeightHeading2: true,
    lineHeightHeading3: true,
    lineHeightHeading4: true,
    lineHeightHeading5: true,
    opacityLoading: true,
    fontWeightStrong: true,
    zIndexPopupBase: true,
    zIndexBase: true,
    opacityImage: true
};
var ignore = {
    size: true,
    sizeSM: true,
    sizeLG: true,
    sizeMD: true,
    sizeXS: true,
    sizeXXS: true,
    sizeMS: true,
    sizeXL: true,
    sizeXXL: true,
    sizeUnit: true,
    sizeStep: true,
    motionBase: true,
    motionUnit: true
};
var preserve = {
    screenXS: true,
    screenXSMin: true,
    screenXSMax: true,
    screenSM: true,
    screenSMMin: true,
    screenSMMax: true,
    screenMD: true,
    screenMDMin: true,
    screenMDMax: true,
    screenLG: true,
    screenLGMin: true,
    screenLGMax: true,
    screenXL: true,
    screenXLMin: true,
    screenXLMax: true,
    screenXXL: true,
    screenXXLMin: true
};
var getComputedToken3 = function(originToken, overrideToken, theme) {
    var derivativeToken = theme.getDerivativeToken(originToken);
    var override = overrideToken.override, components = __rest2(overrideToken, [
        "override"
    ]);
    var mergedDerivativeToken = Object.assign(Object.assign({}, derivativeToken), {
        override: override
    });
    mergedDerivativeToken = formatToken(mergedDerivativeToken);
    if (components) {
        Object.entries(components).forEach(function(_ref) {
            var _$_ref = _sliced_to_array(_ref, 2), key = _$_ref[0], value = _$_ref[1];
            var componentTheme = value.theme, componentTokens = __rest2(value, [
                "theme"
            ]);
            var mergedComponentToken = componentTokens;
            if (componentTheme) {
                mergedComponentToken = getComputedToken3(Object.assign(Object.assign({}, mergedDerivativeToken), componentTokens), {
                    override: componentTokens
                }, componentTheme);
            }
            mergedDerivativeToken[key] = mergedComponentToken;
        });
    }
    return mergedDerivativeToken;
};
function useToken() {
    var _import_react13_default_useContext = import_react13.default.useContext(DesignTokenContext), rootDesignToken = _import_react13_default_useContext.token, hashed = _import_react13_default_useContext.hashed, theme = _import_react13_default_useContext.theme, override = _import_react13_default_useContext.override, cssVar = _import_react13_default_useContext.cssVar;
    var salt = "".concat(version_default2, "-").concat(hashed || "");
    var mergedTheme = theme || theme_default;
    var _useCacheToken = _sliced_to_array(useCacheToken(mergedTheme, [
        seed_default,
        rootDesignToken
    ], {
        salt: salt,
        override: override,
        getComputedToken: getComputedToken3,
        // formatToken will not be consumed after 1.15.0 with getComputedToken.
        // But token will break if @ant-design/cssinjs is under 1.15.0 without it
        formatToken: formatToken,
        cssVar: cssVar && {
            prefix: cssVar.prefix,
            key: cssVar.key,
            unitless: unitless,
            ignore: ignore,
            preserve: preserve
        }
    }), 3), token2 = _useCacheToken[0], hashId = _useCacheToken[1], realToken = _useCacheToken[2];
    return [
        mergedTheme,
        realToken,
        hashed ? hashId : "",
        token2,
        cssVar
    ];
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/util/genStyleUtils.js
var import_react14 = require("react");
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/style/index.js
var resetIcon = function() {
    return {
        display: "inline-flex",
        alignItems: "center",
        color: "inherit",
        fontStyle: "normal",
        lineHeight: 0,
        textAlign: "center",
        textTransform: "none",
        // for SVG icon, see https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
        verticalAlign: "-0.125em",
        textRendering: "optimizeLegibility",
        "-webkit-font-smoothing": "antialiased",
        "-moz-osx-font-smoothing": "grayscale",
        "> *": {
            lineHeight: 1
        },
        svg: {
            display: "inline-block"
        }
    };
};
var genLinkStyle = function(token2) {
    return {
        a: {
            color: token2.colorLink,
            textDecoration: token2.linkDecoration,
            backgroundColor: "transparent",
            // remove the gray background on active links in IE 10.
            outline: "none",
            cursor: "pointer",
            transition: "color ".concat(token2.motionDurationSlow),
            "-webkit-text-decoration-skip": "objects",
            // remove gaps in links underline in iOS 8+ and Safari 8+.
            "&:hover": {
                color: token2.colorLinkHover
            },
            "&:active": {
                color: token2.colorLinkActive
            },
            "&:active, &:hover": {
                textDecoration: token2.linkHoverDecoration,
                outline: 0
            },
            // https://github.com/ant-design/ant-design/issues/22503
            "&:focus": {
                textDecoration: token2.linkFocusDecoration,
                outline: 0
            },
            "&[disabled]": {
                color: token2.colorTextDisabled,
                cursor: "not-allowed"
            }
        }
    };
};
var genCommonStyle = function(token2, componentPrefixCls, rootCls, resetFont) {
    var prefixSelector = '[class^="'.concat(componentPrefixCls, '"], [class*=" ').concat(componentPrefixCls, '"]');
    var rootPrefixSelector = rootCls ? ".".concat(rootCls) : prefixSelector;
    var resetStyle = {
        boxSizing: "border-box",
        "&::before, &::after": {
            boxSizing: "border-box"
        }
    };
    var resetFontStyle = {};
    if (resetFont !== false) {
        resetFontStyle = {
            fontFamily: token2.fontFamily,
            fontSize: token2.fontSize
        };
    }
    return _define_property({}, rootPrefixSelector, Object.assign(Object.assign(Object.assign({}, resetFontStyle), resetStyle), _define_property({}, prefixSelector, resetStyle)));
};
var genFocusOutline = function(token2, offset) {
    return {
        outline: "".concat(unit(token2.lineWidthFocus), " solid ").concat(token2.colorPrimaryBorder),
        outlineOffset: offset !== null && offset !== void 0 ? offset : 1,
        transition: "outline-offset 0s, outline 0s"
    };
};
var genFocusStyle = function(token2, offset) {
    return {
        "&:focus-visible": Object.assign({}, genFocusOutline(token2, offset))
    };
};
var genIconStyle = function(iconPrefixCls) {
    return _define_property({}, ".".concat(iconPrefixCls), Object.assign(Object.assign({}, resetIcon()), _define_property({}, ".".concat(iconPrefixCls, " .").concat(iconPrefixCls, "-icon"), {
        display: "block"
    })));
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/util/genStyleUtils.js
var _genStyleUtils_default = genStyleUtils_default({
    usePrefix: function() {
        var _ref = (0, import_react14.useContext)(ConfigContext), getPrefixCls = _ref.getPrefixCls, iconPrefixCls = _ref.iconPrefixCls;
        var rootPrefixCls = getPrefixCls();
        return {
            rootPrefixCls: rootPrefixCls,
            iconPrefixCls: iconPrefixCls
        };
    },
    useToken: function() {
        var _useToken = _sliced_to_array(useToken(), 5), theme = _useToken[0], realToken = _useToken[1], hashId = _useToken[2], token2 = _useToken[3], cssVar = _useToken[4];
        return {
            theme: theme,
            realToken: realToken,
            hashId: hashId,
            token: token2,
            cssVar: cssVar
        };
    },
    useCSP: function() {
        var csp = (0, import_react14.useContext)(ConfigContext).csp;
        return csp !== null && csp !== void 0 ? csp : {};
    },
    getResetStyles: function(token2, config) {
        var _a;
        var linkStyle = genLinkStyle(token2);
        return [
            linkStyle,
            {
                "&": linkStyle
            },
            genIconStyle((_a = config === null || config === void 0 ? void 0 : config.prefix.iconPrefixCls) !== null && _a !== void 0 ? _a : defaultIconPrefixCls)
        ];
    },
    getCommonStyle: genCommonStyle,
    getCompUnitless: function() {
        return unitless;
    }
}), genStyleHooks = _genStyleUtils_default.genStyleHooks, genComponentStyleHook = _genStyleUtils_default.genComponentStyleHook, genSubStyleComponent = _genStyleUtils_default.genSubStyleComponent;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/theme/util/useResetIconStyle.js
var useResetIconStyle = function(iconPrefixCls, csp) {
    var _useToken = _sliced_to_array(useToken(), 2), theme = _useToken[0], token2 = _useToken[1];
    return useStyleRegister({
        theme: theme,
        token: token2,
        hashId: "",
        path: [
            "ant-design-icons",
            iconPrefixCls
        ],
        nonce: function() {
            return csp === null || csp === void 0 ? void 0 : csp.nonce;
        },
        layer: {
            name: "antd"
        }
    }, function() {
        return [
            genIconStyle(iconPrefixCls)
        ];
    });
};
var useResetIconStyle_default = useResetIconStyle;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/hooks/useThemeKey.js
var React21 = __toESM(require("react"));
var fullClone3 = Object.assign({}, React21);
var useId = fullClone3.useId;
var useEmptyId = function() {
    return "";
};
var useThemeKey = typeof useId === "undefined" ? useEmptyId : useId;
var useThemeKey_default = useThemeKey;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/hooks/useTheme.js
function useTheme(theme, parentTheme, config) {
    var _a, _b;
    var warning4 = devUseWarning("ConfigProvider");
    var themeConfig = theme || {};
    var parentThemeConfig = themeConfig.inherit === false || !parentTheme ? Object.assign(Object.assign({}, defaultConfig), {
        hashed: (_a = parentTheme === null || parentTheme === void 0 ? void 0 : parentTheme.hashed) !== null && _a !== void 0 ? _a : defaultConfig.hashed,
        cssVar: parentTheme === null || parentTheme === void 0 ? void 0 : parentTheme.cssVar
    }) : parentTheme;
    var themeKey = useThemeKey_default();
    if (process.env.NODE_ENV !== "production") {
        var cssVarEnabled = themeConfig.cssVar || parentThemeConfig.cssVar;
        var validKey = !!(_type_of(themeConfig.cssVar) === "object" && ((_b = themeConfig.cssVar) === null || _b === void 0 ? void 0 : _b.key) || themeKey);
        process.env.NODE_ENV !== "production" ? warning4(!cssVarEnabled || validKey, "breaking", "Missing key in `cssVar` config. Please upgrade to React 18 or set `cssVar.key` manually in each ConfigProvider inside `cssVar` enabled ConfigProvider.") : void 0;
    }
    return useMemo(function() {
        var _a2, _b2;
        if (!theme) {
            return parentTheme;
        }
        var mergedComponents = Object.assign({}, parentThemeConfig.components);
        Object.keys(theme.components || {}).forEach(function(componentName) {
            mergedComponents[componentName] = Object.assign(Object.assign({}, mergedComponents[componentName]), theme.components[componentName]);
        });
        var cssVarKey = "css-var-".concat(themeKey.replace(/:/g, ""));
        var mergedCssVar = ((_a2 = themeConfig.cssVar) !== null && _a2 !== void 0 ? _a2 : parentThemeConfig.cssVar) && Object.assign(Object.assign(Object.assign({
            prefix: config === null || config === void 0 ? void 0 : config.prefixCls
        }, _type_of(parentThemeConfig.cssVar) === "object" ? parentThemeConfig.cssVar : {}), _type_of(themeConfig.cssVar) === "object" ? themeConfig.cssVar : {}), {
            key: _type_of(themeConfig.cssVar) === "object" && ((_b2 = themeConfig.cssVar) === null || _b2 === void 0 ? void 0 : _b2.key) || cssVarKey
        });
        return Object.assign(Object.assign(Object.assign({}, parentThemeConfig), themeConfig), {
            token: Object.assign(Object.assign({}, parentThemeConfig.token), themeConfig.token),
            components: mergedComponents,
            cssVar: mergedCssVar
        });
    }, [
        themeConfig,
        parentThemeConfig
    ], function(prev2, next2) {
        return prev2.some(function(prevTheme, index) {
            var nextTheme = next2[index];
            return !isEqual_default(prevTheme, nextTheme, true);
        });
    });
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/MotionWrapper.js
var React31 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/CSSMotion.js
var import_classnames = __toESM(require_classnames());
var React29 = __toESM(require("react"));
var import_react18 = require("react");
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/context.js
var React22 = __toESM(require("react"));
var _excluded = [
    "children"
];
var Context = /* @__PURE__ */ React22.createContext({});
function MotionProvider(_ref) {
    var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded);
    return /* @__PURE__ */ React22.createElement(Context.Provider, {
        value: props
    }, children);
}
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/DomWrapper.js
var React23 = __toESM(require("react"));
var DomWrapper = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper2, _React$Component);
    var _super = _createSuper(DomWrapper2);
    function DomWrapper2() {
        _classCallCheck(this, DomWrapper2);
        return _super.apply(this, arguments);
    }
    _createClass(DomWrapper2, [
        {
            key: "render",
            value: function render2() {
                return this.props.children;
            }
        }
    ]);
    return DomWrapper2;
}(React23.Component);
var DomWrapper_default = DomWrapper;
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/hooks/useSyncState.js
var React24 = __toESM(require("react"));
function useSyncState(defaultValue) {
    var _React$useReducer = React24.useReducer(function(x) {
        return x + 1;
    }, 0), _React$useReducer2 = _slicedToArray(_React$useReducer, 2), forceUpdate = _React$useReducer2[1];
    var currentValueRef = React24.useRef(defaultValue);
    var getValue2 = useEvent(function() {
        return currentValueRef.current;
    });
    var setValue = useEvent(function(updater) {
        currentValueRef.current = typeof updater === "function" ? updater(currentValueRef.current) : updater;
        forceUpdate();
    });
    return [
        getValue2,
        setValue
    ];
}
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useStatus.js
var React28 = __toESM(require("react"));
var import_react17 = require("react");
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/interface.js
var STATUS_NONE = "none";
var STATUS_APPEAR = "appear";
var STATUS_ENTER = "enter";
var STATUS_LEAVE = "leave";
var STEP_NONE = "none";
var STEP_PREPARE = "prepare";
var STEP_START = "start";
var STEP_ACTIVE = "active";
var STEP_ACTIVATED = "end";
var STEP_PREPARED = "prepared";
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useDomMotionEvents.js
var React25 = __toESM(require("react"));
var import_react15 = require("react");
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/util/motion.js
function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
}
function getVendorPrefixes(domSupport, win) {
    var prefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    if (domSupport) {
        if (!("AnimationEvent" in win)) {
            delete prefixes.animationend.animation;
        }
        if (!("TransitionEvent" in win)) {
            delete prefixes.transitionend.transition;
        }
    }
    return prefixes;
}
var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
var style = {};
if (canUseDom()) {
    _document$createEleme = document.createElement("div");
    style = _document$createEleme.style;
}
var _document$createEleme;
var prefixedEventNames = {};
function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
    }
    var prefixMap = vendorPrefixes[eventName];
    if (prefixMap) {
        var stylePropList = Object.keys(prefixMap);
        var len = stylePropList.length;
        for(var i = 0; i < len; i += 1){
            var styleProp = stylePropList[i];
            if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
                prefixedEventNames[eventName] = prefixMap[styleProp];
                return prefixedEventNames[eventName];
            }
        }
    }
    return "";
}
var internalAnimationEndName = getVendorPrefixedEventName("animationend");
var internalTransitionEndName = getVendorPrefixedEventName("transitionend");
var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
var animationEndName = internalAnimationEndName || "animationend";
var transitionEndName = internalTransitionEndName || "transitionend";
function getTransitionName(transitionName, transitionType) {
    if (!transitionName) return null;
    if (_typeof(transitionName) === "object") {
        var type = transitionType.replace(/-\w/g, function(match) {
            return match[1].toUpperCase();
        });
        return transitionName[type];
    }
    return "".concat(transitionName, "-").concat(transitionType);
}
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useDomMotionEvents.js
var useDomMotionEvents_default = function useDomMotionEvents_default(onInternalMotionEnd) {
    var cacheElementRef = (0, import_react15.useRef)();
    function removeMotionEvents(element) {
        if (element) {
            element.removeEventListener(transitionEndName, onInternalMotionEnd);
            element.removeEventListener(animationEndName, onInternalMotionEnd);
        }
    }
    function patchMotionEvents(element) {
        if (cacheElementRef.current && cacheElementRef.current !== element) {
            removeMotionEvents(cacheElementRef.current);
        }
        if (element && element !== cacheElementRef.current) {
            element.addEventListener(transitionEndName, onInternalMotionEnd);
            element.addEventListener(animationEndName, onInternalMotionEnd);
            cacheElementRef.current = element;
        }
    }
    React25.useEffect(function() {
        return function() {
            removeMotionEvents(cacheElementRef.current);
        };
    }, []);
    return [
        patchMotionEvents,
        removeMotionEvents
    ];
};
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js
var import_react16 = require("react");
var useIsomorphicLayoutEffect = canUseDom() ? import_react16.useLayoutEffect : import_react16.useEffect;
var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useStepQueue.js
var React27 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useNextFrame.js
var React26 = __toESM(require("react"));
var useNextFrame_default = function useNextFrame_default() {
    var nextFrameRef = React26.useRef(null);
    function cancelNextFrame() {
        raf_default.cancel(nextFrameRef.current);
    }
    function nextFrame(callback) {
        var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
        cancelNextFrame();
        var nextFrameId = raf_default(function() {
            if (delay <= 1) {
                callback({
                    isCanceled: function isCanceled() {
                        return nextFrameId !== nextFrameRef.current;
                    }
                });
            } else {
                nextFrame(callback, delay - 1);
            }
        });
        nextFrameRef.current = nextFrameId;
    }
    React26.useEffect(function() {
        return function() {
            cancelNextFrame();
        };
    }, []);
    return [
        nextFrame,
        cancelNextFrame
    ];
};
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useStepQueue.js
var FULL_STEP_QUEUE = [
    STEP_PREPARE,
    STEP_START,
    STEP_ACTIVE,
    STEP_ACTIVATED
];
var SIMPLE_STEP_QUEUE = [
    STEP_PREPARE,
    STEP_PREPARED
];
var SkipStep = false;
var DoStep = true;
function isActive(step) {
    return step === STEP_ACTIVE || step === STEP_ACTIVATED;
}
var useStepQueue_default = function useStepQueue_default(status, prepareOnly, callback) {
    var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];
    var _useNextFrame = useNextFrame_default(), _useNextFrame2 = _slicedToArray(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
    function startQueue() {
        setStep(STEP_PREPARE, true);
    }
    var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
    useIsomorphicLayoutEffect_default(function() {
        if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
            var index = STEP_QUEUE.indexOf(step);
            var nextStep = STEP_QUEUE[index + 1];
            var result = callback(step);
            if (result === SkipStep) {
                setStep(nextStep, true);
            } else if (nextStep) {
                nextFrame(function(info) {
                    function doNext() {
                        if (info.isCanceled()) return;
                        setStep(nextStep, true);
                    }
                    if (result === true) {
                        doNext();
                    } else {
                        Promise.resolve(result).then(doNext);
                    }
                });
            }
        }
    }, [
        status,
        step
    ]);
    React27.useEffect(function() {
        return function() {
            cancelNextFrame();
        };
    }, []);
    return [
        startQueue,
        step
    ];
};
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/hooks/useStatus.js
function useStatus(supportMotion, visible, getElement, _ref) {
    var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
    var _useState = useSafeState(), _useState2 = _slicedToArray(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
    var _useSyncState = useSyncState(STATUS_NONE), _useSyncState2 = _slicedToArray(_useSyncState, 2), getStatus = _useSyncState2[0], setStatus = _useSyncState2[1];
    var _useState3 = useSafeState(null), _useState4 = _slicedToArray(_useState3, 2), style2 = _useState4[0], setStyle = _useState4[1];
    var currentStatus = getStatus();
    var mountedRef = (0, import_react17.useRef)(false);
    var deadlineRef = (0, import_react17.useRef)(null);
    function getDomElement() {
        return getElement();
    }
    var activeRef = (0, import_react17.useRef)(false);
    function updateMotionEndStatus() {
        setStatus(STATUS_NONE);
        setStyle(null, true);
    }
    var onInternalMotionEnd = useEvent(function(event) {
        var status = getStatus();
        if (status === STATUS_NONE) {
            return;
        }
        var element = getDomElement();
        if (event && !event.deadline && event.target !== element) {
            return;
        }
        var currentActive = activeRef.current;
        var canEnd;
        if (status === STATUS_APPEAR && currentActive) {
            canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
        } else if (status === STATUS_ENTER && currentActive) {
            canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
        } else if (status === STATUS_LEAVE && currentActive) {
            canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
        }
        if (currentActive && canEnd !== false) {
            updateMotionEndStatus();
        }
    });
    var _useDomMotionEvents = useDomMotionEvents_default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
    var getEventHandlers = function getEventHandlers2(targetStatus) {
        switch(targetStatus){
            case STATUS_APPEAR:
                return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onAppearPrepare), STEP_START, onAppearStart), STEP_ACTIVE, onAppearActive);
            case STATUS_ENTER:
                return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onEnterPrepare), STEP_START, onEnterStart), STEP_ACTIVE, onEnterActive);
            case STATUS_LEAVE:
                return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onLeavePrepare), STEP_START, onLeaveStart), STEP_ACTIVE, onLeaveActive);
            default:
                return {};
        }
    };
    var eventHandlers = React28.useMemo(function() {
        return getEventHandlers(currentStatus);
    }, [
        currentStatus
    ]);
    var _useStepQueue = useStepQueue_default(currentStatus, !supportMotion, function(newStep) {
        if (newStep === STEP_PREPARE) {
            var onPrepare = eventHandlers[STEP_PREPARE];
            if (!onPrepare) {
                return SkipStep;
            }
            return onPrepare(getDomElement());
        }
        if (step in eventHandlers) {
            var _eventHandlers$step;
            setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
        }
        if (step === STEP_ACTIVE && currentStatus !== STATUS_NONE) {
            patchMotionEvents(getDomElement());
            if (motionDeadline > 0) {
                clearTimeout(deadlineRef.current);
                deadlineRef.current = setTimeout(function() {
                    onInternalMotionEnd({
                        deadline: true
                    });
                }, motionDeadline);
            }
        }
        if (step === STEP_PREPARED) {
            updateMotionEndStatus();
        }
        return DoStep;
    }), _useStepQueue2 = _slicedToArray(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
    var active = isActive(step);
    activeRef.current = active;
    var visibleRef = (0, import_react17.useRef)(null);
    useIsomorphicLayoutEffect_default(function() {
        if (mountedRef.current && visibleRef.current === visible) {
            return;
        }
        setAsyncVisible(visible);
        var isMounted = mountedRef.current;
        mountedRef.current = true;
        var nextStatus;
        if (!isMounted && visible && motionAppear) {
            nextStatus = STATUS_APPEAR;
        }
        if (isMounted && visible && motionEnter) {
            nextStatus = STATUS_ENTER;
        }
        if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
            nextStatus = STATUS_LEAVE;
        }
        var nextEventHandlers = getEventHandlers(nextStatus);
        if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
            setStatus(nextStatus);
            startStep();
        } else {
            setStatus(STATUS_NONE);
        }
        visibleRef.current = visible;
    }, [
        visible
    ]);
    (0, import_react17.useEffect)(function() {
        if (// Cancel appear
        currentStatus === STATUS_APPEAR && !motionAppear || // Cancel enter
        currentStatus === STATUS_ENTER && !motionEnter || // Cancel leave
        currentStatus === STATUS_LEAVE && !motionLeave) {
            setStatus(STATUS_NONE);
        }
    }, [
        motionAppear,
        motionEnter,
        motionLeave
    ]);
    (0, import_react17.useEffect)(function() {
        return function() {
            mountedRef.current = false;
            clearTimeout(deadlineRef.current);
        };
    }, []);
    var firstMountChangeRef = React28.useRef(false);
    (0, import_react17.useEffect)(function() {
        if (asyncVisible) {
            firstMountChangeRef.current = true;
        }
        if (asyncVisible !== void 0 && currentStatus === STATUS_NONE) {
            if (firstMountChangeRef.current || asyncVisible) {
                onVisibleChanged === null || onVisibleChanged === void 0 || onVisibleChanged(asyncVisible);
            }
            firstMountChangeRef.current = true;
        }
    }, [
        asyncVisible,
        currentStatus
    ]);
    var mergedStyle = style2;
    if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
        mergedStyle = _objectSpread2({
            transition: "none"
        }, mergedStyle);
    }
    return [
        currentStatus,
        step,
        mergedStyle,
        asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible
    ];
}
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/CSSMotion.js
function genCSSMotion(config) {
    var transitionSupport = config;
    if (_typeof(config) === "object") {
        transitionSupport = config.transitionSupport;
    }
    function isSupportTransition(props, contextMotion) {
        return !!(props.motionName && transitionSupport && contextMotion !== false);
    }
    var CSSMotion = /* @__PURE__ */ React29.forwardRef(function(props, ref) {
        var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
        var _React$useContext = React29.useContext(Context), contextMotion = _React$useContext.motion;
        var supportMotion = isSupportTransition(props, contextMotion);
        var nodeRef = (0, import_react18.useRef)();
        var wrapperNodeRef = (0, import_react18.useRef)();
        function getDomElement() {
            try {
                return _instanceof(nodeRef.current, HTMLElement) ? nodeRef.current : findDOMNode(wrapperNodeRef.current);
            } catch (e) {
                return null;
            }
        }
        var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
        var renderedRef = React29.useRef(mergedVisible);
        if (mergedVisible) {
            renderedRef.current = true;
        }
        var setNodeRef = React29.useCallback(function(node2) {
            nodeRef.current = node2;
            fillRef(ref, node2);
        }, [
            ref
        ]);
        var motionChildren;
        var mergedProps = _objectSpread2(_objectSpread2({}, eventProps), {}, {
            visible: visible
        });
        if (!children) {
            motionChildren = null;
        } else if (status === STATUS_NONE) {
            if (mergedVisible) {
                motionChildren = children(_objectSpread2({}, mergedProps), setNodeRef);
            } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
                motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
                    className: leavedClassName
                }), setNodeRef);
            } else if (forceRender || !removeOnLeave && !leavedClassName) {
                motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
                    style: {
                        display: "none"
                    }
                }), setNodeRef);
            } else {
                motionChildren = null;
            }
        } else {
            var statusSuffix;
            if (statusStep === STEP_PREPARE) {
                statusSuffix = "prepare";
            } else if (isActive(statusStep)) {
                statusSuffix = "active";
            } else if (statusStep === STEP_START) {
                statusSuffix = "start";
            }
            var motionCls = getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix));
            motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
                className: (0, import_classnames.default)(getTransitionName(motionName, status), _defineProperty(_defineProperty({}, motionCls, motionCls && statusSuffix), motionName, typeof motionName === "string")),
                style: statusStyle
            }), setNodeRef);
        }
        if (/* @__PURE__ */ React29.isValidElement(motionChildren) && supportRef(motionChildren)) {
            var originNodeRef = getNodeRef(motionChildren);
            if (!originNodeRef) {
                motionChildren = /* @__PURE__ */ React29.cloneElement(motionChildren, {
                    ref: setNodeRef
                });
            }
        }
        return /* @__PURE__ */ React29.createElement(DomWrapper_default, {
            ref: wrapperNodeRef
        }, motionChildren);
    });
    CSSMotion.displayName = "CSSMotion";
    return CSSMotion;
}
var CSSMotion_default = genCSSMotion(supportTransition);
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/CSSMotionList.js
var React30 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/util/diff.js
var STATUS_ADD = "add";
var STATUS_KEEP = "keep";
var STATUS_REMOVE = "remove";
var STATUS_REMOVED = "removed";
function wrapKeyToObject(key) {
    var keyObj;
    if (key && _typeof(key) === "object" && "key" in key) {
        keyObj = key;
    } else {
        keyObj = {
            key: key
        };
    }
    return _objectSpread2(_objectSpread2({}, keyObj), {}, {
        key: String(keyObj.key)
    });
}
function parseKeys() {
    var keys2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return keys2.map(wrapKeyToObject);
}
function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys);
    prevKeyObjects.forEach(function(keyObj) {
        var hit = false;
        for(var i = currentIndex; i < currentLen; i += 1){
            var currentKeyObj = currentKeyObjects[i];
            if (currentKeyObj.key === keyObj.key) {
                if (currentIndex < i) {
                    list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function(obj) {
                        return _objectSpread2(_objectSpread2({}, obj), {}, {
                            status: STATUS_ADD
                        });
                    }));
                    currentIndex = i;
                }
                list.push(_objectSpread2(_objectSpread2({}, currentKeyObj), {}, {
                    status: STATUS_KEEP
                }));
                currentIndex += 1;
                hit = true;
                break;
            }
        }
        if (!hit) {
            list.push(_objectSpread2(_objectSpread2({}, keyObj), {}, {
                status: STATUS_REMOVE
            }));
        }
    });
    if (currentIndex < currentLen) {
        list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
            return _objectSpread2(_objectSpread2({}, obj), {}, {
                status: STATUS_ADD
            });
        }));
    }
    var keys2 = {};
    list.forEach(function(_ref) {
        var key = _ref.key;
        keys2[key] = (keys2[key] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys2).filter(function(key) {
        return keys2[key] > 1;
    });
    duplicatedKeys.forEach(function(matchKey) {
        list = list.filter(function(_ref2) {
            var key = _ref2.key, status = _ref2.status;
            return key !== matchKey || status !== STATUS_REMOVE;
        });
        list.forEach(function(node2) {
            if (node2.key === matchKey) {
                node2.status = STATUS_KEEP;
            }
        });
    });
    return list;
}
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/CSSMotionList.js
var _excluded2 = [
    "component",
    "children",
    "onVisibleChanged",
    "onAllRemoved"
];
var _excluded22 = [
    "status"
];
var MOTION_PROP_NAMES = [
    "eventProps",
    "visible",
    "children",
    "motionName",
    "motionAppear",
    "motionEnter",
    "motionLeave",
    "motionLeaveImmediately",
    "motionDeadline",
    "removeOnLeave",
    "leavedClassName",
    "onAppearPrepare",
    "onAppearStart",
    "onAppearActive",
    "onAppearEnd",
    "onEnterStart",
    "onEnterActive",
    "onEnterEnd",
    "onLeaveStart",
    "onLeaveActive",
    "onLeaveEnd"
];
function genCSSMotionList(transitionSupport) {
    var CSSMotion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion_default;
    var CSSMotionList = /* @__PURE__ */ function(_React$Component) {
        _inherits(CSSMotionList2, _React$Component);
        var _super = _createSuper(CSSMotionList2);
        function CSSMotionList2() {
            var _this;
            _classCallCheck(this, CSSMotionList2);
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [
                this
            ].concat(args));
            _defineProperty(_assertThisInitialized(_this), "state", {
                keyEntities: []
            });
            _defineProperty(_assertThisInitialized(_this), "removeKey", function(removeKey) {
                _this.setState(function(prevState) {
                    var nextKeyEntities = prevState.keyEntities.map(function(entity) {
                        if (entity.key !== removeKey) return entity;
                        return _objectSpread2(_objectSpread2({}, entity), {}, {
                            status: STATUS_REMOVED
                        });
                    });
                    return {
                        keyEntities: nextKeyEntities
                    };
                }, function() {
                    var keyEntities = _this.state.keyEntities;
                    var restKeysCount = keyEntities.filter(function(_ref) {
                        var status = _ref.status;
                        return status !== STATUS_REMOVED;
                    }).length;
                    if (restKeysCount === 0 && _this.props.onAllRemoved) {
                        _this.props.onAllRemoved();
                    }
                });
            });
            return _this;
        }
        _createClass(CSSMotionList2, [
            {
                key: "render",
                value: function render2() {
                    var _this2 = this;
                    var keyEntities = this.state.keyEntities;
                    var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded2);
                    var Component3 = component || React30.Fragment;
                    var motionProps = {};
                    MOTION_PROP_NAMES.forEach(function(prop) {
                        motionProps[prop] = restProps[prop];
                        delete restProps[prop];
                    });
                    delete restProps.keys;
                    return /* @__PURE__ */ React30.createElement(Component3, restProps, keyEntities.map(function(_ref2, index) {
                        var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded22);
                        var visible = status === STATUS_ADD || status === STATUS_KEEP;
                        return /* @__PURE__ */ React30.createElement(CSSMotion, _extends({}, motionProps, {
                            key: eventProps.key,
                            visible: visible,
                            eventProps: eventProps,
                            onVisibleChanged: function onVisibleChanged(changedVisible) {
                                _onVisibleChanged === null || _onVisibleChanged === void 0 || _onVisibleChanged(changedVisible, {
                                    key: eventProps.key
                                });
                                if (!changedVisible) {
                                    _this2.removeKey(eventProps.key);
                                }
                            }
                        }), function(props, ref) {
                            return children(_objectSpread2(_objectSpread2({}, props), {}, {
                                index: index
                            }), ref);
                        });
                    }));
                }
            }
        ], [
            {
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(_ref3, _ref4) {
                    var keys2 = _ref3.keys;
                    var keyEntities = _ref4.keyEntities;
                    var parsedKeyObjects = parseKeys(keys2);
                    var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
                    return {
                        keyEntities: mixedKeyEntities.filter(function(entity) {
                            var prevEntity = keyEntities.find(function(_ref5) {
                                var key = _ref5.key;
                                return entity.key === key;
                            });
                            if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
                                return false;
                            }
                            return true;
                        })
                    };
                }
            }
        ]);
        return CSSMotionList2;
    }(React30.Component);
    _defineProperty(CSSMotionList, "defaultProps", {
        component: "div"
    });
    return CSSMotionList;
}
var CSSMotionList_default = genCSSMotionList(supportTransition);
// ../../node_modules/.pnpm/rc-motion@2.9.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-motion/es/index.js
var es_default = CSSMotion_default;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/MotionWrapper.js
function MotionWrapper(props) {
    var children = props.children;
    var _useToken = _sliced_to_array(useToken(), 2), token2 = _useToken[1];
    var motion = token2.motion;
    var needWrapMotionProviderRef = React31.useRef(false);
    needWrapMotionProviderRef.current = needWrapMotionProviderRef.current || motion === false;
    if (needWrapMotionProviderRef.current) {
        return /* @__PURE__ */ React31.createElement(MotionProvider, {
            motion: motion
        }, children);
    }
    return children;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/PropWarning.js
var React32 = __toESM(require("react"));
var PropWarning = /* @__PURE__ */ React32.memo(function(_ref) {
    var dropdownMatchSelectWidth = _ref.dropdownMatchSelectWidth;
    var warning4 = devUseWarning("ConfigProvider");
    warning4.deprecated(dropdownMatchSelectWidth === void 0, "dropdownMatchSelectWidth", "popupMatchSelectWidth");
    return null;
});
if (process.env.NODE_ENV !== "production") {
    PropWarning.displayName = "PropWarning";
}
var PropWarning_default = process.env.NODE_ENV !== "production" ? PropWarning : function() {
    return null;
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/index.js
var __rest3 = function __rest3(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var existThemeConfig = false;
var warnContext = process.env.NODE_ENV !== "production" ? function(componentName) {
    process.env.NODE_ENV !== "production" ? warning_default2(!existThemeConfig, componentName, "Static function can not consume context like dynamic theme. Please use 'App' component instead.") : void 0;
} : /* istanbul ignore next */ null;
var PASSED_PROPS = [
    "getTargetContainer",
    "getPopupContainer",
    "renderEmpty",
    "input",
    "pagination",
    "form",
    "select",
    "button"
];
var globalPrefixCls;
var globalIconPrefixCls;
var globalTheme;
var globalHolderRender;
function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls;
}
function isLegacyTheme(theme) {
    return Object.keys(theme).some(function(key) {
        return key.endsWith("Color");
    });
}
var setGlobalConfig = function(props) {
    var prefixCls = props.prefixCls, iconPrefixCls = props.iconPrefixCls, theme = props.theme, holderRender = props.holderRender;
    if (prefixCls !== void 0) {
        globalPrefixCls = prefixCls;
    }
    if (iconPrefixCls !== void 0) {
        globalIconPrefixCls = iconPrefixCls;
    }
    if ("holderRender" in props) {
        globalHolderRender = holderRender;
    }
    if (theme) {
        if (isLegacyTheme(theme)) {
            process.env.NODE_ENV !== "production" ? warning_default2(false, "ConfigProvider", "`config` of css variable theme is not work in v5. Please use new `theme` config instead.") : void 0;
            registerTheme(getGlobalPrefixCls(), theme);
        } else {
            globalTheme = theme;
        }
    }
};
var ProviderChildren = function(props) {
    var children = props.children, customCsp = props.csp, autoInsertSpaceInButton = props.autoInsertSpaceInButton, alert = props.alert, anchor = props.anchor, form = props.form, locale5 = props.locale, componentSize = props.componentSize, direction = props.direction, space = props.space, splitter = props.splitter, virtual = props.virtual, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, popupMatchSelectWidth = props.popupMatchSelectWidth, popupOverflow = props.popupOverflow, legacyLocale = props.legacyLocale, parentContext = props.parentContext, customIconPrefixCls = props.iconPrefixCls, theme = props.theme, componentDisabled = props.componentDisabled, segmented = props.segmented, statistic2 = props.statistic, spin = props.spin, calendar = props.calendar, carousel = props.carousel, cascader = props.cascader, collapse = props.collapse, typography = props.typography, checkbox = props.checkbox, descriptions = props.descriptions, divider = props.divider, drawer = props.drawer, skeleton = props.skeleton, steps = props.steps, image = props.image, layout = props.layout, list = props.list, mentions = props.mentions, modal = props.modal, progress = props.progress, result = props.result, slider = props.slider, breadcrumb = props.breadcrumb, menu = props.menu, pagination = props.pagination, input = props.input, textArea = props.textArea, empty = props.empty, badge = props.badge, radio = props.radio, rate = props.rate, SWITCH = props.switch, transfer = props.transfer, avatar = props.avatar, message = props.message, tag = props.tag, table = props.table, card = props.card, tabs = props.tabs, timeline = props.timeline, timePicker = props.timePicker, upload = props.upload, notification = props.notification, tree = props.tree, colorPicker = props.colorPicker, datePicker = props.datePicker, rangePicker = props.rangePicker, flex = props.flex, wave = props.wave, dropdown = props.dropdown, warningConfig = props.warning, tour = props.tour, tooltip = props.tooltip, popover = props.popover, popconfirm = props.popconfirm, floatButtonGroup = props.floatButtonGroup, variant = props.variant, inputNumber = props.inputNumber, treeSelect = props.treeSelect;
    var getPrefixCls = React33.useCallback(function(suffixCls, customizePrefixCls) {
        var prefixCls = props.prefixCls;
        if (customizePrefixCls) {
            return customizePrefixCls;
        }
        var mergedPrefixCls = prefixCls || parentContext.getPrefixCls("");
        return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [
        parentContext.getPrefixCls,
        props.prefixCls
    ]);
    var iconPrefixCls = customIconPrefixCls || parentContext.iconPrefixCls || defaultIconPrefixCls;
    var csp = customCsp || parentContext.csp;
    useResetIconStyle_default(iconPrefixCls, csp);
    var mergedTheme = useTheme(theme, parentContext.theme, {
        prefixCls: getPrefixCls("")
    });
    if (process.env.NODE_ENV !== "production") {
        existThemeConfig = existThemeConfig || !!mergedTheme;
    }
    var baseConfig = {
        csp: csp,
        autoInsertSpaceInButton: autoInsertSpaceInButton,
        alert: alert,
        anchor: anchor,
        locale: locale5 || legacyLocale,
        direction: direction,
        space: space,
        splitter: splitter,
        virtual: virtual,
        popupMatchSelectWidth: popupMatchSelectWidth !== null && popupMatchSelectWidth !== void 0 ? popupMatchSelectWidth : dropdownMatchSelectWidth,
        popupOverflow: popupOverflow,
        getPrefixCls: getPrefixCls,
        iconPrefixCls: iconPrefixCls,
        theme: mergedTheme,
        segmented: segmented,
        statistic: statistic2,
        spin: spin,
        calendar: calendar,
        carousel: carousel,
        cascader: cascader,
        collapse: collapse,
        typography: typography,
        checkbox: checkbox,
        descriptions: descriptions,
        divider: divider,
        drawer: drawer,
        skeleton: skeleton,
        steps: steps,
        image: image,
        input: input,
        textArea: textArea,
        layout: layout,
        list: list,
        mentions: mentions,
        modal: modal,
        progress: progress,
        result: result,
        slider: slider,
        breadcrumb: breadcrumb,
        menu: menu,
        pagination: pagination,
        empty: empty,
        badge: badge,
        radio: radio,
        rate: rate,
        switch: SWITCH,
        transfer: transfer,
        avatar: avatar,
        message: message,
        tag: tag,
        table: table,
        card: card,
        tabs: tabs,
        timeline: timeline,
        timePicker: timePicker,
        upload: upload,
        notification: notification,
        tree: tree,
        colorPicker: colorPicker,
        datePicker: datePicker,
        rangePicker: rangePicker,
        flex: flex,
        wave: wave,
        dropdown: dropdown,
        warning: warningConfig,
        tour: tour,
        tooltip: tooltip,
        popover: popover,
        popconfirm: popconfirm,
        floatButtonGroup: floatButtonGroup,
        variant: variant,
        inputNumber: inputNumber,
        treeSelect: treeSelect
    };
    if (process.env.NODE_ENV !== "production") {
        var warningFn = devUseWarning("ConfigProvider");
        warningFn(!("autoInsertSpaceInButton" in props), "deprecated", "`autoInsertSpaceInButton` is deprecated. Please use `{ button: { autoInsertSpace: boolean }}` instead.");
    }
    var config = Object.assign({}, parentContext);
    Object.keys(baseConfig).forEach(function(key) {
        if (baseConfig[key] !== void 0) {
            config[key] = baseConfig[key];
        }
    });
    PASSED_PROPS.forEach(function(propName) {
        var propValue = props[propName];
        if (propValue) {
            config[propName] = propValue;
        }
    });
    if (typeof autoInsertSpaceInButton !== "undefined") {
        config.button = Object.assign({
            autoInsertSpace: autoInsertSpaceInButton
        }, config.button);
    }
    var memoedConfig = useMemo(function() {
        return config;
    }, config, function(prevConfig, currentConfig) {
        var prevKeys = Object.keys(prevConfig);
        var currentKeys = Object.keys(currentConfig);
        return prevKeys.length !== currentKeys.length || prevKeys.some(function(key) {
            return prevConfig[key] !== currentConfig[key];
        });
    });
    var layer = React33.useContext(StyleContext_default).layer;
    var memoIconContextValue = React33.useMemo(function() {
        return {
            prefixCls: iconPrefixCls,
            csp: csp,
            layer: layer ? "antd" : void 0
        };
    }, [
        iconPrefixCls,
        csp,
        layer
    ]);
    var childNode = /* @__PURE__ */ React33.createElement(React33.Fragment, null, /* @__PURE__ */ React33.createElement(PropWarning_default, {
        dropdownMatchSelectWidth: dropdownMatchSelectWidth
    }), children);
    var validateMessages = React33.useMemo(function() {
        var _a, _b, _c, _d;
        return merge(((_a = en_US_default6.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || {}, ((_c = (_b = memoedConfig.locale) === null || _b === void 0 ? void 0 : _b.Form) === null || _c === void 0 ? void 0 : _c.defaultValidateMessages) || {}, ((_d = memoedConfig.form) === null || _d === void 0 ? void 0 : _d.validateMessages) || {}, (form === null || form === void 0 ? void 0 : form.validateMessages) || {});
    }, [
        memoedConfig,
        form === null || form === void 0 ? void 0 : form.validateMessages
    ]);
    if (Object.keys(validateMessages).length > 0) {
        childNode = /* @__PURE__ */ React33.createElement(validateMessagesContext_default.Provider, {
            value: validateMessages
        }, childNode);
    }
    if (locale5) {
        childNode = /* @__PURE__ */ React33.createElement(locale_default, {
            locale: locale5,
            _ANT_MARK__: ANT_MARK
        }, childNode);
    }
    if (iconPrefixCls || csp) {
        childNode = /* @__PURE__ */ React33.createElement(Context_default.Provider, {
            value: memoIconContextValue
        }, childNode);
    }
    if (componentSize) {
        childNode = /* @__PURE__ */ React33.createElement(SizeContextProvider, {
            size: componentSize
        }, childNode);
    }
    childNode = /* @__PURE__ */ React33.createElement(MotionWrapper, null, childNode);
    var memoTheme = React33.useMemo(function() {
        var _a = mergedTheme || {}, algorithm = _a.algorithm, token2 = _a.token, components = _a.components, cssVar = _a.cssVar, rest = __rest3(_a, [
            "algorithm",
            "token",
            "components",
            "cssVar"
        ]);
        var themeObj = algorithm && (!Array.isArray(algorithm) || algorithm.length > 0) ? createTheme(algorithm) : theme_default;
        var parsedComponents = {};
        Object.entries(components || {}).forEach(function(_ref) {
            var _$_ref = _sliced_to_array(_ref, 2), componentName = _$_ref[0], componentToken = _$_ref[1];
            var parsedToken = Object.assign({}, componentToken);
            if ("algorithm" in parsedToken) {
                if (parsedToken.algorithm === true) {
                    parsedToken.theme = themeObj;
                } else if (Array.isArray(parsedToken.algorithm) || typeof parsedToken.algorithm === "function") {
                    parsedToken.theme = createTheme(parsedToken.algorithm);
                }
                delete parsedToken.algorithm;
            }
            parsedComponents[componentName] = parsedToken;
        });
        var mergedToken = Object.assign(Object.assign({}, seed_default), token2);
        return Object.assign(Object.assign({}, rest), {
            theme: themeObj,
            token: mergedToken,
            components: parsedComponents,
            override: Object.assign({
                override: mergedToken
            }, parsedComponents),
            cssVar: cssVar
        });
    }, [
        mergedTheme
    ]);
    if (theme) {
        childNode = /* @__PURE__ */ React33.createElement(DesignTokenContext.Provider, {
            value: memoTheme
        }, childNode);
    }
    if (memoedConfig.warning) {
        childNode = /* @__PURE__ */ React33.createElement(WarningContext.Provider, {
            value: memoedConfig.warning
        }, childNode);
    }
    if (componentDisabled !== void 0) {
        childNode = /* @__PURE__ */ React33.createElement(DisabledContextProvider, {
            disabled: componentDisabled
        }, childNode);
    }
    return /* @__PURE__ */ React33.createElement(ConfigContext.Provider, {
        value: memoedConfig
    }, childNode);
};
var ConfigProvider = function(props) {
    var context = React33.useContext(ConfigContext);
    var antLocale = React33.useContext(context_default);
    return /* @__PURE__ */ React33.createElement(ProviderChildren, Object.assign({
        parentContext: context,
        legacyLocale: antLocale
    }, props));
};
ConfigProvider.ConfigContext = ConfigContext;
ConfigProvider.SizeContext = SizeContext_default;
ConfigProvider.config = setGlobalConfig;
ConfigProvider.useConfig = useConfig_default;
Object.defineProperty(ConfigProvider, "SizeContext", {
    get: function() {
        process.env.NODE_ENV !== "production" ? warning_default2(false, "ConfigProvider", "ConfigProvider.SizeContext is deprecated. Please use `ConfigProvider.useConfig().componentSize` instead.") : void 0;
        return SizeContext_default;
    }
});
if (process.env.NODE_ENV !== "production") {
    ConfigProvider.displayName = "ConfigProvider";
}
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/AntdIcon.js
var React36 = __toESM(require("react"));
var import_classnames2 = __toESM(require_classnames());
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/IconBase.js
var React35 = __toESM(require("react"));
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/shadow.js
function getRoot(ele) {
    var _ele$getRootNode;
    return ele === null || ele === void 0 || (_ele$getRootNode = ele.getRootNode) === null || _ele$getRootNode === void 0 ? void 0 : _ele$getRootNode.call(ele);
}
function inShadow(ele) {
    return _instanceof(getRoot(ele), ShadowRoot);
}
function getShadowRoot(ele) {
    return inShadow(ele) ? getRoot(ele) : null;
}
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/utils.js
var import_react19 = __toESM(require("react"));
function camelCase(input) {
    return input.replace(/-(.)/g, function(match, g) {
        return g.toUpperCase();
    });
}
function warning3(valid, message) {
    warning_default(valid, "[@ant-design/icons] ".concat(message));
}
function isIconDefinition(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
}
function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key) {
        var val = attrs[key];
        switch(key){
            case "class":
                acc.className = val;
                delete acc.class;
                break;
            default:
                delete acc[key];
                acc[camelCase(key)] = val;
        }
        return acc;
    }, {});
}
function generate2(node2, key, rootProps) {
    if (!rootProps) {
        return /* @__PURE__ */ import_react19.default.createElement(node2.tag, _objectSpread2({
            key: key
        }, normalizeAttrs(node2.attrs)), (node2.children || []).map(function(child, index) {
            return generate2(child, "".concat(key, "-").concat(node2.tag, "-").concat(index));
        }));
    }
    return /* @__PURE__ */ import_react19.default.createElement(node2.tag, _objectSpread2(_objectSpread2({
        key: key
    }, normalizeAttrs(node2.attrs)), rootProps), (node2.children || []).map(function(child, index) {
        return generate2(child, "".concat(key, "-").concat(node2.tag, "-").concat(index));
    }));
}
function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
        return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [
        twoToneColor
    ];
}
var iconStyles = "\n.anticon {\n  display: inline-flex;\n  align-items: center;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
var useInsertStyles = function useInsertStyles2(eleRef) {
    var _useContext = (0, import_react19.useContext)(Context_default), csp = _useContext.csp, prefixCls = _useContext.prefixCls, layer = _useContext.layer;
    var mergedStyleStr = iconStyles;
    if (prefixCls) {
        mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);
    }
    if (layer) {
        mergedStyleStr = "@layer ".concat(layer, " {\n").concat(mergedStyleStr, "\n}");
    }
    (0, import_react19.useEffect)(function() {
        var ele = eleRef.current;
        var shadowRoot = getShadowRoot(ele);
        updateCSS(mergedStyleStr, "@ant-design-icons", {
            prepend: !layer,
            csp: csp,
            attachTo: shadowRoot
        });
    }, []);
};
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/IconBase.js
var _excluded3 = [
    "icon",
    "className",
    "onClick",
    "style",
    "primaryColor",
    "secondaryColor"
];
var twoToneColorPalette = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
};
function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
}
var IconBase = function IconBase2(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style2 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded3);
    var svgRef = React35.useRef();
    var colors = twoToneColorPalette;
    if (primaryColor) {
        colors = {
            primaryColor: primaryColor,
            secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
        };
    }
    useInsertStyles(svgRef);
    warning3(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition(icon)) {
        return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
        target = _objectSpread2(_objectSpread2({}, target), {}, {
            icon: target.icon(colors.primaryColor, colors.secondaryColor)
        });
    }
    return generate2(target.icon, "svg-".concat(target.name), _objectSpread2(_objectSpread2({
        className: className,
        onClick: onClick,
        style: style2,
        "data-icon": target.name,
        width: "1em",
        height: "1em",
        fill: "currentColor",
        "aria-hidden": "true"
    }, restProps), {}, {
        ref: svgRef
    }));
};
IconBase.displayName = "IconReact";
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
var IconBase_default = IconBase;
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default.setTwoToneColors({
        primaryColor: primaryColor,
        secondaryColor: secondaryColor
    });
}
function getTwoToneColor() {
    var colors = IconBase_default.getTwoToneColors();
    if (!colors.calculated) {
        return colors.primaryColor;
    }
    return [
        colors.primaryColor,
        colors.secondaryColor
    ];
}
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/components/AntdIcon.js
var _excluded4 = [
    "className",
    "icon",
    "spin",
    "rotate",
    "tabIndex",
    "onClick",
    "twoToneColor"
];
setTwoToneColor(blue.primary);
var Icon = /* @__PURE__ */ React36.forwardRef(function(props, ref) {
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded4);
    var _React$useContext = React36.useContext(Context_default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
    var classString = (0, import_classnames2.default)(rootClassName, prefixCls, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
        iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
        msTransform: "rotate(".concat(rotate, "deg)"),
        transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React36.createElement("span", _extends({
        role: "img",
        "aria-label": icon.name
    }, restProps, {
        ref: ref,
        tabIndex: iconTabIndex,
        onClick: onClick,
        className: classString
    }), /* @__PURE__ */ React36.createElement(IconBase_default, {
        icon: icon,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        style: svgStyle
    }));
});
Icon.displayName = "AntdIcon";
Icon.getTwoToneColor = getTwoToneColor;
Icon.setTwoToneColor = setTwoToneColor;
var AntdIcon_default = Icon;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/reactNode.js
var import_react20 = __toESM(require("react"));
function isFragment2(child) {
    return child && /* @__PURE__ */ import_react20.default.isValidElement(child) && child.type === import_react20.default.Fragment;
}
var replaceElement = function(element, replacement, props) {
    if (!/* @__PURE__ */ import_react20.default.isValidElement(element)) {
        return replacement;
    }
    return /* @__PURE__ */ import_react20.default.cloneElement(element, typeof props === "function" ? props(element.props || {}) : props);
};
function cloneElement2(element, props) {
    return replaceElement(element, element, props);
}
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
var React38 = __toESM(require("react"));
// ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LoadingOutlined.js
var LoadingOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "0 0 1024 1024",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                }
            }
        ]
    },
    "name": "loading",
    "theme": "outlined"
};
var LoadingOutlined_default = LoadingOutlined;
// ../../node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
var LoadingOutlined2 = function LoadingOutlined3(props, ref) {
    return /* @__PURE__ */ React38.createElement(AntdIcon_default, _extends({}, props, {
        ref: ref,
        icon: LoadingOutlined_default
    }));
};
var RefIcon = /* @__PURE__ */ React38.forwardRef(LoadingOutlined2);
if (process.env.NODE_ENV !== "production") {
    RefIcon.displayName = "LoadingOutlined";
}
var LoadingOutlined_default2 = RefIcon;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/UnstableContext.js
var React39 = __toESM(require("react"));
var ReactDOM3 = __toESM(require_react_dom());
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js
function _regeneratorRuntime() {
    "use strict";
    _regeneratorRuntime = function _regeneratorRuntime2() {
        return e;
    };
    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r2) {
        t2[e2] = r2.value;
    }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
    function define2(t2, e2, r2) {
        return Object.defineProperty(t2, e2, {
            value: r2,
            enumerable: true,
            configurable: true,
            writable: true
        }), t2[e2];
    }
    try {
        define2({}, "");
    } catch (t2) {
        define2 = function define3(t3, e2, r2) {
            return t3[e2] = r2;
        };
    }
    function wrap(t2, e2, r2, n2) {
        var i2 = e2 && _instanceof(e2.prototype, Generator) ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context2(n2 || []);
        return o(a2, "_invoke", {
            value: makeInvokeMethod(t2, r2, c2)
        }), a2;
    }
    function tryCatch(t2, e2, r2) {
        try {
            return {
                type: "normal",
                arg: t2.call(e2, r2)
            };
        } catch (t3) {
            return {
                type: "throw",
                arg: t3
            };
        }
    }
    e.wrap = wrap;
    var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define2(p, a, function() {
        return this;
    });
    var d = Object.getPrototypeOf, v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t2) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(e2) {
            define2(t2, e2, function(t3) {
                return this._invoke(e2, t3);
            });
        });
    }
    function AsyncIterator(t2, e2) {
        function invoke(r3, o2, i2, a2) {
            var c2 = tryCatch(t2[r3], t2, o2);
            if ("throw" !== c2.type) {
                var u2 = c2.arg, h2 = u2.value;
                return h2 && "object" == _typeof(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
                    invoke("next", t3, i2, a2);
                }, function(t3) {
                    invoke("throw", t3, i2, a2);
                }) : e2.resolve(h2).then(function(t3) {
                    u2.value = t3, i2(u2);
                }, function(t3) {
                    return invoke("throw", t3, i2, a2);
                });
            }
            a2(c2.arg);
        }
        var r2;
        o(this, "_invoke", {
            value: function value(t3, n2) {
                function callInvokeWithMethodAndArg() {
                    return new e2(function(e3, r3) {
                        invoke(t3, n2, e3, r3);
                    });
                }
                return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
        });
    }
    function makeInvokeMethod(e2, r2, n2) {
        var o2 = h;
        return function(i2, a2) {
            if (o2 === f) throw Error("Generator is already running");
            if (o2 === s) {
                if ("throw" === i2) throw a2;
                return {
                    value: t,
                    done: true
                };
            }
            for(n2.method = i2, n2.arg = a2;;){
                var c2 = n2.delegate;
                if (c2) {
                    var u2 = maybeInvokeDelegate(c2, n2);
                    if (u2) {
                        if (u2 === y) continue;
                        return u2;
                    }
                }
                if ("next" === n2.method) n2.sent = n2._sent = n2.arg;
                else if ("throw" === n2.method) {
                    if (o2 === h) throw o2 = s, n2.arg;
                    n2.dispatchException(n2.arg);
                } else "return" === n2.method && n2.abrupt("return", n2.arg);
                o2 = f;
                var p2 = tryCatch(e2, r2, n2);
                if ("normal" === p2.type) {
                    if (o2 = n2.done ? s : l, p2.arg === y) continue;
                    return {
                        value: p2.arg,
                        done: n2.done
                    };
                }
                "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
            }
        };
    }
    function maybeInvokeDelegate(e2, r2) {
        var n2 = r2.method, o2 = e2.iterator[n2];
        if (o2 === t) return r2.delegate = null, "throw" === n2 && e2.iterator["return"] && (r2.method = "return", r2.arg = t, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r2.arg);
        if ("throw" === i2.type) return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
    }
    function pushTryEntry(t2) {
        var e2 = {
            tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
    }
    function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
    }
    function Context2(t2) {
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ], t2.forEach(pushTryEntry, this), this.reset(true);
    }
    function values(e2) {
        if (e2 || "" === e2) {
            var r2 = e2[a];
            if (r2) return r2.call(e2);
            if ("function" == typeof e2.next) return e2;
            if (!isNaN(e2.length)) {
                var o2 = -1, i2 = function next2() {
                    for(; ++o2 < e2.length;)if (n.call(e2, o2)) return next2.value = e2[o2], next2.done = false, next2;
                    return next2.value = t, next2.done = true, next2;
                };
                return i2.next = i2;
            }
        }
        throw new TypeError(_typeof(e2) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
    }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
    }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
    }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define2(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
    }, e.awrap = function(t2) {
        return {
            __await: t2
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, c, function() {
        return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function(t2, r2, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator(wrap(t2, r2, n2, o2), i2);
        return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t3) {
            return t3.done ? t3.value : a2.next();
        });
    }, defineIteratorMethods(g), define2(g, u, "Generator"), define2(g, a, function() {
        return this;
    }), define2(g, "toString", function() {
        return "[object Generator]";
    }), e.keys = function(t2) {
        var e2 = Object(t2), r2 = [];
        for(var n2 in e2)r2.push(n2);
        return r2.reverse(), function next2() {
            for(; r2.length;){
                var t3 = r2.pop();
                if (t3 in e2) return next2.value = t3, next2.done = false, next2;
            }
            return next2.done = true, next2;
        };
    }, e.values = values, Context2.prototype = {
        constructor: Context2,
        reset: function reset(e2) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2) for(var r2 in this)"t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t);
        },
        stop: function stop() {
            this.done = true;
            var t2 = this.tryEntries[0].completion;
            if ("throw" === t2.type) throw t2.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(e2) {
            if (this.done) throw e2;
            var r2 = this;
            function handle(n2, o3) {
                return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t), !!o3;
            }
            for(var o2 = this.tryEntries.length - 1; o2 >= 0; --o2){
                var i2 = this.tryEntries[o2], a2 = i2.completion;
                if ("root" === i2.tryLoc) return handle("end");
                if (i2.tryLoc <= this.prev) {
                    var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
                    if (c2 && u2) {
                        if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                        if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
                    } else if (c2) {
                        if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                    } else {
                        if (!u2) throw Error("try statement without catch or finally");
                        if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(t2, e2) {
            for(var r2 = this.tryEntries.length - 1; r2 >= 0; --r2){
                var o2 = this.tryEntries[r2];
                if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
                    var i2 = o2;
                    break;
                }
            }
            i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
            var a2 = i2 ? i2.completion : {};
            return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
            if ("throw" === t2.type) throw t2.arg;
            return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
            for(var e2 = this.tryEntries.length - 1; e2 >= 0; --e2){
                var r2 = this.tryEntries[e2];
                if (r2.finallyLoc === t2) return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
            }
        },
        "catch": function _catch(t2) {
            for(var e2 = this.tryEntries.length - 1; e2 >= 0; --e2){
                var r2 = this.tryEntries[e2];
                if (r2.tryLoc === t2) {
                    var n2 = r2.completion;
                    if ("throw" === n2.type) {
                        var o2 = n2.arg;
                        resetTryEntry(r2);
                    }
                    return o2;
                }
            }
            throw Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r2, n2) {
            return this.delegate = {
                iterator: values(e2),
                resultName: r2,
                nextLoc: n2
            }, "next" === this.method && (this.arg = t), y;
        }
    }, e;
}
// ../../node_modules/.pnpm/@babel+runtime@7.26.9/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
        var i = n[a](c), u = i.value;
    } catch (n2) {
        return void e(n2);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
    return function() {
        var t = this, e = arguments;
        return new Promise(function(r, o) {
            var a = n.apply(t, e);
            function _next(n2) {
                asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
            }
            function _throw(n2) {
                asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
            }
            _next(void 0);
        });
    };
}
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/React/render.js
var ReactDOM2 = __toESM(require_react_dom());
var fullClone4 = _objectSpread2({}, ReactDOM2);
var version2 = fullClone4.version;
var reactRender = fullClone4.render;
var unmountComponentAtNode = fullClone4.unmountComponentAtNode;
var createRoot;
try {
    mainVersion = Number((version2 || "").split(".")[0]);
    if (mainVersion >= 18) {
        createRoot = fullClone4.createRoot;
    }
} catch (e) {}
var mainVersion;
function toggleWarning(skip) {
    var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
    }
}
var MARK = "__rc_react_root__";
function modernRender(node2, container) {
    toggleWarning(true);
    var root = container[MARK] || createRoot(container);
    toggleWarning(false);
    root.render(node2);
    container[MARK] = root;
}
function legacyRender(node2, container) {
    reactRender === null || reactRender === void 0 || reactRender(node2, container);
}
function render(node2, container) {
    if (createRoot) {
        modernRender(node2, container);
        return;
    }
    legacyRender(node2, container);
}
function modernUnmount(_x) {
    return _modernUnmount.apply(this, arguments);
}
function _modernUnmount() {
    _modernUnmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(container) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
            while(1)switch(_context.prev = _context.next){
                case 0:
                    return _context.abrupt("return", Promise.resolve().then(function() {
                        var _container$MARK;
                        (_container$MARK = container[MARK]) === null || _container$MARK === void 0 || _container$MARK.unmount();
                        delete container[MARK];
                    }));
                case 1:
                case "end":
                    return _context.stop();
            }
        }, _callee);
    }));
    return _modernUnmount.apply(this, arguments);
}
function legacyUnmount(container) {
    unmountComponentAtNode(container);
}
function unmount(_x2) {
    return _unmount.apply(this, arguments);
}
function _unmount() {
    _unmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(container) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while(1)switch(_context2.prev = _context2.next){
                case 0:
                    if (!(createRoot !== void 0)) {
                        _context2.next = 2;
                        break;
                    }
                    return _context2.abrupt("return", modernUnmount(container));
                case 2:
                    legacyUnmount(container);
                case 3:
                case "end":
                    return _context2.stop();
            }
        }, _callee2);
    }));
    return _unmount.apply(this, arguments);
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/UnstableContext.js
var defaultReactRender = function(node2, container) {
    if (process.env.NODE_ENV !== "production") {
        var majorVersion = parseInt(React39.version.split(".")[0], 10);
        var fullKeys = Object.keys(ReactDOM3);
        process.env.NODE_ENV !== "production" ? warning_default2(majorVersion < 19 || fullKeys.includes("createRoot"), "compatible", "antd v5 support React is 16 ~ 18. see https://u.ant.design/v5-for-19 for compatible.") : void 0;
    }
    render(node2, container);
    return function() {
        return unmount(container);
    };
};
var unstableRender = defaultReactRender;
function getReactRender() {
    return unstableRender;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/button.js
var import_react37 = __toESM(require("react"));
var import_classnames14 = __toESM(require_classnames());
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/omit.js
function omit(obj, fields) {
    var clone = Object.assign({}, obj);
    if (Array.isArray(fields)) {
        fields.forEach(function(key) {
            delete clone[key];
        });
    }
    return clone;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/index.js
var import_react21 = __toESM(require("react"));
var import_classnames4 = __toESM(require_classnames());
// ../../node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util/es/Dom/isVisible.js
var isVisible_default = function isVisible_default(element) {
    if (!element) {
        return false;
    }
    if (_instanceof(element, Element)) {
        if (element.offsetParent) {
            return true;
        }
        if (element.getBBox) {
            var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
            if (width || height) {
                return true;
            }
        }
        if (element.getBoundingClientRect) {
            var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
            if (_width || _height) {
                return true;
            }
        }
    }
    return false;
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/style.js
var genWaveStyle = function(token2) {
    var componentCls = token2.componentCls, colorPrimary = token2.colorPrimary;
    return _define_property({}, componentCls, {
        position: "absolute",
        background: "transparent",
        pointerEvents: "none",
        boxSizing: "border-box",
        color: "var(--wave-color, ".concat(colorPrimary, ")"),
        boxShadow: "0 0 0 0 currentcolor",
        opacity: 0.2,
        // =================== Motion ===================
        "&.wave-motion-appear": {
            transition: [
                "box-shadow 0.4s ".concat(token2.motionEaseOutCirc),
                "opacity 2s ".concat(token2.motionEaseOutCirc)
            ].join(","),
            "&-active": {
                boxShadow: "0 0 0 6px currentcolor",
                opacity: 0
            },
            "&.wave-quick": {
                transition: [
                    "box-shadow ".concat(token2.motionDurationSlow, " ").concat(token2.motionEaseInOut),
                    "opacity ".concat(token2.motionDurationSlow, " ").concat(token2.motionEaseInOut)
                ].join(",")
            }
        }
    });
};
var style_default = genComponentStyleHook("Wave", function(token2) {
    return [
        genWaveStyle(token2)
    ];
});
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/useWave.js
var React41 = __toESM(require("react"));
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/interface.js
var TARGET_CLS = "".concat(defaultPrefixCls, "-wave-target");
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/WaveEffect.js
var React40 = __toESM(require("react"));
var import_classnames3 = __toESM(require_classnames());
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/util.js
function isValidWaveColor(color) {
    return color && color !== "#fff" && color !== "#ffffff" && color !== "rgb(255, 255, 255)" && color !== "rgba(255, 255, 255, 1)" && !/rgba\((?:\d*, ){3}0\)/.test(color) && // any transparent rgba color
    color !== "transparent";
}
function getTargetWaveColor(node2) {
    var _getComputedStyle = getComputedStyle(node2), borderTopColor = _getComputedStyle.borderTopColor, borderColor = _getComputedStyle.borderColor, backgroundColor = _getComputedStyle.backgroundColor;
    if (isValidWaveColor(borderTopColor)) {
        return borderTopColor;
    }
    if (isValidWaveColor(borderColor)) {
        return borderColor;
    }
    if (isValidWaveColor(backgroundColor)) {
        return backgroundColor;
    }
    return null;
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/WaveEffect.js
function validateNum(value) {
    return Number.isNaN(value) ? 0 : value;
}
var WaveEffect = function(props) {
    var syncPos = function syncPos() {
        var nodeStyle = getComputedStyle(target);
        setWaveColor(getTargetWaveColor(target));
        var isStatic = nodeStyle.position === "static";
        var borderLeftWidth = nodeStyle.borderLeftWidth, borderTopWidth = nodeStyle.borderTopWidth;
        setLeft(isStatic ? target.offsetLeft : validateNum(-parseFloat(borderLeftWidth)));
        setTop(isStatic ? target.offsetTop : validateNum(-parseFloat(borderTopWidth)));
        setWidth(target.offsetWidth);
        setHeight(target.offsetHeight);
        var borderTopLeftRadius = nodeStyle.borderTopLeftRadius, borderTopRightRadius = nodeStyle.borderTopRightRadius, borderBottomLeftRadius = nodeStyle.borderBottomLeftRadius, borderBottomRightRadius = nodeStyle.borderBottomRightRadius;
        setBorderRadius([
            borderTopLeftRadius,
            borderTopRightRadius,
            borderBottomRightRadius,
            borderBottomLeftRadius
        ].map(function(radius) {
            return validateNum(parseFloat(radius));
        }));
    };
    var className = props.className, target = props.target, component = props.component, registerUnmount = props.registerUnmount;
    var divRef = React40.useRef(null);
    var unmountRef = React40.useRef(null);
    React40.useEffect(function() {
        unmountRef.current = registerUnmount();
    }, []);
    var _React40_useState = _sliced_to_array(React40.useState(null), 2), color = _React40_useState[0], setWaveColor = _React40_useState[1];
    var _React40_useState1 = _sliced_to_array(React40.useState([]), 2), borderRadius = _React40_useState1[0], setBorderRadius = _React40_useState1[1];
    var _React40_useState2 = _sliced_to_array(React40.useState(0), 2), left = _React40_useState2[0], setLeft = _React40_useState2[1];
    var _React40_useState3 = _sliced_to_array(React40.useState(0), 2), top = _React40_useState3[0], setTop = _React40_useState3[1];
    var _React40_useState4 = _sliced_to_array(React40.useState(0), 2), width = _React40_useState4[0], setWidth = _React40_useState4[1];
    var _React40_useState5 = _sliced_to_array(React40.useState(0), 2), height = _React40_useState5[0], setHeight = _React40_useState5[1];
    var _React40_useState6 = _sliced_to_array(React40.useState(false), 2), enabled = _React40_useState6[0], setEnabled = _React40_useState6[1];
    var waveStyle = {
        left: left,
        top: top,
        width: width,
        height: height,
        borderRadius: borderRadius.map(function(radius) {
            return "".concat(radius, "px");
        }).join(" ")
    };
    if (color) {
        waveStyle["--wave-color"] = color;
    }
    React40.useEffect(function() {
        if (target) {
            var id = raf_default(function() {
                syncPos();
                setEnabled(true);
            });
            var resizeObserver;
            if (typeof ResizeObserver !== "undefined") {
                resizeObserver = new ResizeObserver(syncPos);
                resizeObserver.observe(target);
            }
            return function() {
                raf_default.cancel(id);
                resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
            };
        }
    }, []);
    if (!enabled) {
        return null;
    }
    var isSmallComponent = (component === "Checkbox" || component === "Radio") && (target === null || target === void 0 ? void 0 : target.classList.contains(TARGET_CLS));
    return /* @__PURE__ */ React40.createElement(es_default, {
        visible: true,
        motionAppear: true,
        motionName: "wave-motion",
        motionDeadline: 5e3,
        onAppearEnd: function(_, event) {
            var _a, _b;
            if (event.deadline || event.propertyName === "opacity") {
                var holder = (_a = divRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
                (_b = unmountRef.current) === null || _b === void 0 ? void 0 : _b.call(unmountRef).then(function() {
                    holder === null || holder === void 0 ? void 0 : holder.remove();
                });
            }
            return false;
        }
    }, function(_ref, ref) {
        var motionClassName = _ref.className;
        return /* @__PURE__ */ React40.createElement("div", {
            ref: composeRef(divRef, ref),
            className: (0, import_classnames3.default)(className, motionClassName, {
                "wave-quick": isSmallComponent
            }),
            style: waveStyle
        });
    });
};
var showWaveEffect = function(target, info) {
    var registerUnmount = function registerUnmount() {
        return unmountCallback;
    };
    var _a;
    var component = info.component;
    if (component === "Checkbox" && !((_a = target.querySelector("input")) === null || _a === void 0 ? void 0 : _a.checked)) {
        return;
    }
    var holder = document.createElement("div");
    holder.style.position = "absolute";
    holder.style.left = "0px";
    holder.style.top = "0px";
    target === null || target === void 0 ? void 0 : target.insertBefore(holder, target === null || target === void 0 ? void 0 : target.firstChild);
    var reactRender2 = getReactRender();
    var unmountCallback = null;
    unmountCallback = reactRender2(/* @__PURE__ */ React40.createElement(WaveEffect, Object.assign({}, info, {
        target: target,
        registerUnmount: registerUnmount
    })), holder);
};
var WaveEffect_default = showWaveEffect;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/useWave.js
var useWave = function(nodeRef, className, component) {
    var wave = React41.useContext(ConfigContext).wave;
    var _useToken = _sliced_to_array(useToken(), 3), token2 = _useToken[1], hashId = _useToken[2];
    var showWave = useEvent(function(event) {
        var node2 = nodeRef.current;
        if ((wave === null || wave === void 0 ? void 0 : wave.disabled) || !node2) {
            return;
        }
        var targetNode = node2.querySelector(".".concat(TARGET_CLS)) || node2;
        var showEffect = (wave || {}).showEffect;
        (showEffect || WaveEffect_default)(targetNode, {
            className: className,
            token: token2,
            component: component,
            event: event,
            hashId: hashId
        });
    });
    var rafId = React41.useRef(null);
    var showDebounceWave = function(event) {
        raf_default.cancel(rafId.current);
        rafId.current = raf_default(function() {
            showWave(event);
        });
    };
    return showDebounceWave;
};
var useWave_default = useWave;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/_util/wave/index.js
var Wave = function(props) {
    var children = props.children, disabled = props.disabled, component = props.component;
    var getPrefixCls = (0, import_react21.useContext)(ConfigContext).getPrefixCls;
    var containerRef = (0, import_react21.useRef)(null);
    var prefixCls = getPrefixCls("wave");
    var _style_default = _sliced_to_array(style_default(prefixCls), 2), hashId = _style_default[1];
    var showWave = useWave_default(containerRef, (0, import_classnames4.default)(prefixCls, hashId), component);
    import_react21.default.useEffect(function() {
        var node2 = containerRef.current;
        if (!node2 || node2.nodeType !== 1 || disabled) {
            return;
        }
        var onClick = function(e) {
            if (!isVisible_default(e.target) || // No need wave
            !node2.getAttribute || node2.getAttribute("disabled") || node2.disabled || node2.className.includes("disabled") || node2.className.includes("-leave")) {
                return;
            }
            showWave(e);
        };
        node2.addEventListener("click", onClick, true);
        return function() {
            node2.removeEventListener("click", onClick, true);
        };
    }, [
        disabled
    ]);
    if (!/* @__PURE__ */ import_react21.default.isValidElement(children)) {
        return children !== null && children !== void 0 ? children : null;
    }
    var ref = supportRef(children) ? composeRef(getNodeRef(children), containerRef) : containerRef;
    return cloneElement2(children, {
        ref: ref
    });
};
if (process.env.NODE_ENV !== "production") {
    Wave.displayName = "Wave";
}
var wave_default = Wave;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/config-provider/hooks/useSize.js
var import_react22 = __toESM(require("react"));
var useSize = function(customSize) {
    var size = import_react22.default.useContext(SizeContext_default);
    var mergedSize = import_react22.default.useMemo(function() {
        if (!customSize) {
            return size;
        }
        if (typeof customSize === "string") {
            return customSize !== null && customSize !== void 0 ? customSize : size;
        }
        if (_instanceof(customSize, Function)) {
            return customSize(size);
        }
        return size;
    }, [
        customSize,
        size
    ]);
    return mergedSize;
};
var useSize_default = useSize;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/space/Compact.js
var React44 = __toESM(require("react"));
var import_classnames5 = __toESM(require_classnames());
var SpaceCompactItemContext = /* @__PURE__ */ React44.createContext(null);
var useCompactItemContext = function(prefixCls, direction) {
    var compactItemContext = React44.useContext(SpaceCompactItemContext);
    var compactItemClassnames = React44.useMemo(function() {
        if (!compactItemContext) {
            return "";
        }
        var compactDirection = compactItemContext.compactDirection, isFirstItem = compactItemContext.isFirstItem, isLastItem = compactItemContext.isLastItem;
        var separator = compactDirection === "vertical" ? "-vertical-" : "-";
        var _obj;
        return (0, import_classnames5.default)("".concat(prefixCls, "-compact").concat(separator, "item"), (_obj = {}, _define_property(_obj, "".concat(prefixCls, "-compact").concat(separator, "first-item"), isFirstItem), _define_property(_obj, "".concat(prefixCls, "-compact").concat(separator, "last-item"), isLastItem), _define_property(_obj, "".concat(prefixCls, "-compact").concat(separator, "item-rtl"), direction === "rtl"), _obj));
    }, [
        prefixCls,
        direction,
        compactItemContext
    ]);
    return {
        compactSize: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactSize,
        compactDirection: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactDirection,
        compactItemClassnames: compactItemClassnames
    };
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/button-group.js
var React45 = __toESM(require("react"));
var import_classnames6 = __toESM(require_classnames());
var __rest4 = function __rest4(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var GroupSizeContext = /* @__PURE__ */ React45.createContext(void 0);
var ButtonGroup = function(props) {
    var _React45_useContext = React45.useContext(ConfigContext), getPrefixCls = _React45_useContext.getPrefixCls, direction = _React45_useContext.direction;
    var customizePrefixCls = props.prefixCls, size = props.size, className = props.className, others = __rest4(props, [
        "prefixCls",
        "size",
        "className"
    ]);
    var prefixCls = getPrefixCls("btn-group", customizePrefixCls);
    var _useToken = _sliced_to_array(useToken(), 3), hashId = _useToken[2];
    var sizeCls = React45.useMemo(function() {
        switch(size){
            case "large":
                return "lg";
            case "small":
                return "sm";
            default:
                return "";
        }
    }, [
        size
    ]);
    if (process.env.NODE_ENV !== "production") {
        var warning4 = devUseWarning("Button.Group");
        warning4.deprecated(false, "Button.Group", "Space.Compact");
        process.env.NODE_ENV !== "production" ? warning4(!size || [
            "large",
            "small",
            "middle"
        ].includes(size), "usage", "Invalid prop `size`.") : void 0;
    }
    var _obj;
    var classes = (0, import_classnames6.default)(prefixCls, (_obj = {}, _define_property(_obj, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _define_property(_obj, "".concat(prefixCls, "-rtl"), direction === "rtl"), _obj), className, hashId);
    return /* @__PURE__ */ React45.createElement(GroupSizeContext.Provider, {
        value: size
    }, /* @__PURE__ */ React45.createElement("div", Object.assign({}, others, {
        className: classes
    })));
};
var button_group_default = ButtonGroup;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/buttonHelpers.js
var import_react23 = __toESM(require("react"));
var rxTwoCNChar = /^[\u4E00-\u9FA5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
function isString(str) {
    return typeof str === "string";
}
function isUnBorderedButtonVariant(type) {
    return type === "text" || type === "link";
}
function splitCNCharsBySpace(child, needInserted) {
    if (child === null || child === void 0) {
        return;
    }
    var SPACE = needInserted ? " " : "";
    if (typeof child !== "string" && typeof child !== "number" && isString(child.type) && isTwoCNChar(child.props.children)) {
        return cloneElement2(child, {
            children: child.props.children.split("").join(SPACE)
        });
    }
    if (isString(child)) {
        return isTwoCNChar(child) ? /* @__PURE__ */ import_react23.default.createElement("span", null, child.split("").join(SPACE)) : /* @__PURE__ */ import_react23.default.createElement("span", null, child);
    }
    if (isFragment2(child)) {
        return /* @__PURE__ */ import_react23.default.createElement("span", null, child);
    }
    return child;
}
function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    import_react23.default.Children.forEach(children, function(child) {
        var type = typeof child === "undefined" ? "undefined" : _type_of(child);
        var isCurrentChildPure = type === "string" || type === "number";
        if (isPrevChildPure && isCurrentChildPure) {
            var lastIndex = childList.length - 1;
            var lastChild = childList[lastIndex];
            childList[lastIndex] = "".concat(lastChild).concat(child);
        } else {
            childList.push(child);
        }
        isPrevChildPure = isCurrentChildPure;
    });
    return import_react23.default.Children.map(childList, function(child) {
        return splitCNCharsBySpace(child, needInserted);
    });
}
var _ButtonColorTypes = [
    "default",
    "primary",
    "danger"
].concat(_toConsumableArray(PresetColors));
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/DefaultLoadingIcon.js
var import_react25 = __toESM(require("react"));
var import_classnames8 = __toESM(require_classnames());
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/IconWrapper.js
var import_react24 = __toESM(require("react"));
var import_classnames7 = __toESM(require_classnames());
var IconWrapper = /* @__PURE__ */ (0, import_react24.forwardRef)(function(props, ref) {
    var className = props.className, style2 = props.style, children = props.children, prefixCls = props.prefixCls;
    var iconWrapperCls = (0, import_classnames7.default)("".concat(prefixCls, "-icon"), className);
    return /* @__PURE__ */ import_react24.default.createElement("span", {
        ref: ref,
        className: iconWrapperCls,
        style: style2
    }, children);
});
var IconWrapper_default = IconWrapper;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/DefaultLoadingIcon.js
var InnerLoadingIcon = /* @__PURE__ */ (0, import_react25.forwardRef)(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, iconClassName = props.iconClassName;
    var mergedIconCls = (0, import_classnames8.default)("".concat(prefixCls, "-loading-icon"), className);
    return /* @__PURE__ */ import_react25.default.createElement(IconWrapper_default, {
        prefixCls: prefixCls,
        className: mergedIconCls,
        style: style2,
        ref: ref
    }, /* @__PURE__ */ import_react25.default.createElement(LoadingOutlined_default2, {
        className: iconClassName
    }));
});
var getCollapsedWidth = function() {
    return {
        width: 0,
        opacity: 0,
        transform: "scale(0)"
    };
};
var getRealWidth = function(node2) {
    return {
        width: node2.scrollWidth,
        opacity: 1,
        transform: "scale(1)"
    };
};
var DefaultLoadingIcon = function(props) {
    var prefixCls = props.prefixCls, loading = props.loading, existIcon = props.existIcon, className = props.className, style2 = props.style, mount = props.mount;
    var visible = !!loading;
    if (existIcon) {
        return /* @__PURE__ */ import_react25.default.createElement(InnerLoadingIcon, {
            prefixCls: prefixCls,
            className: className,
            style: style2
        });
    }
    return /* @__PURE__ */ import_react25.default.createElement(es_default, {
        visible: visible,
        // Used for minus flex gap style only
        motionName: "".concat(prefixCls, "-loading-icon-motion"),
        motionAppear: !mount,
        motionEnter: !mount,
        motionLeave: !mount,
        removeOnLeave: true,
        onAppearStart: getCollapsedWidth,
        onAppearActive: getRealWidth,
        onEnterStart: getCollapsedWidth,
        onEnterActive: getRealWidth,
        onLeaveStart: getRealWidth,
        onLeaveActive: getCollapsedWidth
    }, function(_ref, ref) {
        var motionCls = _ref.className, motionStyle = _ref.style;
        var mergedStyle = Object.assign(Object.assign({}, style2), motionStyle);
        return /* @__PURE__ */ import_react25.default.createElement(InnerLoadingIcon, {
            prefixCls: prefixCls,
            className: (0, import_classnames8.default)(className, motionCls),
            style: mergedStyle,
            ref: ref
        });
    });
};
var DefaultLoadingIcon_default = DefaultLoadingIcon;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/style/group.js
var genButtonBorderStyle = function(buttonTypeCls, borderColor) {
    return(// Border
    _define_property({}, "> span, > ".concat(buttonTypeCls), {
        "&:not(:last-child)": _define_property({}, "&, & > ".concat(buttonTypeCls), {
            "&:not(:disabled)": {
                borderInlineEndColor: borderColor
            }
        }),
        "&:not(:first-child)": _define_property({}, "&, & > ".concat(buttonTypeCls), {
            "&:not(:disabled)": {
                borderInlineStartColor: borderColor
            }
        })
    }));
};
var genGroupStyle = function(token2) {
    var componentCls = token2.componentCls, fontSize = token2.fontSize, lineWidth = token2.lineWidth, groupBorderColor = token2.groupBorderColor, colorErrorHover = token2.colorErrorHover;
    var _obj;
    return _define_property({}, "".concat(componentCls, "-group"), [
        (_obj = {
            position: "relative",
            display: "inline-flex"
        }, // Border
        _define_property(_obj, "> span, > ".concat(componentCls), {
            "&:not(:last-child)": _define_property({}, "&, & > ".concat(componentCls), {
                borderStartEndRadius: 0,
                borderEndEndRadius: 0
            }),
            "&:not(:first-child)": _define_property({
                marginInlineStart: token2.calc(lineWidth).mul(-1).equal()
            }, "&, & > ".concat(componentCls), {
                borderStartStartRadius: 0,
                borderEndStartRadius: 0
            })
        }), _define_property(_obj, componentCls, {
            position: "relative",
            zIndex: 1,
            "&:hover, &:focus, &:active": {
                zIndex: 2
            },
            "&[disabled]": {
                zIndex: 0
            }
        }), _define_property(_obj, "".concat(componentCls, "-icon-only"), {
            fontSize: fontSize
        }), _obj),
        // Border Color
        genButtonBorderStyle("".concat(componentCls, "-primary"), groupBorderColor),
        genButtonBorderStyle("".concat(componentCls, "-danger"), colorErrorHover)
    ]);
};
var group_default = genGroupStyle;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/ColorPicker.js
var import_react35 = __toESM(require("react"));
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/color.js
var _excluded5 = [
    "b"
];
var _excluded23 = [
    "v"
];
var getRoundNumber = function getRoundNumber2(value) {
    return Math.round(Number(value || 0));
};
var convertHsb2Hsv = function convertHsb2Hsv2(color) {
    if (_instanceof(color, FastColor)) {
        return color;
    }
    if (color && _typeof(color) === "object" && "h" in color && "b" in color) {
        var _ref = color, b = _ref.b, resets = _objectWithoutProperties(_ref, _excluded5);
        return _objectSpread2(_objectSpread2({}, resets), {}, {
            v: b
        });
    }
    if (typeof color === "string" && /hsb/.test(color)) {
        return color.replace(/hsb/, "hsv");
    }
    return color;
};
var Color = /* @__PURE__ */ function(_FastColor) {
    _inherits(Color2, _FastColor);
    var _super = _createSuper(Color2);
    function Color2(color) {
        _classCallCheck(this, Color2);
        return _super.call(this, convertHsb2Hsv(color));
    }
    _createClass(Color2, [
        {
            key: "toHsbString",
            value: function toHsbString() {
                var hsb = this.toHsb();
                var saturation = getRoundNumber(hsb.s * 100);
                var lightness = getRoundNumber(hsb.b * 100);
                var hue = getRoundNumber(hsb.h);
                var alpha = hsb.a;
                var hsbString = "hsb(".concat(hue, ", ").concat(saturation, "%, ").concat(lightness, "%)");
                var hsbaString = "hsba(".concat(hue, ", ").concat(saturation, "%, ").concat(lightness, "%, ").concat(alpha.toFixed(alpha === 0 ? 0 : 2), ")");
                return alpha === 1 ? hsbString : hsbaString;
            }
        },
        {
            key: "toHsb",
            value: function toHsb() {
                var _this$toHsv = this.toHsv(), v = _this$toHsv.v, resets = _objectWithoutProperties(_this$toHsv, _excluded23);
                return _objectSpread2(_objectSpread2({}, resets), {}, {
                    b: v,
                    a: this.a
                });
            }
        }
    ]);
    return Color2;
}(FastColor);
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/util.js
var ColorPickerPrefixCls = "rc-color-picker";
var generateColor = function generateColor2(color) {
    if (_instanceof(color, Color)) {
        return color;
    }
    return new Color(color);
};
var defaultColor = generateColor("#1677ff");
var calculateColor = function calculateColor2(props) {
    var offset = props.offset, targetRef = props.targetRef, containerRef = props.containerRef, color = props.color, type = props.type;
    var _containerRef$current = containerRef.current.getBoundingClientRect(), width = _containerRef$current.width, height = _containerRef$current.height;
    var _targetRef$current$ge = targetRef.current.getBoundingClientRect(), targetWidth = _targetRef$current$ge.width, targetHeight = _targetRef$current$ge.height;
    var centerOffsetX = targetWidth / 2;
    var centerOffsetY = targetHeight / 2;
    var saturation = (offset.x + centerOffsetX) / width;
    var bright = 1 - (offset.y + centerOffsetY) / height;
    var hsb = color.toHsb();
    var alphaOffset = saturation;
    var hueOffset = (offset.x + centerOffsetX) / width * 360;
    if (type) {
        switch(type){
            case "hue":
                return generateColor(_objectSpread2(_objectSpread2({}, hsb), {}, {
                    h: hueOffset <= 0 ? 0 : hueOffset
                }));
            case "alpha":
                return generateColor(_objectSpread2(_objectSpread2({}, hsb), {}, {
                    a: alphaOffset <= 0 ? 0 : alphaOffset
                }));
        }
    }
    return generateColor({
        h: hsb.h,
        s: saturation <= 0 ? 0 : saturation,
        b: bright >= 1 ? 1 : bright,
        a: hsb.a
    });
};
var calcOffset = function calcOffset2(color, type) {
    var hsb = color.toHsb();
    switch(type){
        case "hue":
            return {
                x: hsb.h / 360 * 100,
                y: 50
            };
        case "alpha":
            return {
                x: color.a * 100,
                y: 50
            };
        // Picker panel
        default:
            return {
                x: hsb.s * 100,
                y: (1 - hsb.b) * 100
            };
    }
};
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/ColorPicker.js
var import_classnames12 = __toESM(require_classnames());
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/ColorBlock.js
var import_classnames9 = __toESM(require_classnames());
var import_react26 = __toESM(require("react"));
var ColorBlock = function ColorBlock2(_ref) {
    var color = _ref.color, prefixCls = _ref.prefixCls, className = _ref.className, style2 = _ref.style, onClick = _ref.onClick;
    var colorBlockCls = "".concat(prefixCls, "-color-block");
    return /* @__PURE__ */ import_react26.default.createElement("div", {
        className: (0, import_classnames9.default)(colorBlockCls, className),
        style: style2,
        onClick: onClick
    }, /* @__PURE__ */ import_react26.default.createElement("div", {
        className: "".concat(colorBlockCls, "-inner"),
        style: {
            background: color
        }
    }));
};
var ColorBlock_default = ColorBlock;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Picker.js
var import_react31 = __toESM(require("react"));
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/hooks/useColorDrag.js
var import_react27 = require("react");
function getPosition(e) {
    var obj = "touches" in e ? e.touches[0] : e;
    var scrollXOffset = document.documentElement.scrollLeft || document.body.scrollLeft || window.pageXOffset;
    var scrollYOffset = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset;
    return {
        pageX: obj.pageX - scrollXOffset,
        pageY: obj.pageY - scrollYOffset
    };
}
function useColorDrag(props) {
    var targetRef = props.targetRef, containerRef = props.containerRef, direction = props.direction, onDragChange = props.onDragChange, onDragChangeComplete = props.onDragChangeComplete, calculate = props.calculate, color = props.color, disabledDrag = props.disabledDrag;
    var _useState = (0, import_react27.useState)({
        x: 0,
        y: 0
    }), _useState2 = _slicedToArray(_useState, 2), offsetValue = _useState2[0], setOffsetValue = _useState2[1];
    var mouseMoveRef = (0, import_react27.useRef)(null);
    var mouseUpRef = (0, import_react27.useRef)(null);
    (0, import_react27.useEffect)(function() {
        setOffsetValue(calculate());
    }, [
        color
    ]);
    (0, import_react27.useEffect)(function() {
        return function() {
            document.removeEventListener("mousemove", mouseMoveRef.current);
            document.removeEventListener("mouseup", mouseUpRef.current);
            document.removeEventListener("touchmove", mouseMoveRef.current);
            document.removeEventListener("touchend", mouseUpRef.current);
            mouseMoveRef.current = null;
            mouseUpRef.current = null;
        };
    }, []);
    var updateOffset = function updateOffset2(e) {
        var _getPosition = getPosition(e), pageX = _getPosition.pageX, pageY = _getPosition.pageY;
        var _containerRef$current = containerRef.current.getBoundingClientRect(), rectX = _containerRef$current.x, rectY = _containerRef$current.y, width = _containerRef$current.width, height = _containerRef$current.height;
        var _targetRef$current$ge = targetRef.current.getBoundingClientRect(), targetWidth = _targetRef$current$ge.width, targetHeight = _targetRef$current$ge.height;
        var centerOffsetX = targetWidth / 2;
        var centerOffsetY = targetHeight / 2;
        var offsetX = Math.max(0, Math.min(pageX - rectX, width)) - centerOffsetX;
        var offsetY = Math.max(0, Math.min(pageY - rectY, height)) - centerOffsetY;
        var calcOffset3 = {
            x: offsetX,
            y: direction === "x" ? offsetValue.y : offsetY
        };
        if (targetWidth === 0 && targetHeight === 0 || targetWidth !== targetHeight) {
            return false;
        }
        onDragChange === null || onDragChange === void 0 || onDragChange(calcOffset3);
    };
    var onDragMove = function onDragMove2(e) {
        e.preventDefault();
        updateOffset(e);
    };
    var onDragStop = function onDragStop2(e) {
        e.preventDefault();
        document.removeEventListener("mousemove", mouseMoveRef.current);
        document.removeEventListener("mouseup", mouseUpRef.current);
        document.removeEventListener("touchmove", mouseMoveRef.current);
        document.removeEventListener("touchend", mouseUpRef.current);
        mouseMoveRef.current = null;
        mouseUpRef.current = null;
        onDragChangeComplete === null || onDragChangeComplete === void 0 || onDragChangeComplete();
    };
    var onDragStart = function onDragStart2(e) {
        document.removeEventListener("mousemove", mouseMoveRef.current);
        document.removeEventListener("mouseup", mouseUpRef.current);
        if (disabledDrag) {
            return;
        }
        updateOffset(e);
        document.addEventListener("mousemove", onDragMove);
        document.addEventListener("mouseup", onDragStop);
        document.addEventListener("touchmove", onDragMove);
        document.addEventListener("touchend", onDragStop);
        mouseMoveRef.current = onDragMove;
        mouseUpRef.current = onDragStop;
    };
    return [
        offsetValue,
        onDragStart
    ];
}
var useColorDrag_default = useColorDrag;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Handler.js
var import_classnames10 = __toESM(require_classnames());
var import_react28 = __toESM(require("react"));
var Handler = function Handler2(_ref) {
    var _ref$size = _ref.size, size = _ref$size === void 0 ? "default" : _ref$size, color = _ref.color, prefixCls = _ref.prefixCls;
    return /* @__PURE__ */ import_react28.default.createElement("div", {
        className: (0, import_classnames10.default)("".concat(prefixCls, "-handler"), _defineProperty({}, "".concat(prefixCls, "-handler-sm"), size === "small")),
        style: {
            backgroundColor: color
        }
    });
};
var Handler_default = Handler;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Palette.js
var import_react29 = __toESM(require("react"));
var Palette = function Palette2(_ref) {
    var children = _ref.children, style2 = _ref.style, prefixCls = _ref.prefixCls;
    return /* @__PURE__ */ import_react29.default.createElement("div", {
        className: "".concat(prefixCls, "-palette"),
        style: _objectSpread2({
            position: "relative"
        }, style2)
    }, children);
};
var Palette_default = Palette;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Transform.js
var import_react30 = __toESM(require("react"));
var Transform = /* @__PURE__ */ (0, import_react30.forwardRef)(function(props, ref) {
    var children = props.children, x = props.x, y = props.y;
    return /* @__PURE__ */ import_react30.default.createElement("div", {
        ref: ref,
        style: {
            position: "absolute",
            left: "".concat(x, "%"),
            top: "".concat(y, "%"),
            zIndex: 1,
            transform: "translate(-50%, -50%)"
        }
    }, children);
});
var Transform_default = Transform;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Picker.js
var Picker = function Picker2(_ref) {
    var color = _ref.color, onChange = _ref.onChange, prefixCls = _ref.prefixCls, onChangeComplete = _ref.onChangeComplete, disabled = _ref.disabled;
    var pickerRef = (0, import_react31.useRef)();
    var transformRef = (0, import_react31.useRef)();
    var colorRef = (0, import_react31.useRef)(color);
    var onDragChange = useEvent(function(offsetValue) {
        var calcColor = calculateColor({
            offset: offsetValue,
            targetRef: transformRef,
            containerRef: pickerRef,
            color: color
        });
        colorRef.current = calcColor;
        onChange(calcColor);
    });
    var _useColorDrag = useColorDrag_default({
        color: color,
        containerRef: pickerRef,
        targetRef: transformRef,
        calculate: function calculate() {
            return calcOffset(color);
        },
        onDragChange: onDragChange,
        onDragChangeComplete: function onDragChangeComplete() {
            return onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(colorRef.current);
        },
        disabledDrag: disabled
    }), _useColorDrag2 = _slicedToArray(_useColorDrag, 2), offset = _useColorDrag2[0], dragStartHandle = _useColorDrag2[1];
    return /* @__PURE__ */ import_react31.default.createElement("div", {
        ref: pickerRef,
        className: "".concat(prefixCls, "-select"),
        onMouseDown: dragStartHandle,
        onTouchStart: dragStartHandle
    }, /* @__PURE__ */ import_react31.default.createElement(Palette_default, {
        prefixCls: prefixCls
    }, /* @__PURE__ */ import_react31.default.createElement(Transform_default, {
        x: offset.x,
        y: offset.y,
        ref: transformRef
    }, /* @__PURE__ */ import_react31.default.createElement(Handler_default, {
        color: color.toRgbString(),
        prefixCls: prefixCls
    })), /* @__PURE__ */ import_react31.default.createElement("div", {
        className: "".concat(prefixCls, "-saturation"),
        style: {
            backgroundColor: "hsl(".concat(color.toHsb().h, ",100%, 50%)"),
            backgroundImage: "linear-gradient(0deg, #000, transparent),linear-gradient(90deg, #fff, hsla(0, 0%, 100%, 0))"
        }
    })));
};
var Picker_default = Picker;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/hooks/useColorState.js
var import_react32 = require("react");
var useColorState = function useColorState2(defaultValue, value) {
    var _useMergedState = useMergedState(defaultValue, {
        value: value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setValue = _useMergedState2[1];
    var color = (0, import_react32.useMemo)(function() {
        return generateColor(mergedValue);
    }, [
        mergedValue
    ]);
    return [
        color,
        setValue
    ];
};
var useColorState_default = useColorState;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/hooks/useComponent.js
var React56 = __toESM(require("react"));
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Slider.js
var import_react34 = __toESM(require("react"));
var import_classnames11 = __toESM(require_classnames());
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Gradient.js
var import_react33 = __toESM(require("react"));
var Gradient = function Gradient2(_ref) {
    var colors = _ref.colors, children = _ref.children, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? "to right" : _ref$direction, type = _ref.type, prefixCls = _ref.prefixCls;
    var gradientColors = (0, import_react33.useMemo)(function() {
        return colors.map(function(color, idx) {
            var result = generateColor(color);
            if (type === "alpha" && idx === colors.length - 1) {
                result = new Color(result.setA(1));
            }
            return result.toRgbString();
        }).join(",");
    }, [
        colors,
        type
    ]);
    return /* @__PURE__ */ import_react33.default.createElement("div", {
        className: "".concat(prefixCls, "-gradient"),
        style: {
            position: "absolute",
            inset: 0,
            background: "linear-gradient(".concat(direction, ", ").concat(gradientColors, ")")
        }
    }, children);
};
var Gradient_default = Gradient;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/components/Slider.js
var Slider = function Slider2(props) {
    var prefixCls = props.prefixCls, colors = props.colors, disabled = props.disabled, onChange = props.onChange, onChangeComplete = props.onChangeComplete, color = props.color, type = props.type;
    var sliderRef = (0, import_react34.useRef)();
    var transformRef = (0, import_react34.useRef)();
    var colorRef = (0, import_react34.useRef)(color);
    var getValue2 = function getValue3(c) {
        return type === "hue" ? c.getHue() : c.a * 100;
    };
    var onDragChange = useEvent(function(offsetValue) {
        var calcColor = calculateColor({
            offset: offsetValue,
            targetRef: transformRef,
            containerRef: sliderRef,
            color: color,
            type: type
        });
        colorRef.current = calcColor;
        onChange(getValue2(calcColor));
    });
    var _useColorDrag = useColorDrag_default({
        color: color,
        targetRef: transformRef,
        containerRef: sliderRef,
        calculate: function calculate() {
            return calcOffset(color, type);
        },
        onDragChange: onDragChange,
        onDragChangeComplete: function onDragChangeComplete() {
            onChangeComplete(getValue2(colorRef.current));
        },
        direction: "x",
        disabledDrag: disabled
    }), _useColorDrag2 = _slicedToArray(_useColorDrag, 2), offset = _useColorDrag2[0], dragStartHandle = _useColorDrag2[1];
    var handleColor = import_react34.default.useMemo(function() {
        if (type === "hue") {
            var hsb = color.toHsb();
            hsb.s = 1;
            hsb.b = 1;
            hsb.a = 1;
            var lightColor = new Color(hsb);
            return lightColor;
        }
        return color;
    }, [
        color,
        type
    ]);
    var gradientList = import_react34.default.useMemo(function() {
        return colors.map(function(info) {
            return "".concat(info.color, " ").concat(info.percent, "%");
        });
    }, [
        colors
    ]);
    return /* @__PURE__ */ import_react34.default.createElement("div", {
        ref: sliderRef,
        className: (0, import_classnames11.default)("".concat(prefixCls, "-slider"), "".concat(prefixCls, "-slider-").concat(type)),
        onMouseDown: dragStartHandle,
        onTouchStart: dragStartHandle
    }, /* @__PURE__ */ import_react34.default.createElement(Palette_default, {
        prefixCls: prefixCls
    }, /* @__PURE__ */ import_react34.default.createElement(Transform_default, {
        x: offset.x,
        y: offset.y,
        ref: transformRef
    }, /* @__PURE__ */ import_react34.default.createElement(Handler_default, {
        size: "small",
        color: handleColor.toHexString(),
        prefixCls: prefixCls
    })), /* @__PURE__ */ import_react34.default.createElement(Gradient_default, {
        colors: gradientList,
        type: type,
        prefixCls: prefixCls
    })));
};
var Slider_default = Slider;
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/hooks/useComponent.js
function useComponent(components) {
    return React56.useMemo(function() {
        var _ref = components || {}, slider = _ref.slider;
        return [
            slider || Slider_default
        ];
    }, [
        components
    ]);
}
// ../../node_modules/.pnpm/@rc-component+color-picker@2.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@rc-component/color-picker/es/ColorPicker.js
var HUE_COLORS = [
    {
        color: "rgb(255, 0, 0)",
        percent: 0
    },
    {
        color: "rgb(255, 255, 0)",
        percent: 17
    },
    {
        color: "rgb(0, 255, 0)",
        percent: 33
    },
    {
        color: "rgb(0, 255, 255)",
        percent: 50
    },
    {
        color: "rgb(0, 0, 255)",
        percent: 67
    },
    {
        color: "rgb(255, 0, 255)",
        percent: 83
    },
    {
        color: "rgb(255, 0, 0)",
        percent: 100
    }
];
var ColorPicker = /* @__PURE__ */ (0, import_react35.forwardRef)(function(props, ref) {
    var value = props.value, defaultValue = props.defaultValue, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? ColorPickerPrefixCls : _props$prefixCls, onChange = props.onChange, onChangeComplete = props.onChangeComplete, className = props.className, style2 = props.style, panelRender = props.panelRender, _props$disabledAlpha = props.disabledAlpha, disabledAlpha = _props$disabledAlpha === void 0 ? false : _props$disabledAlpha, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, components = props.components;
    var _useComponent = useComponent(components), _useComponent2 = _slicedToArray(_useComponent, 1), Slider3 = _useComponent2[0];
    var _useColorState = useColorState_default(defaultValue || defaultColor, value), _useColorState2 = _slicedToArray(_useColorState, 2), colorValue = _useColorState2[0], setColorValue = _useColorState2[1];
    var alphaColor = (0, import_react35.useMemo)(function() {
        return colorValue.setA(1).toRgbString();
    }, [
        colorValue
    ]);
    var handleChange = function handleChange2(data, type) {
        if (!value) {
            setColorValue(data);
        }
        onChange === null || onChange === void 0 || onChange(data, type);
    };
    var getHueColor = function getHueColor2(hue) {
        return new Color(colorValue.setHue(hue));
    };
    var getAlphaColor3 = function getAlphaColor4(alpha) {
        return new Color(colorValue.setA(alpha / 100));
    };
    var onHueChange = function onHueChange2(hue) {
        handleChange(getHueColor(hue), {
            type: "hue",
            value: hue
        });
    };
    var onAlphaChange = function onAlphaChange2(alpha) {
        handleChange(getAlphaColor3(alpha), {
            type: "alpha",
            value: alpha
        });
    };
    var onHueChangeComplete = function onHueChangeComplete2(hue) {
        if (onChangeComplete) {
            onChangeComplete(getHueColor(hue));
        }
    };
    var onAlphaChangeComplete = function onAlphaChangeComplete2(alpha) {
        if (onChangeComplete) {
            onChangeComplete(getAlphaColor3(alpha));
        }
    };
    var mergeCls = (0, import_classnames12.default)("".concat(prefixCls, "-panel"), className, _defineProperty({}, "".concat(prefixCls, "-panel-disabled"), disabled));
    var sharedSliderProps = {
        prefixCls: prefixCls,
        disabled: disabled,
        color: colorValue
    };
    var defaultPanel = /* @__PURE__ */ import_react35.default.createElement(import_react35.default.Fragment, null, /* @__PURE__ */ import_react35.default.createElement(Picker_default, _extends({
        onChange: handleChange
    }, sharedSliderProps, {
        onChangeComplete: onChangeComplete
    })), /* @__PURE__ */ import_react35.default.createElement("div", {
        className: "".concat(prefixCls, "-slider-container")
    }, /* @__PURE__ */ import_react35.default.createElement("div", {
        className: (0, import_classnames12.default)("".concat(prefixCls, "-slider-group"), _defineProperty({}, "".concat(prefixCls, "-slider-group-disabled-alpha"), disabledAlpha))
    }, /* @__PURE__ */ import_react35.default.createElement(Slider3, _extends({}, sharedSliderProps, {
        type: "hue",
        colors: HUE_COLORS,
        min: 0,
        max: 359,
        value: colorValue.getHue(),
        onChange: onHueChange,
        onChangeComplete: onHueChangeComplete
    })), !disabledAlpha && /* @__PURE__ */ import_react35.default.createElement(Slider3, _extends({}, sharedSliderProps, {
        type: "alpha",
        colors: [
            {
                percent: 0,
                color: "rgba(255, 0, 4, 0)"
            },
            {
                percent: 100,
                color: alphaColor
            }
        ],
        min: 0,
        max: 100,
        value: colorValue.a * 100,
        onChange: onAlphaChange,
        onChangeComplete: onAlphaChangeComplete
    }))), /* @__PURE__ */ import_react35.default.createElement(ColorBlock_default, {
        color: colorValue.toRgbString(),
        prefixCls: prefixCls
    })));
    return /* @__PURE__ */ import_react35.default.createElement("div", {
        className: mergeCls,
        style: style2,
        ref: ref
    }, typeof panelRender === "function" ? panelRender(defaultPanel) : defaultPanel);
});
if (process.env.NODE_ENV !== "production") {
    ColorPicker.displayName = "ColorPicker";
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/color-picker/color.js
var toHexFormat = function(value, alpha) {
    return (value === null || value === void 0 ? void 0 : value.replace(/[^\w/]/g, "").slice(0, alpha ? 8 : 6)) || "";
};
var getHex = function(value, alpha) {
    return value ? toHexFormat(value, alpha) : "";
};
var AggregationColor = /* @__PURE__ */ function() {
    function AggregationColor2(color) {
        _classCallCheck(this, AggregationColor2);
        var _a;
        this.cleared = false;
        if (_instanceof(color, AggregationColor2)) {
            this.metaColor = color.metaColor.clone();
            this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(function(info) {
                return {
                    color: new AggregationColor2(info.color),
                    percent: info.percent
                };
            });
            this.cleared = color.cleared;
            return;
        }
        var isArray = Array.isArray(color);
        if (isArray && color.length) {
            this.colors = color.map(function(_ref) {
                var c = _ref.color, percent = _ref.percent;
                return {
                    color: new AggregationColor2(c),
                    percent: percent
                };
            });
            this.metaColor = new Color(this.colors[0].color.metaColor);
        } else {
            this.metaColor = new Color(isArray ? "" : color);
        }
        if (!color || isArray && !this.colors) {
            this.metaColor = this.metaColor.setA(0);
            this.cleared = true;
        }
    }
    return _createClass(AggregationColor2, [
        {
            key: "toHsb",
            value: function toHsb() {
                return this.metaColor.toHsb();
            }
        },
        {
            key: "toHsbString",
            value: function toHsbString() {
                return this.metaColor.toHsbString();
            }
        },
        {
            key: "toHex",
            value: function toHex() {
                return getHex(this.toHexString(), this.metaColor.a < 1);
            }
        },
        {
            key: "toHexString",
            value: function toHexString() {
                return this.metaColor.toHexString();
            }
        },
        {
            key: "toRgb",
            value: function toRgb() {
                return this.metaColor.toRgb();
            }
        },
        {
            key: "toRgbString",
            value: function toRgbString() {
                return this.metaColor.toRgbString();
            }
        },
        {
            key: "isGradient",
            value: function isGradient() {
                return !!this.colors && !this.cleared;
            }
        },
        {
            key: "getColors",
            value: function getColors() {
                return this.colors || [
                    {
                        color: this,
                        percent: 0
                    }
                ];
            }
        },
        {
            key: "toCssString",
            value: function toCssString() {
                var colors = this.colors;
                if (colors) {
                    var colorsStr = colors.map(function(c) {
                        return "".concat(c.color.toRgbString(), " ").concat(c.percent, "%");
                    }).join(", ");
                    return "linear-gradient(90deg, ".concat(colorsStr, ")");
                }
                return this.metaColor.toRgbString();
            }
        },
        {
            key: "equals",
            value: function equals(color) {
                if (!color || this.isGradient() !== color.isGradient()) {
                    return false;
                }
                if (!this.isGradient()) {
                    return this.toHexString() === color.toHexString();
                }
                return this.colors.length === color.colors.length && this.colors.every(function(c, i) {
                    var target = color.colors[i];
                    return c.percent === target.percent && c.color.equals(target.color);
                });
            }
        }
    ]);
}();
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/color-picker/components/ColorPresets.js
var import_react36 = __toESM(require("react"));
var import_classnames13 = __toESM(require_classnames());
var isBright = function(value, bgColorToken) {
    var _value_toRgb = value.toRgb(), r = _value_toRgb.r, g = _value_toRgb.g, b = _value_toRgb.b, a = _value_toRgb.a;
    var hsv = new Color(value.toRgbString()).onBackground(bgColorToken).toHsv();
    if (a <= 0.5) {
        return hsv.v > 0.5;
    }
    return r * 0.299 + g * 0.587 + b * 0.114 > 192;
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/style/token.js
var prepareToken = function(token2) {
    var paddingInline = token2.paddingInline, onlyIconSize = token2.onlyIconSize;
    var buttonToken = merge2(token2, {
        buttonPaddingHorizontal: paddingInline,
        buttonPaddingVertical: 0,
        buttonIconOnlyFontSize: onlyIconSize
    });
    return buttonToken;
};
var prepareComponentToken = function(token2) {
    var _a, _b, _c, _d, _e, _f;
    var contentFontSize = (_a = token2.contentFontSize) !== null && _a !== void 0 ? _a : token2.fontSize;
    var contentFontSizeSM = (_b = token2.contentFontSizeSM) !== null && _b !== void 0 ? _b : token2.fontSize;
    var contentFontSizeLG = (_c = token2.contentFontSizeLG) !== null && _c !== void 0 ? _c : token2.fontSizeLG;
    var contentLineHeight = (_d = token2.contentLineHeight) !== null && _d !== void 0 ? _d : getLineHeight(contentFontSize);
    var contentLineHeightSM = (_e = token2.contentLineHeightSM) !== null && _e !== void 0 ? _e : getLineHeight(contentFontSizeSM);
    var contentLineHeightLG = (_f = token2.contentLineHeightLG) !== null && _f !== void 0 ? _f : getLineHeight(contentFontSizeLG);
    var solidTextColor = isBright(new AggregationColor(token2.colorBgSolid), "#fff") ? "#000" : "#fff";
    var shadowColorTokens = PresetColors.reduce(function(prev2, colorKey) {
        return Object.assign(Object.assign({}, prev2), _define_property({}, "".concat(colorKey, "ShadowColor"), "0 ".concat(unit(token2.controlOutlineWidth), " 0 ").concat(getAlphaColor_default(token2["".concat(colorKey, "1")], token2.colorBgContainer))));
    }, {});
    return Object.assign(Object.assign({}, shadowColorTokens), {
        fontWeight: 400,
        defaultShadow: "0 ".concat(token2.controlOutlineWidth, "px 0 ").concat(token2.controlTmpOutline),
        primaryShadow: "0 ".concat(token2.controlOutlineWidth, "px 0 ").concat(token2.controlOutline),
        dangerShadow: "0 ".concat(token2.controlOutlineWidth, "px 0 ").concat(token2.colorErrorOutline),
        primaryColor: token2.colorTextLightSolid,
        dangerColor: token2.colorTextLightSolid,
        borderColorDisabled: token2.colorBorder,
        defaultGhostColor: token2.colorBgContainer,
        ghostBg: "transparent",
        defaultGhostBorderColor: token2.colorBgContainer,
        paddingInline: token2.paddingContentHorizontal - token2.lineWidth,
        paddingInlineLG: token2.paddingContentHorizontal - token2.lineWidth,
        paddingInlineSM: 8 - token2.lineWidth,
        onlyIconSize: "inherit",
        onlyIconSizeSM: "inherit",
        onlyIconSizeLG: "inherit",
        groupBorderColor: token2.colorPrimaryHover,
        linkHoverBg: "transparent",
        textTextColor: token2.colorText,
        textTextHoverColor: token2.colorText,
        textTextActiveColor: token2.colorText,
        textHoverBg: token2.colorFillTertiary,
        defaultColor: token2.colorText,
        defaultBg: token2.colorBgContainer,
        defaultBorderColor: token2.colorBorder,
        defaultBorderColorDisabled: token2.colorBorder,
        defaultHoverBg: token2.colorBgContainer,
        defaultHoverColor: token2.colorPrimaryHover,
        defaultHoverBorderColor: token2.colorPrimaryHover,
        defaultActiveBg: token2.colorBgContainer,
        defaultActiveColor: token2.colorPrimaryActive,
        defaultActiveBorderColor: token2.colorPrimaryActive,
        solidTextColor: solidTextColor,
        contentFontSize: contentFontSize,
        contentFontSizeSM: contentFontSizeSM,
        contentFontSizeLG: contentFontSizeLG,
        contentLineHeight: contentLineHeight,
        contentLineHeightSM: contentLineHeightSM,
        contentLineHeightLG: contentLineHeightLG,
        paddingBlock: Math.max((token2.controlHeight - contentFontSize * contentLineHeight) / 2 - token2.lineWidth, 0),
        paddingBlockSM: Math.max((token2.controlHeightSM - contentFontSizeSM * contentLineHeightSM) / 2 - token2.lineWidth, 0),
        paddingBlockLG: Math.max((token2.controlHeightLG - contentFontSizeLG * contentLineHeightLG) / 2 - token2.lineWidth, 0)
    });
};
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/style/index.js
var genSharedButtonStyle = function(token2) {
    var componentCls = token2.componentCls, iconCls = token2.iconCls, fontWeight = token2.fontWeight, opacityLoading = token2.opacityLoading, motionDurationSlow = token2.motionDurationSlow, motionEaseInOut = token2.motionEaseInOut, marginXS = token2.marginXS, calc = token2.calc;
    var _obj, _obj1;
    return _define_property({}, componentCls, (_obj1 = {
        outline: "none",
        position: "relative",
        display: "inline-flex",
        gap: token2.marginXS,
        alignItems: "center",
        justifyContent: "center",
        fontWeight: fontWeight,
        whiteSpace: "nowrap",
        textAlign: "center",
        backgroundImage: "none",
        background: "transparent",
        border: "".concat(unit(token2.lineWidth), " ").concat(token2.lineType, " transparent"),
        cursor: "pointer",
        transition: "all ".concat(token2.motionDurationMid, " ").concat(token2.motionEaseInOut),
        userSelect: "none",
        touchAction: "manipulation",
        color: token2.colorText,
        "&:disabled > *": {
            pointerEvents: "none"
        }
    }, // https://github.com/ant-design/ant-design/issues/51380
    _define_property(_obj1, "".concat(componentCls, "-icon > svg"), resetIcon()), _define_property(_obj1, "> a", {
        color: "currentColor"
    }), _define_property(_obj1, "&:not(:disabled)", genFocusStyle(token2)), _define_property(_obj1, "&".concat(componentCls, "-two-chinese-chars::first-letter"), {
        letterSpacing: "0.34em"
    }), _define_property(_obj1, "&".concat(componentCls, "-two-chinese-chars > *:not(").concat(iconCls, ")"), {
        marginInlineEnd: "-0.34em",
        letterSpacing: "0.34em"
    }), _define_property(_obj1, "&".concat(componentCls, "-icon-only"), (_obj = {
        paddingInline: 0
    }, // make `btn-icon-only` not too narrow
    _define_property(_obj, "&".concat(componentCls, "-compact-item"), {
        flex: "none"
    }), _define_property(_obj, "&".concat(componentCls, "-round"), {
        width: "auto"
    }), _obj)), // Loading
    _define_property(_obj1, "&".concat(componentCls, "-loading"), {
        opacity: opacityLoading,
        cursor: "default"
    }), _define_property(_obj1, "".concat(componentCls, "-loading-icon"), {
        transition: [
            "width",
            "opacity",
            "margin"
        ].map(function(transition) {
            return "".concat(transition, " ").concat(motionDurationSlow, " ").concat(motionEaseInOut);
        }).join(",")
    }), // iconPosition
    _define_property(_obj1, "&:not(".concat(componentCls, "-icon-end)"), _define_property({}, "".concat(componentCls, "-loading-icon-motion"), {
        "&-appear-start, &-enter-start": {
            marginInlineEnd: calc(marginXS).mul(-1).equal()
        },
        "&-appear-active, &-enter-active": {
            marginInlineEnd: 0
        },
        "&-leave-start": {
            marginInlineEnd: 0
        },
        "&-leave-active": {
            marginInlineEnd: calc(marginXS).mul(-1).equal()
        }
    })), _define_property(_obj1, "&-icon-end", _define_property({
        flexDirection: "row-reverse"
    }, "".concat(componentCls, "-loading-icon-motion"), {
        "&-appear-start, &-enter-start": {
            marginInlineStart: calc(marginXS).mul(-1).equal()
        },
        "&-appear-active, &-enter-active": {
            marginInlineStart: 0
        },
        "&-leave-start": {
            marginInlineStart: 0
        },
        "&-leave-active": {
            marginInlineStart: calc(marginXS).mul(-1).equal()
        }
    })), _obj1));
};
var genHoverActiveButtonStyle = function(btnCls, hoverStyle, activeStyle) {
    return _define_property({}, "&:not(:disabled):not(".concat(btnCls, "-disabled)"), {
        "&:hover": hoverStyle,
        "&:active": activeStyle
    });
};
var genCircleButtonStyle = function(token2) {
    return {
        minWidth: token2.controlHeight,
        paddingInlineStart: 0,
        paddingInlineEnd: 0,
        borderRadius: "50%"
    };
};
var genRoundButtonStyle = function(token2) {
    return {
        borderRadius: token2.controlHeight,
        paddingInlineStart: token2.calc(token2.controlHeight).div(2).equal(),
        paddingInlineEnd: token2.calc(token2.controlHeight).div(2).equal()
    };
};
var genDisabledStyle = function(token2) {
    return {
        cursor: "not-allowed",
        borderColor: token2.borderColorDisabled,
        color: token2.colorTextDisabled,
        background: token2.colorBgContainerDisabled,
        boxShadow: "none"
    };
};
var genGhostButtonStyle = function(btnCls, background, textColor, borderColor, textColorDisabled, borderColorDisabled, hoverStyle, activeStyle) {
    return _define_property({}, "&".concat(btnCls, "-background-ghost"), Object.assign(Object.assign({
        color: textColor || void 0,
        background: background,
        borderColor: borderColor || void 0,
        boxShadow: "none"
    }, genHoverActiveButtonStyle(btnCls, Object.assign({
        background: background
    }, hoverStyle), Object.assign({
        background: background
    }, activeStyle))), {
        "&:disabled": {
            cursor: "not-allowed",
            color: textColorDisabled || void 0,
            borderColor: borderColorDisabled || void 0
        }
    }));
};
var genSolidDisabledButtonStyle = function(token2) {
    return _define_property({}, "&:disabled, &".concat(token2.componentCls, "-disabled"), Object.assign({}, genDisabledStyle(token2)));
};
var genPureDisabledButtonStyle = function(token2) {
    return _define_property({}, "&:disabled, &".concat(token2.componentCls, "-disabled"), {
        cursor: "not-allowed",
        color: token2.colorTextDisabled
    });
};
var genVariantButtonStyle = function(token2, hoverStyle, activeStyle, variant) {
    var isPureDisabled = variant && [
        "link",
        "text"
    ].includes(variant);
    var genDisabledButtonStyle = isPureDisabled ? genPureDisabledButtonStyle : genSolidDisabledButtonStyle;
    return Object.assign(Object.assign({}, genDisabledButtonStyle(token2)), genHoverActiveButtonStyle(token2.componentCls, hoverStyle, activeStyle));
};
var genSolidButtonStyle = function(token2, textColor, background, hoverStyle, activeStyle) {
    return _define_property({}, "&".concat(token2.componentCls, "-variant-solid"), Object.assign({
        color: textColor,
        background: background
    }, genVariantButtonStyle(token2, hoverStyle, activeStyle)));
};
var genOutlinedDashedButtonStyle = function(token2, borderColor, background, hoverStyle, activeStyle) {
    return _define_property({}, "&".concat(token2.componentCls, "-variant-outlined, &").concat(token2.componentCls, "-variant-dashed"), Object.assign({
        borderColor: borderColor,
        background: background
    }, genVariantButtonStyle(token2, hoverStyle, activeStyle)));
};
var genDashedButtonStyle = function(token2) {
    return _define_property({}, "&".concat(token2.componentCls, "-variant-dashed"), {
        borderStyle: "dashed"
    });
};
var genFilledButtonStyle = function(token2, background, hoverStyle, activeStyle) {
    return _define_property({}, "&".concat(token2.componentCls, "-variant-filled"), Object.assign({
        boxShadow: "none",
        background: background
    }, genVariantButtonStyle(token2, hoverStyle, activeStyle)));
};
var genTextLinkButtonStyle = function(token2, textColor, variant, hoverStyle, activeStyle) {
    return _define_property({}, "&".concat(token2.componentCls, "-variant-").concat(variant), Object.assign({
        color: textColor,
        boxShadow: "none"
    }, genVariantButtonStyle(token2, hoverStyle, activeStyle, variant)));
};
var genPresetColorStyle = function(token2) {
    var componentCls = token2.componentCls;
    return PresetColors.reduce(function(prev2, colorKey) {
        var darkColor = token2["".concat(colorKey, "6")];
        var lightColor = token2["".concat(colorKey, "1")];
        var hoverColor = token2["".concat(colorKey, "5")];
        var lightHoverColor = token2["".concat(colorKey, "2")];
        var lightBorderColor = token2["".concat(colorKey, "3")];
        var activeColor = token2["".concat(colorKey, "7")];
        return Object.assign(Object.assign({}, prev2), _define_property({}, "&".concat(componentCls, "-color-").concat(colorKey), Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            color: darkColor,
            boxShadow: token2["".concat(colorKey, "ShadowColor")]
        }, genSolidButtonStyle(token2, token2.colorTextLightSolid, darkColor, {
            background: hoverColor
        }, {
            background: activeColor
        })), genOutlinedDashedButtonStyle(token2, darkColor, token2.colorBgContainer, {
            color: hoverColor,
            borderColor: hoverColor,
            background: token2.colorBgContainer
        }, {
            color: activeColor,
            borderColor: activeColor,
            background: token2.colorBgContainer
        })), genDashedButtonStyle(token2)), genFilledButtonStyle(token2, lightColor, {
            background: lightHoverColor
        }, {
            background: lightBorderColor
        })), genTextLinkButtonStyle(token2, darkColor, "link", {
            color: hoverColor
        }, {
            color: activeColor
        })), genTextLinkButtonStyle(token2, darkColor, "text", {
            color: hoverColor,
            background: lightColor
        }, {
            color: activeColor,
            background: lightBorderColor
        }))));
    }, {});
};
var genDefaultButtonStyle = function(token2) {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        color: token2.defaultColor,
        boxShadow: token2.defaultShadow
    }, genSolidButtonStyle(token2, token2.solidTextColor, token2.colorBgSolid, {
        color: token2.solidTextColor,
        background: token2.colorBgSolidHover
    }, {
        color: token2.solidTextColor,
        background: token2.colorBgSolidActive
    })), genDashedButtonStyle(token2)), genFilledButtonStyle(token2, token2.colorFillTertiary, {
        background: token2.colorFillSecondary
    }, {
        background: token2.colorFill
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.defaultGhostColor, token2.defaultGhostBorderColor, token2.colorTextDisabled, token2.colorBorder)), genTextLinkButtonStyle(token2, token2.textTextColor, "link", {
        color: token2.colorLinkHover,
        background: token2.linkHoverBg
    }, {
        color: token2.colorLinkActive
    }));
};
var genPrimaryButtonStyle = function(token2) {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        color: token2.colorPrimary,
        boxShadow: token2.primaryShadow
    }, genOutlinedDashedButtonStyle(token2, token2.colorPrimary, token2.colorBgContainer, {
        color: token2.colorPrimaryTextHover,
        borderColor: token2.colorPrimaryHover,
        background: token2.colorBgContainer
    }, {
        color: token2.colorPrimaryTextActive,
        borderColor: token2.colorPrimaryActive,
        background: token2.colorBgContainer
    })), genDashedButtonStyle(token2)), genFilledButtonStyle(token2, token2.colorPrimaryBg, {
        background: token2.colorPrimaryBgHover
    }, {
        background: token2.colorPrimaryBorder
    })), genTextLinkButtonStyle(token2, token2.colorPrimaryText, "text", {
        color: token2.colorPrimaryTextHover,
        background: token2.colorPrimaryBg
    }, {
        color: token2.colorPrimaryTextActive,
        background: token2.colorPrimaryBorder
    })), genTextLinkButtonStyle(token2, token2.colorPrimaryText, "link", {
        color: token2.colorPrimaryTextHover,
        background: token2.linkHoverBg
    }, {
        color: token2.colorPrimaryTextActive
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorPrimary, token2.colorPrimary, token2.colorTextDisabled, token2.colorBorder, {
        color: token2.colorPrimaryHover,
        borderColor: token2.colorPrimaryHover
    }, {
        color: token2.colorPrimaryActive,
        borderColor: token2.colorPrimaryActive
    }));
};
var genDangerousStyle = function(token2) {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        color: token2.colorError,
        boxShadow: token2.dangerShadow
    }, genSolidButtonStyle(token2, token2.dangerColor, token2.colorError, {
        background: token2.colorErrorHover
    }, {
        background: token2.colorErrorActive
    })), genOutlinedDashedButtonStyle(token2, token2.colorError, token2.colorBgContainer, {
        color: token2.colorErrorHover,
        borderColor: token2.colorErrorBorderHover
    }, {
        color: token2.colorErrorActive,
        borderColor: token2.colorErrorActive
    })), genDashedButtonStyle(token2)), genFilledButtonStyle(token2, token2.colorErrorBg, {
        background: token2.colorErrorBgFilledHover
    }, {
        background: token2.colorErrorBgActive
    })), genTextLinkButtonStyle(token2, token2.colorError, "text", {
        color: token2.colorErrorHover,
        background: token2.colorErrorBg
    }, {
        color: token2.colorErrorHover,
        background: token2.colorErrorBgActive
    })), genTextLinkButtonStyle(token2, token2.colorError, "link", {
        color: token2.colorErrorHover
    }, {
        color: token2.colorErrorActive
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorError, token2.colorError, token2.colorTextDisabled, token2.colorBorder, {
        color: token2.colorErrorHover,
        borderColor: token2.colorErrorHover
    }, {
        color: token2.colorErrorActive,
        borderColor: token2.colorErrorActive
    }));
};
var genLinkStyle2 = function(token2) {
    return Object.assign(Object.assign({}, genTextLinkButtonStyle(token2, token2.colorLink, "link", {
        color: token2.colorLinkHover
    }, {
        color: token2.colorLinkActive
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorInfo, token2.colorInfo, token2.colorTextDisabled, token2.colorBorder, {
        color: token2.colorInfoHover,
        borderColor: token2.colorInfoHover
    }, {
        color: token2.colorInfoActive,
        borderColor: token2.colorInfoActive
    }));
};
var genColorButtonStyle = function(token2) {
    var componentCls = token2.componentCls;
    var _obj;
    return Object.assign((_obj = {}, _define_property(_obj, "".concat(componentCls, "-color-default"), genDefaultButtonStyle(token2)), _define_property(_obj, "".concat(componentCls, "-color-primary"), genPrimaryButtonStyle(token2)), _define_property(_obj, "".concat(componentCls, "-color-dangerous"), genDangerousStyle(token2)), _define_property(_obj, "".concat(componentCls, "-color-link"), genLinkStyle2(token2)), _obj), genPresetColorStyle(token2));
};
var genCompatibleButtonStyle = function(token2) {
    return Object.assign(Object.assign(Object.assign(Object.assign({}, genOutlinedDashedButtonStyle(token2, token2.defaultBorderColor, token2.defaultBg, {
        color: token2.defaultHoverColor,
        borderColor: token2.defaultHoverBorderColor,
        background: token2.defaultHoverBg
    }, {
        color: token2.defaultActiveColor,
        borderColor: token2.defaultActiveBorderColor,
        background: token2.defaultActiveBg
    })), genTextLinkButtonStyle(token2, token2.textTextColor, "text", {
        color: token2.textTextHoverColor,
        background: token2.textHoverBg
    }, {
        color: token2.textTextActiveColor,
        background: token2.colorBgTextActive
    })), genSolidButtonStyle(token2, token2.primaryColor, token2.colorPrimary, {
        background: token2.colorPrimaryHover,
        color: token2.primaryColor
    }, {
        background: token2.colorPrimaryActive,
        color: token2.primaryColor
    })), genTextLinkButtonStyle(token2, token2.colorLink, "link", {
        color: token2.colorLinkHover,
        background: token2.linkHoverBg
    }, {
        color: token2.colorLinkActive
    }));
};
var genButtonStyle = function genButtonStyle(token2) {
    var prefixCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    var componentCls = token2.componentCls, controlHeight = token2.controlHeight, fontSize = token2.fontSize, borderRadius = token2.borderRadius, buttonPaddingHorizontal = token2.buttonPaddingHorizontal, iconCls = token2.iconCls, buttonPaddingVertical = token2.buttonPaddingVertical, buttonIconOnlyFontSize = token2.buttonIconOnlyFontSize;
    return [
        _define_property({}, prefixCls, _define_property({
            fontSize: fontSize,
            height: controlHeight,
            padding: "".concat(unit(buttonPaddingVertical), " ").concat(unit(buttonPaddingHorizontal)),
            borderRadius: borderRadius
        }, "&".concat(componentCls, "-icon-only"), _define_property({
            width: controlHeight
        }, iconCls, {
            fontSize: buttonIconOnlyFontSize
        }))),
        _define_property({}, "".concat(componentCls).concat(componentCls, "-circle").concat(prefixCls), genCircleButtonStyle(token2)),
        _define_property({}, "".concat(componentCls).concat(componentCls, "-round").concat(prefixCls), genRoundButtonStyle(token2))
    ];
};
var genSizeBaseButtonStyle = function(token2) {
    var baseToken = merge2(token2, {
        fontSize: token2.contentFontSize
    });
    return genButtonStyle(baseToken, token2.componentCls);
};
var genSizeSmallButtonStyle = function(token2) {
    var smallToken = merge2(token2, {
        controlHeight: token2.controlHeightSM,
        fontSize: token2.contentFontSizeSM,
        padding: token2.paddingXS,
        buttonPaddingHorizontal: token2.paddingInlineSM,
        buttonPaddingVertical: 0,
        borderRadius: token2.borderRadiusSM,
        buttonIconOnlyFontSize: token2.onlyIconSizeSM
    });
    return genButtonStyle(smallToken, "".concat(token2.componentCls, "-sm"));
};
var genSizeLargeButtonStyle = function(token2) {
    var largeToken = merge2(token2, {
        controlHeight: token2.controlHeightLG,
        fontSize: token2.contentFontSizeLG,
        buttonPaddingHorizontal: token2.paddingInlineLG,
        buttonPaddingVertical: 0,
        borderRadius: token2.borderRadiusLG,
        buttonIconOnlyFontSize: token2.onlyIconSizeLG
    });
    return genButtonStyle(largeToken, "".concat(token2.componentCls, "-lg"));
};
var genBlockButtonStyle = function(token2) {
    var componentCls = token2.componentCls;
    return _define_property({}, componentCls, _define_property({}, "&".concat(componentCls, "-block"), {
        width: "100%"
    }));
};
var style_default2 = genStyleHooks("Button", function(token2) {
    var buttonToken = prepareToken(token2);
    return [
        // Shared
        genSharedButtonStyle(buttonToken),
        // Size
        genSizeBaseButtonStyle(buttonToken),
        genSizeSmallButtonStyle(buttonToken),
        genSizeLargeButtonStyle(buttonToken),
        // Block
        genBlockButtonStyle(buttonToken),
        // Color
        genColorButtonStyle(buttonToken),
        // https://github.com/ant-design/ant-design/issues/50969
        genCompatibleButtonStyle(buttonToken),
        // Button Group
        group_default(buttonToken)
    ];
}, prepareComponentToken, {
    unitless: {
        fontWeight: true,
        contentLineHeight: true,
        contentLineHeightSM: true,
        contentLineHeightLG: true
    }
});
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/style/compact-item.js
function compactItemBorder(token2, parentCls, options) {
    var focusElCls = options.focusElCls, focus = options.focus, borderElCls = options.borderElCls;
    var childCombinator = borderElCls ? "> *" : "";
    var hoverEffects = [
        "hover",
        focus ? "focus" : null,
        "active"
    ].filter(Boolean).map(function(n) {
        return "&:".concat(n, " ").concat(childCombinator);
    }).join(",");
    var _obj;
    return _obj = {}, _define_property(_obj, "&-item:not(".concat(parentCls, "-last-item)"), {
        marginInlineEnd: token2.calc(token2.lineWidth).mul(-1).equal()
    }), _define_property(_obj, "&-item", Object.assign(Object.assign(_define_property({}, hoverEffects, {
        zIndex: 2
    }), focusElCls ? _define_property({}, "&".concat(focusElCls), {
        zIndex: 2
    }) : {}), _define_property({}, "&[disabled] ".concat(childCombinator), {
        zIndex: 0
    }))), _obj;
}
function compactItemBorderRadius(prefixCls, parentCls, options) {
    var borderElCls = options.borderElCls;
    var childCombinator = borderElCls ? "> ".concat(borderElCls) : "";
    var _obj;
    return _obj = {}, _define_property(_obj, "&-item:not(".concat(parentCls, "-first-item):not(").concat(parentCls, "-last-item) ").concat(childCombinator), {
        borderRadius: 0
    }), _define_property(_obj, "&-item:not(".concat(parentCls, "-last-item)").concat(parentCls, "-first-item"), _define_property({}, "& ".concat(childCombinator, ", &").concat(prefixCls, "-sm ").concat(childCombinator, ", &").concat(prefixCls, "-lg ").concat(childCombinator), {
        borderStartEndRadius: 0,
        borderEndEndRadius: 0
    })), _define_property(_obj, "&-item:not(".concat(parentCls, "-first-item)").concat(parentCls, "-last-item"), _define_property({}, "& ".concat(childCombinator, ", &").concat(prefixCls, "-sm ").concat(childCombinator, ", &").concat(prefixCls, "-lg ").concat(childCombinator), {
        borderStartStartRadius: 0,
        borderEndStartRadius: 0
    })), _obj;
}
function genCompactItemStyle(token2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        focus: true
    };
    var componentCls = token2.componentCls;
    var compactCls = "".concat(componentCls, "-compact");
    return _define_property({}, compactCls, Object.assign(Object.assign({}, compactItemBorder(token2, compactCls, options)), compactItemBorderRadius(componentCls, compactCls, options)));
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/style/compact-item-vertical.js
function compactItemVerticalBorder(token2, parentCls) {
    var _obj;
    return _obj = {}, // border collapse
    _define_property(_obj, "&-item:not(".concat(parentCls, "-last-item)"), {
        marginBottom: token2.calc(token2.lineWidth).mul(-1).equal()
    }), _define_property(_obj, "&-item", {
        "&:hover,&:focus,&:active": {
            zIndex: 2
        },
        "&[disabled]": {
            zIndex: 0
        }
    }), _obj;
}
function compactItemBorderVerticalRadius(prefixCls, parentCls) {
    var _obj;
    return _obj = {}, _define_property(_obj, "&-item:not(".concat(parentCls, "-first-item):not(").concat(parentCls, "-last-item)"), {
        borderRadius: 0
    }), _define_property(_obj, "&-item".concat(parentCls, "-first-item:not(").concat(parentCls, "-last-item)"), _define_property({}, "&, &".concat(prefixCls, "-sm, &").concat(prefixCls, "-lg"), {
        borderEndEndRadius: 0,
        borderEndStartRadius: 0
    })), _define_property(_obj, "&-item".concat(parentCls, "-last-item:not(").concat(parentCls, "-first-item)"), _define_property({}, "&, &".concat(prefixCls, "-sm, &").concat(prefixCls, "-lg"), {
        borderStartStartRadius: 0,
        borderStartEndRadius: 0
    })), _obj;
}
function genCompactItemVerticalStyle(token2) {
    var compactCls = "".concat(token2.componentCls, "-compact-vertical");
    return _define_property({}, compactCls, Object.assign(Object.assign({}, compactItemVerticalBorder(token2, compactCls)), compactItemBorderVerticalRadius(token2.componentCls, compactCls)));
}
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/style/compact.js
var genButtonCompactStyle = function(token2) {
    var componentCls = token2.componentCls, colorPrimaryHover = token2.colorPrimaryHover, lineWidth = token2.lineWidth, calc = token2.calc;
    var insetOffset = calc(lineWidth).mul(-1).equal();
    var getCompactBorderStyle = function(vertical) {
        var selector = "".concat(componentCls, "-compact").concat(vertical ? "-vertical" : "", "-item").concat(componentCls, "-primary:not([disabled])");
        return _define_property({}, "".concat(selector, " + ").concat(selector, "::before"), {
            position: "absolute",
            top: vertical ? insetOffset : 0,
            insetInlineStart: vertical ? 0 : insetOffset,
            backgroundColor: colorPrimaryHover,
            content: '""',
            width: vertical ? "100%" : lineWidth,
            height: vertical ? lineWidth : "100%"
        });
    };
    return Object.assign(Object.assign({}, getCompactBorderStyle()), getCompactBorderStyle(true));
};
var compact_default = genSubStyleComponent([
    "Button",
    "compact"
], function(token2) {
    var buttonToken = prepareToken(token2);
    return [
        // Space Compact
        genCompactItemStyle(buttonToken),
        genCompactItemVerticalStyle(buttonToken),
        genButtonCompactStyle(buttonToken)
    ];
}, prepareComponentToken);
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/button.js
var __rest5 = function __rest5(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function getLoadingConfig(loading) {
    if ((typeof loading === "undefined" ? "undefined" : _type_of(loading)) === "object" && loading) {
        var delay = loading === null || loading === void 0 ? void 0 : loading.delay;
        delay = !Number.isNaN(delay) && typeof delay === "number" ? delay : 0;
        return {
            loading: delay <= 0,
            delay: delay
        };
    }
    return {
        loading: !!loading,
        delay: 0
    };
}
var ButtonTypeMap = {
    default: [
        "default",
        "outlined"
    ],
    primary: [
        "primary",
        "solid"
    ],
    dashed: [
        "default",
        "dashed"
    ],
    // `link` is not a real color but we should compatible with it
    link: [
        "link",
        "link"
    ],
    text: [
        "default",
        "text"
    ]
};
var InternalCompoundedButton = /* @__PURE__ */ import_react37.default.forwardRef(function(props, ref) {
    var _a, _b;
    var _props_loading = props.loading, loading = _props_loading === void 0 ? false : _props_loading, customizePrefixCls = props.prefixCls, color = props.color, variant = props.variant, type = props.type, _props_danger = props.danger, danger = _props_danger === void 0 ? false : _props_danger, _props_shape = props.shape, shape = _props_shape === void 0 ? "default" : _props_shape, customizeSize = props.size, styles = props.styles, customDisabled = props.disabled, className = props.className, rootClassName = props.rootClassName, children = props.children, icon = props.icon, _props_iconPosition = props.iconPosition, iconPosition = _props_iconPosition === void 0 ? "start" : _props_iconPosition, _props_ghost = props.ghost, ghost = _props_ghost === void 0 ? false : _props_ghost, _props_block = props.block, block = _props_block === void 0 ? false : _props_block, _props_htmlType = props.// React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.
    htmlType, htmlType = _props_htmlType === void 0 ? "button" : _props_htmlType, customClassNames = props.classNames, tmp = props.style, customStyle = tmp === void 0 ? {} : tmp, autoInsertSpace = props.autoInsertSpace, autoFocus = props.autoFocus, rest = __rest5(props, [
        "loading",
        "prefixCls",
        "color",
        "variant",
        "type",
        "danger",
        "shape",
        "size",
        "styles",
        "disabled",
        "className",
        "rootClassName",
        "children",
        "icon",
        "iconPosition",
        "ghost",
        "block",
        "htmlType",
        "classNames",
        "style",
        "autoInsertSpace",
        "autoFocus"
    ]);
    var mergedType = type || "default";
    var _ref = _sliced_to_array((0, import_react37.useMemo)(function() {
        if (color && variant) {
            return [
                color,
                variant
            ];
        }
        var colorVariantPair = ButtonTypeMap[mergedType] || [];
        if (danger) {
            return [
                "danger",
                colorVariantPair[1]
            ];
        }
        return colorVariantPair;
    }, [
        type,
        color,
        variant,
        danger
    ]), 2), mergedColor = _ref[0], mergedVariant = _ref[1];
    var isDanger = mergedColor === "danger";
    var mergedColorText = isDanger ? "dangerous" : mergedColor;
    var _useComponentConfig = useComponentConfig("button"), getPrefixCls = _useComponentConfig.getPrefixCls, direction = _useComponentConfig.direction, contextAutoInsertSpace = _useComponentConfig.autoInsertSpace, contextClassName = _useComponentConfig.className, contextStyle = _useComponentConfig.style, contextClassNames = _useComponentConfig.classNames, contextStyles = _useComponentConfig.styles;
    var mergedInsertSpace = (_a = autoInsertSpace !== null && autoInsertSpace !== void 0 ? autoInsertSpace : contextAutoInsertSpace) !== null && _a !== void 0 ? _a : true;
    var prefixCls = getPrefixCls("btn", customizePrefixCls);
    var _style_default2 = _sliced_to_array(style_default2(prefixCls), 3), wrapCSSVar = _style_default2[0], hashId = _style_default2[1], cssVarCls = _style_default2[2];
    var disabled = (0, import_react37.useContext)(DisabledContext_default);
    var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    var groupSize = (0, import_react37.useContext)(GroupSizeContext);
    var loadingOrDelay = (0, import_react37.useMemo)(function() {
        return getLoadingConfig(loading);
    }, [
        loading
    ]);
    var _ref1 = _sliced_to_array((0, import_react37.useState)(loadingOrDelay.loading), 2), innerLoading = _ref1[0], setLoading = _ref1[1];
    var _ref2 = _sliced_to_array((0, import_react37.useState)(false), 2), hasTwoCNChar = _ref2[0], setHasTwoCNChar = _ref2[1];
    var buttonRef = (0, import_react37.useRef)(null);
    var mergedRef = useComposeRef(ref, buttonRef);
    var needInserted = import_react37.Children.count(children) === 1 && !icon && !isUnBorderedButtonVariant(mergedVariant);
    var isMountRef = (0, import_react37.useRef)(true);
    import_react37.default.useEffect(function() {
        isMountRef.current = false;
        return function() {
            isMountRef.current = true;
        };
    }, []);
    (0, import_react37.useEffect)(function() {
        var cleanupTimer = function cleanupTimer() {
            if (delayTimer) {
                clearTimeout(delayTimer);
                delayTimer = null;
            }
        };
        var delayTimer = null;
        if (loadingOrDelay.delay > 0) {
            delayTimer = setTimeout(function() {
                delayTimer = null;
                setLoading(true);
            }, loadingOrDelay.delay);
        } else {
            setLoading(loadingOrDelay.loading);
        }
        return cleanupTimer;
    }, [
        loadingOrDelay
    ]);
    (0, import_react37.useEffect)(function() {
        if (!buttonRef.current || !mergedInsertSpace) {
            return;
        }
        var buttonText = buttonRef.current.textContent || "";
        if (needInserted && isTwoCNChar(buttonText)) {
            if (!hasTwoCNChar) {
                setHasTwoCNChar(true);
            }
        } else if (hasTwoCNChar) {
            setHasTwoCNChar(false);
        }
    });
    (0, import_react37.useEffect)(function() {
        if (autoFocus && buttonRef.current) {
            buttonRef.current.focus();
        }
    }, []);
    var handleClick = import_react37.default.useCallback(function(e) {
        var _a2;
        if (innerLoading || mergedDisabled) {
            e.preventDefault();
            return;
        }
        (_a2 = props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, "href" in props ? e : e);
    }, [
        props.onClick,
        innerLoading,
        mergedDisabled
    ]);
    if (process.env.NODE_ENV !== "production") {
        var warning4 = devUseWarning("Button");
        process.env.NODE_ENV !== "production" ? warning4(!(typeof icon === "string" && icon.length > 2), "breaking", "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")) : void 0;
        process.env.NODE_ENV !== "production" ? warning4(!(ghost && isUnBorderedButtonVariant(mergedVariant)), "usage", "`link` or `text` button can't be a `ghost` button.") : void 0;
    }
    var _useCompactItemContext = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContext.compactSize, compactItemClassnames = _useCompactItemContext.compactItemClassnames;
    var sizeClassNameMap = {
        large: "lg",
        small: "sm",
        middle: void 0
    };
    var sizeFullName = useSize_default(function(ctxSize) {
        var _a2, _b2;
        return (_b2 = (_a2 = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a2 !== void 0 ? _a2 : groupSize) !== null && _b2 !== void 0 ? _b2 : ctxSize;
    });
    var sizeCls = sizeFullName ? (_b = sizeClassNameMap[sizeFullName]) !== null && _b !== void 0 ? _b : "" : "";
    var iconType = innerLoading ? "loading" : icon;
    var linkButtonRestProps = omit(rest, [
        "navigate"
    ]);
    var _obj;
    var classes = (0, import_classnames14.default)(prefixCls, hashId, cssVarCls, (_obj = {}, _define_property(_obj, "".concat(prefixCls, "-").concat(shape), shape !== "default" && shape), // line(253 - 254): Compatible with versions earlier than 5.21.0
    _define_property(_obj, "".concat(prefixCls, "-").concat(mergedType), mergedType), _define_property(_obj, "".concat(prefixCls, "-dangerous"), danger), _define_property(_obj, "".concat(prefixCls, "-color-").concat(mergedColorText), mergedColorText), _define_property(_obj, "".concat(prefixCls, "-variant-").concat(mergedVariant), mergedVariant), _define_property(_obj, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _define_property(_obj, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), _define_property(_obj, "".concat(prefixCls, "-background-ghost"), ghost && !isUnBorderedButtonVariant(mergedVariant)), _define_property(_obj, "".concat(prefixCls, "-loading"), innerLoading), _define_property(_obj, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && mergedInsertSpace && !innerLoading), _define_property(_obj, "".concat(prefixCls, "-block"), block), _define_property(_obj, "".concat(prefixCls, "-rtl"), direction === "rtl"), _define_property(_obj, "".concat(prefixCls, "-icon-end"), iconPosition === "end"), _obj), compactItemClassnames, className, rootClassName, contextClassName);
    var fullStyle = Object.assign(Object.assign({}, contextStyle), customStyle);
    var iconClasses = (0, import_classnames14.default)(customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.icon, contextClassNames.icon);
    var iconStyle = Object.assign(Object.assign({}, (styles === null || styles === void 0 ? void 0 : styles.icon) || {}), contextStyles.icon || {});
    var iconNode = icon && !innerLoading ? /* @__PURE__ */ import_react37.default.createElement(IconWrapper_default, {
        prefixCls: prefixCls,
        className: iconClasses,
        style: iconStyle
    }, icon) : loading && (typeof loading === "undefined" ? "undefined" : _type_of(loading)) === "object" && loading.icon ? /* @__PURE__ */ import_react37.default.createElement(IconWrapper_default, {
        prefixCls: prefixCls,
        className: iconClasses,
        style: iconStyle
    }, loading.icon) : /* @__PURE__ */ import_react37.default.createElement(DefaultLoadingIcon_default, {
        existIcon: !!icon,
        prefixCls: prefixCls,
        loading: innerLoading,
        mount: isMountRef.current
    });
    var kids = children || children === 0 ? spaceChildren(children, needInserted && mergedInsertSpace) : null;
    if (linkButtonRestProps.href !== void 0) {
        return wrapCSSVar(/* @__PURE__ */ import_react37.default.createElement("a", Object.assign({}, linkButtonRestProps, {
            className: (0, import_classnames14.default)(classes, _define_property({}, "".concat(prefixCls, "-disabled"), mergedDisabled)),
            href: mergedDisabled ? void 0 : linkButtonRestProps.href,
            style: fullStyle,
            onClick: handleClick,
            ref: mergedRef,
            tabIndex: mergedDisabled ? -1 : 0
        }), iconNode, kids));
    }
    var buttonNode = /* @__PURE__ */ import_react37.default.createElement("button", Object.assign({}, rest, {
        type: htmlType,
        className: classes,
        style: fullStyle,
        onClick: handleClick,
        disabled: mergedDisabled,
        ref: mergedRef
    }), iconNode, kids, compactItemClassnames && /* @__PURE__ */ import_react37.default.createElement(compact_default, {
        prefixCls: prefixCls
    }));
    if (!isUnBorderedButtonVariant(mergedVariant)) {
        buttonNode = /* @__PURE__ */ import_react37.default.createElement(wave_default, {
            component: "Button",
            disabled: innerLoading
        }, buttonNode);
    }
    return wrapCSSVar(buttonNode);
});
var Button = InternalCompoundedButton;
Button.Group = button_group_default;
Button.__ANT_BUTTON = true;
if (process.env.NODE_ENV !== "production") {
    Button.displayName = "Button";
}
var button_default = Button;
// ../../node_modules/.pnpm/antd@5.24.3_date-fns@2.30.0_moment@2.30.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/antd/es/button/index.js
var button_default2 = button_default;
// src/components/SiButton/Button.tsx
var import_react38 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var SiButton = function(param) {
    var children = param.children, onClick = param.onClick;
    var _ref = _sliced_to_array((0, import_react38.useState)(0), 2), num = _ref[0], setNum = _ref[1];
    var handleClick = function() {
        setNum(num + 1);
        onClick === null || onClick === void 0 ? void 0 : onClick();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(button_default2, {
        onClick: handleClick,
        children: [
            num,
            children
        ]
    });
};
var Button_default = SiButton;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    Button: Button
}); /*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.production.min.js:
  (**
   * @license React
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@babel/runtime/helpers/esm/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/ 
//# sourceMappingURL=index.js.map